<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jeno&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jeno5980515.github.io/"/>
  <updated>2017-09-06T07:09:40.000Z</updated>
  <id>http://jeno5980515.github.io/</id>
  
  <author>
    <name>Jeno</name>
    <email>jeno5980515@yahoo.com.tw</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[LeetCode] 142 - Linked List Cycle II</title>
    <link href="http://jeno5980515.github.io/2017/09/06/Online%20Judge/LeetCode/142%20-%20Linked%20List%20Cycle%20II/"/>
    <id>http://jeno5980515.github.io/2017/09/06/Online Judge/LeetCode/142 - Linked List Cycle II/</id>
    <published>2017-09-06T05:41:47.000Z</published>
    <updated>2017-09-06T07:09:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h2><p>在沒有額外空間且不修改的情況下判斷 Linked List 是否有環，並且回傳該環的起點。</p>
<a id="more"></a>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>先同第一題一樣先使用兩個指標，一個一次一步，另一個則一次兩步直到會合。</p>
<p>假設<br>從 Linked List 的起點到環的起點為 A<br>從 環的起點到相遇處為 B<br>從 相遇處到環的起點為 C </p>
<p>則可以得出下列式子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">2(A + B + n(B+C)) = A + B + m(B+C) , 其中 n, m 個別代表慢指針及快指針所繞的圈數</div><div class="line">=&gt; 2A + 2B + 2n(B+C) = A + B + m(B+C)</div><div class="line">=&gt; A + B = (B+C)(m-2n)</div></pre></td></tr></table></figure></p>
<p>當題目生成時 A, B+C 已經固定，找尋是否有存在 n, m, B 使等式成立<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">n = 0 時， m = A, 而 B = A(B+C) - A</div><div class="line">=&gt; A + A(B+C) - A = A(B+C)  </div><div class="line">=&gt; A(B+C) = A(B+C)</div></pre></td></tr></table></figure></p>
<p>因此<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">A + B = (B+C)(m-2n)</div><div class="line">=&gt; A + B + C = (B+C)(m-2n) + C</div><div class="line">=&gt; A = (B+C)(m-2n-1) + C </div><div class="line">=&gt; A = (B+C)(A-1) + C</div></pre></td></tr></table></figure></p>
<p>因此從 Linked List 起點開始的指針必定會和從相會處開始的指針交於環的起點。</p>
<h2 id="程式"><a href="#程式" class="headerlink" title="程式"></a>程式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * function ListNode(val) &#123;</div><div class="line"> *     this.val = val;</div><div class="line"> *     this.next = null;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;ListNode&#125; head</div><div class="line"> * @return &#123;ListNode&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> detectCycle = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> ( head === <span class="literal">null</span> ) <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">let</span> fast = head;</div><div class="line">  <span class="keyword">let</span> slow = head;</div><div class="line">  <span class="keyword">while</span> ( fast.next &amp;&amp; fast.next.next )&#123;</div><div class="line">    fast = fast.next.next;</div><div class="line">    slow = slow.next;</div><div class="line">    <span class="keyword">if</span> ( fast === slow )&#123;</div><div class="line">      slow = head;</div><div class="line">      <span class="keyword">while</span> ( slow !== fast )&#123;</div><div class="line">        slow = slow.next;</div><div class="line">        fast = fast.next;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> slow;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h2&gt;&lt;p&gt;在沒有額外空間且不修改的情況下判斷 Linked List 是否有環，並且回傳該環的起點。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://jeno5980515.github.io/categories/Online-Judge/"/>
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/categories/Online-Judge/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/tags/LeetCode/"/>
    
      <category term="142" scheme="http://jeno5980515.github.io/tags/142/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 141 - Linked List Cycle</title>
    <link href="http://jeno5980515.github.io/2017/09/06/Online%20Judge/LeetCode/141%20-%20Linked%20List%20Cycle/"/>
    <id>http://jeno5980515.github.io/2017/09/06/Online Judge/LeetCode/141 - Linked List Cycle/</id>
    <published>2017-09-06T05:36:43.000Z</published>
    <updated>2017-09-06T05:41:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h2><p>在沒有額外空間的情況下判斷 Linked List 是否有環。</p>
<a id="more"></a>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>使用兩個指針遍歷這個 Linked List 。一個一次走兩步，另一個則一次走一步，若有環則必定會合同一個點。</p>
<h2 id="程式"><a href="#程式" class="headerlink" title="程式"></a>程式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * function ListNode(val) &#123;</div><div class="line"> *     this.val = val;</div><div class="line"> *     this.next = null;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;ListNode&#125; head</div><div class="line"> * @return &#123;boolean&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> hasCycle = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> ( head === <span class="literal">null</span> ) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">let</span> fast = head;</div><div class="line">  <span class="keyword">let</span> slow = head;</div><div class="line">  <span class="keyword">while</span> ( fast.next &amp;&amp; fast.next.next )&#123;</div><div class="line">    fast = fast.next.next;</div><div class="line">    slow = slow.next;</div><div class="line">    <span class="keyword">if</span> ( fast === slow )&#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h2&gt;&lt;p&gt;在沒有額外空間的情況下判斷 Linked List 是否有環。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://jeno5980515.github.io/categories/Online-Judge/"/>
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/categories/Online-Judge/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/tags/LeetCode/"/>
    
      <category term="141" scheme="http://jeno5980515.github.io/tags/141/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 102 - Binary Tree Level Order Traversal</title>
    <link href="http://jeno5980515.github.io/2017/09/06/Online%20Judge/LeetCode/102%20-%20Binary%20Tree%20Level%20Order%20Traversal/"/>
    <id>http://jeno5980515.github.io/2017/09/06/Online Judge/LeetCode/102 - Binary Tree Level Order Traversal/</id>
    <published>2017-09-06T04:30:05.000Z</published>
    <updated>2017-09-06T05:33:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h2><p><code>Level Order Traversal</code> 二元樹。</p>
<a id="more"></a>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>BFS。</p>
<h2 id="程式"><a href="#程式" class="headerlink" title="程式"></a>程式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * function TreeNode(val) &#123;</div><div class="line"> *     this.val = val;</div><div class="line"> *     this.left = this.right = null;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;TreeNode&#125; root</div><div class="line"> * @return &#123;number[][]&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> ( !root ) <span class="keyword">return</span> [];</div><div class="line">  <span class="keyword">let</span> queue = [root];</div><div class="line">  <span class="keyword">let</span> levels = [];</div><div class="line">  <span class="keyword">while</span>( queue.length !== <span class="number">0</span> )&#123;</div><div class="line">    <span class="keyword">let</span> length = queue.length;</div><div class="line">    levels.push([]);</div><div class="line">    <span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i ++ )&#123;</div><div class="line">      <span class="keyword">let</span> node = queue.shift();</div><div class="line">      levels[levels.length<span class="number">-1</span>].push(node.val);</div><div class="line">      <span class="keyword">if</span> ( node.left ) queue.push(node.left);</div><div class="line">      <span class="keyword">if</span> ( node.right ) queue.push(node.right);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> levels;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Level Order Traversal&lt;/code&gt; 二元樹。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://jeno5980515.github.io/categories/Online-Judge/"/>
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/categories/Online-Judge/LeetCode/"/>
    
    
      <category term="Tree" scheme="http://jeno5980515.github.io/tags/Tree/"/>
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/tags/LeetCode/"/>
    
      <category term="98" scheme="http://jeno5980515.github.io/tags/98/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 98 - Validate Binary Search Tree</title>
    <link href="http://jeno5980515.github.io/2017/09/06/Online%20Judge/LeetCode/98%20-%20Validate%20Binary%20Search%20Tree/"/>
    <id>http://jeno5980515.github.io/2017/09/06/Online Judge/LeetCode/98 - Validate Binary Search Tree/</id>
    <published>2017-09-06T04:19:53.000Z</published>
    <updated>2017-09-06T04:29:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h2><p>判斷是否為二元搜尋樹。</p>
<a id="more"></a>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>二元搜尋樹對於任一節點來說，左子樹必小於且右子樹必大於該節點。</p>
<p>利用 <code>Inorder Traversal</code> 的特性「左子樹-&gt;根-&gt;右子樹」，判斷該結果是否為升序排列即可。</p>
<h2 id="程式"><a href="#程式" class="headerlink" title="程式"></a>程式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * function TreeNode(val) &#123;</div><div class="line"> *     this.val = val;</div><div class="line"> *     this.left = this.right = null;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;TreeNode&#125; root</div><div class="line"> * @return &#123;boolean&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> isValidBST = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</div><div class="line">    </div><div class="line">  <span class="keyword">let</span> stack = [];</div><div class="line">  <span class="keyword">let</span> result = [];</div><div class="line">  <span class="keyword">let</span> node = root;</div><div class="line"></div><div class="line">  <span class="keyword">while</span>( stack.length !== <span class="number">0</span> || node !== <span class="literal">null</span> )&#123;</div><div class="line">    <span class="keyword">while</span> ( node !== <span class="literal">null</span> )&#123;</div><div class="line">      stack.push(node);</div><div class="line">      node = node.left;</div><div class="line">    &#125;</div><div class="line">    node = stack.pop();</div><div class="line">    result.push(node.val);</div><div class="line">    node = node.right;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">1</span> ; i &lt; result.length ; i ++ )&#123;</div><div class="line">    <span class="keyword">if</span> ( result[i] &lt;= result[i<span class="number">-1</span>] )&#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h2&gt;&lt;p&gt;判斷是否為二元搜尋樹。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://jeno5980515.github.io/categories/Online-Judge/"/>
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/categories/Online-Judge/LeetCode/"/>
    
    
      <category term="Tree" scheme="http://jeno5980515.github.io/tags/Tree/"/>
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/tags/LeetCode/"/>
    
      <category term="98" scheme="http://jeno5980515.github.io/tags/98/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 94 - Binary Tree Inorder Traversal</title>
    <link href="http://jeno5980515.github.io/2017/09/06/Online%20Judge/LeetCode/94%20-%20Binary%20Tree%20Inorder%20Traversal/"/>
    <id>http://jeno5980515.github.io/2017/09/06/Online Judge/LeetCode/94 - Binary Tree Inorder Traversal/</id>
    <published>2017-09-06T03:09:44.000Z</published>
    <updated>2017-09-06T04:19:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h2><p>使用非遞迴的方式 <code>Inorder Traversal</code> 二元樹。</p>
<a id="more"></a>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>Inorder 順序是左子樹、根、右子樹，利用 <code>stack</code> 來完成 Traversal 。</p>
<p>往左子樹下看並同時將一路上的根放入 stack，當碰到 null 時代表該節點左子樹已到底，pop 出該節點（此時視為根）且紀錄，因此接著進入該節點右子樹重複步驟上述步驟，直到該節點右子樹遍歷完，代表該節點的根之左子樹遍歷完畢，再依此類推。</p>
<h2 id="程式"><a href="#程式" class="headerlink" title="程式"></a>程式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * function TreeNode(val) &#123;</div><div class="line"> *     this.val = val;</div><div class="line"> *     this.left = this.right = null;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;TreeNode&#125; root</div><div class="line"> * @return &#123;number[]&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> inorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> ( !root ) <span class="keyword">return</span> [];</div><div class="line">  </div><div class="line">  <span class="keyword">let</span> stack = [];</div><div class="line">  <span class="keyword">let</span> result = [];</div><div class="line">  <span class="keyword">let</span> node = root;</div><div class="line">  </div><div class="line">  <span class="keyword">while</span>( stack.length !== <span class="number">0</span> || node !== <span class="literal">null</span> )&#123;</div><div class="line">    <span class="keyword">while</span> ( node !== <span class="literal">null</span> )&#123;</div><div class="line">      stack.push(node);</div><div class="line">      node = node.left;</div><div class="line">    &#125;</div><div class="line">    node = stack.pop();</div><div class="line">    result.push(node.val);</div><div class="line">    node = node.right;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h2&gt;&lt;p&gt;使用非遞迴的方式 &lt;code&gt;Inorder Traversal&lt;/code&gt; 二元樹。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://jeno5980515.github.io/categories/Online-Judge/"/>
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/categories/Online-Judge/LeetCode/"/>
    
    
      <category term="Tree" scheme="http://jeno5980515.github.io/tags/Tree/"/>
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/tags/LeetCode/"/>
    
      <category term="94" scheme="http://jeno5980515.github.io/tags/94/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 64 - Minimum Path Sum</title>
    <link href="http://jeno5980515.github.io/2017/09/06/Online%20Judge/LeetCode/64%20-%20Minimum%20Path%20Sum/"/>
    <id>http://jeno5980515.github.io/2017/09/06/Online Judge/LeetCode/64 - Minimum Path Sum/</id>
    <published>2017-09-06T03:09:44.000Z</published>
    <updated>2017-09-06T03:19:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h2><p>給一個 m x n 填滿非負數的矩陣，從左上方開始往右下走且每一步只能往右或往下走，求最小數字總和。</p>
<a id="more"></a>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>DP。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dp(i,j) = dp[i][j<span class="number">-1</span>] + grid[i][j] <span class="keyword">if</span> i = <span class="number">0</span></div><div class="line">	= dp[i<span class="number">-1</span>][j] + grid[i][j] <span class="keyword">if</span> j = <span class="number">0</span></div><div class="line">	= min(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]) + grid[i][j] <span class="keyword">else</span></div></pre></td></tr></table></figure></p>
<h2 id="程式"><a href="#程式" class="headerlink" title="程式"></a>程式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;number[][]&#125; grid</div><div class="line"> * @return &#123;number&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> minPathSum = <span class="function"><span class="keyword">function</span>(<span class="params">grid</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> m = grid.length, n = grid[<span class="number">0</span>].length;</div><div class="line">  <span class="keyword">const</span> dp = <span class="built_in">Array</span>.apply(<span class="literal">null</span>, <span class="built_in">Array</span>(m+<span class="number">1</span>)).map(<span class="function"><span class="params">row</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(n+<span class="number">1</span>).fill(<span class="number">0</span>));</div><div class="line">  <span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">1</span> ; i &lt; dp.length ; i ++ )&#123;</div><div class="line">    <span class="keyword">for</span> ( <span class="keyword">let</span> j = <span class="number">1</span> ; j &lt; dp[i].length ; j ++ )&#123;</div><div class="line">      <span class="keyword">if</span> ( i === <span class="number">1</span> ) dp[i][j] = dp[i][j<span class="number">-1</span>] + grid[i<span class="number">-1</span>][j<span class="number">-1</span>];</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( j === <span class="number">1</span> ) dp[i][j] = dp[i<span class="number">-1</span>][j] + grid[i<span class="number">-1</span>][j<span class="number">-1</span>];</div><div class="line">      <span class="keyword">else</span> dp[i][j] = <span class="built_in">Math</span>.min(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]) + grid[i<span class="number">-1</span>][j<span class="number">-1</span>]; </div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> dp[m][n];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h2&gt;&lt;p&gt;給一個 m x n 填滿非負數的矩陣，從左上方開始往右下走且每一步只能往右或往下走，求最小數字總和。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://jeno5980515.github.io/categories/Online-Judge/"/>
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/categories/Online-Judge/LeetCode/"/>
    
    
      <category term="dp" scheme="http://jeno5980515.github.io/tags/dp/"/>
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/tags/LeetCode/"/>
    
      <category term="64" scheme="http://jeno5980515.github.io/tags/64/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 59 - Spiral Matrix II</title>
    <link href="http://jeno5980515.github.io/2017/09/03/Online%20Judge/LeetCode/59%20-%20Spiral%20Matrix%20II/"/>
    <id>http://jeno5980515.github.io/2017/09/03/Online Judge/LeetCode/59 - Spiral Matrix II/</id>
    <published>2017-09-03T06:50:20.000Z</published>
    <updated>2017-09-03T06:57:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h1><p>同 <code>54 - Spiral Matrix</code> ，模擬繞圈遍歷矩陣即可。</p>
<a id="more"></a>
<h1 id="程式"><a href="#程式" class="headerlink" title="程式"></a>程式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;number&#125; n</div><div class="line"> * @return &#123;number[][]&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> generateMatrix = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> ( n === <span class="number">0</span> ) <span class="keyword">return</span> [];</div><div class="line">  <span class="keyword">let</span> matrix = <span class="built_in">Array</span>.apply(<span class="literal">null</span>, <span class="built_in">Array</span>(n)).map(<span class="function"><span class="params">row</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(n));</div><div class="line">  <span class="keyword">const</span> dirs = [<span class="string">'e'</span>, <span class="string">'s'</span>, <span class="string">'w'</span>, <span class="string">'n'</span>, <span class="string">'e'</span>];</div><div class="line">  <span class="keyword">const</span> dxs = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>];</div><div class="line">  <span class="keyword">const</span> dys = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>];</div><div class="line">    </div><div class="line">  <span class="keyword">const</span> checkValid = <span class="function">(<span class="params">x, y, dir</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">switch</span>(dir)&#123;</div><div class="line">      <span class="keyword">case</span> <span class="string">'e'</span>: <span class="keyword">return</span> y &lt; matrix[x].length - <span class="number">1</span> &amp;&amp; !matrix[x][y+<span class="number">1</span>];</div><div class="line">      <span class="keyword">case</span> <span class="string">'s'</span>: <span class="keyword">return</span> x &lt; matrix.length - <span class="number">1</span> &amp;&amp; !matrix[x+<span class="number">1</span>][y];</div><div class="line">      <span class="keyword">case</span> <span class="string">'w'</span>: <span class="keyword">return</span> y &gt;= <span class="number">1</span> &amp;&amp; !matrix[x][y<span class="number">-1</span>];</div><div class="line">      <span class="keyword">case</span> <span class="string">'n'</span>: <span class="keyword">return</span> x &gt;= <span class="number">1</span> &amp;&amp; !matrix[x<span class="number">-1</span>][y];</div><div class="line">    &#125;</div><div class="line">  &#125;  </div><div class="line">    </div><div class="line">  <span class="keyword">const</span> loop = <span class="function">(<span class="params">x ,y, dir, number</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> ( matrix[x][y] ) <span class="keyword">return</span> ;</div><div class="line">    </div><div class="line">    matrix[x][y] = number;</div><div class="line">    <span class="keyword">let</span> dirIndex = dirs.indexOf(dir);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>( !checkValid(x, y, dir) )&#123;</div><div class="line">      dirIndex ++ ;</div><div class="line">      <span class="keyword">if</span> ( checkValid(x, y, dirs[dirIndex]) )&#123;</div><div class="line">        loop(x + dxs[dirIndex], y + dys[dirIndex], dirs[dirIndex], number + <span class="number">1</span>);</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      loop(x + dxs[dirIndex], y + dys[dirIndex], dir, number + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  loop(<span class="number">0</span>, <span class="number">0</span>, dirs[<span class="number">0</span>], <span class="number">1</span>);</div><div class="line">  <span class="keyword">return</span> matrix;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h1&gt;&lt;p&gt;同 &lt;code&gt;54 - Spiral Matrix&lt;/code&gt; ，模擬繞圈遍歷矩陣即可。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://jeno5980515.github.io/categories/Online-Judge/"/>
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/categories/Online-Judge/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/tags/LeetCode/"/>
    
      <category term="59" scheme="http://jeno5980515.github.io/tags/59/"/>
    
  </entry>
  
  <entry>
    <title>[Codewars] 4 kyu - Sum Strings as Numbers</title>
    <link href="http://jeno5980515.github.io/2017/08/31/Online%20Judge/Codewars/4%20kyu%20-%20Sum%20Strings%20as%20Numbers/"/>
    <id>http://jeno5980515.github.io/2017/08/31/Online Judge/Codewars/4 kyu - Sum Strings as Numbers/</id>
    <published>2017-08-31T04:00:03.000Z</published>
    <updated>2017-08-31T04:03:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h1><p>大數相加。</p>
<a id="more"></a>
<h1 id="程式"><a href="#程式" class="headerlink" title="程式"></a>程式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumStrings</span>(<span class="params">a,b</span>) </span>&#123; </div><div class="line">  <span class="keyword">if</span> ( b.length &gt; a.length )&#123;</div><div class="line">    <span class="keyword">var</span> temp = a ;</div><div class="line">    a = b ;</div><div class="line">    b = temp ;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">while</span> ( b.length &lt; a.length )&#123;</div><div class="line">    b = <span class="string">'0'</span> + b ;</div><div class="line">  &#125;</div><div class="line">  a = a.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</div><div class="line">  b = b.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</div><div class="line">  <span class="keyword">var</span> c = <span class="string">''</span> , i = <span class="number">0</span> ;</div><div class="line">  <span class="keyword">var</span> carry = <span class="number">0</span> ;</div><div class="line">  <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; a.length ; i ++ ) &#123;</div><div class="line">    <span class="keyword">var</span> result = <span class="built_in">parseInt</span>(a[i]) + <span class="built_in">parseInt</span>(b[i]) + carry ;</div><div class="line">    carry = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">if</span> ( result &gt;= <span class="number">10</span> )&#123;</div><div class="line">      result -= <span class="number">10</span> ;</div><div class="line">      carry ++ ;</div><div class="line">    &#125;</div><div class="line">    c = c + result;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> ( carry !== <span class="number">0</span> )&#123;</div><div class="line">    c = c + <span class="string">'1'</span> ;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">while</span> ( c[c.length<span class="number">-1</span>] === <span class="string">'0'</span> )&#123;</div><div class="line">    c = c.slice(<span class="number">0</span>,c.length<span class="number">-1</span>) ;</div><div class="line">  &#125;</div><div class="line">  c = c.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>) ;</div><div class="line">  <span class="keyword">return</span> c ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h1&gt;&lt;p&gt;大數相加。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://jeno5980515.github.io/categories/Online-Judge/"/>
    
      <category term="Codewars" scheme="http://jeno5980515.github.io/categories/Online-Judge/Codewars/"/>
    
    
      <category term="Codewars" scheme="http://jeno5980515.github.io/tags/Codewars/"/>
    
      <category term="4 kyu" scheme="http://jeno5980515.github.io/tags/4-kyu/"/>
    
  </entry>
  
  <entry>
    <title>[Codewars] 5 kyu - Maximum subarray sum</title>
    <link href="http://jeno5980515.github.io/2017/08/31/Online%20Judge/Codewars/5%20kyu%20-%20Maximum%20subarray%20sum/"/>
    <id>http://jeno5980515.github.io/2017/08/31/Online Judge/Codewars/5 kyu - Maximum subarray sum/</id>
    <published>2017-08-31T03:58:03.000Z</published>
    <updated>2017-08-31T04:04:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h1><p>求最大子序列。</p>
<a id="more"></a>
<h1 id="程式"><a href="#程式" class="headerlink" title="程式"></a>程式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> maxSequence = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> max = <span class="number">0</span> ;</div><div class="line">  <span class="keyword">var</span> sum = <span class="number">0</span> ;</div><div class="line">  <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; arr.length ; i ++ )&#123;</div><div class="line">    sum += arr[i] ;</div><div class="line">    <span class="keyword">if</span> ( sum &gt; max )&#123;</div><div class="line">      max = sum ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ( sum &lt; <span class="number">0</span> )&#123;</div><div class="line">      sum = <span class="number">0</span> ;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> max ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h1&gt;&lt;p&gt;求最大子序列。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://jeno5980515.github.io/categories/Online-Judge/"/>
    
      <category term="Codewars" scheme="http://jeno5980515.github.io/categories/Online-Judge/Codewars/"/>
    
    
      <category term="Codewars" scheme="http://jeno5980515.github.io/tags/Codewars/"/>
    
      <category term="5 kyu" scheme="http://jeno5980515.github.io/tags/5-kyu/"/>
    
  </entry>
  
  <entry>
    <title>[Codewars] 4 kyu - Human readable duration format</title>
    <link href="http://jeno5980515.github.io/2017/08/31/Online%20Judge/Codewars/4%20kyu%20-%20Human%20readable%20duration%20format/"/>
    <id>http://jeno5980515.github.io/2017/08/31/Online Judge/Codewars/4 kyu - Human readable duration format/</id>
    <published>2017-08-31T03:54:10.000Z</published>
    <updated>2017-08-31T04:03:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h1><p>將秒數轉換成可讀的字串。</p>
<a id="more"></a>
<h1 id="程式"><a href="#程式" class="headerlink" title="程式"></a>程式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatDuration</span> (<span class="params">seconds</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> ( seconds === <span class="number">0</span> ) <span class="keyword">return</span> <span class="string">'now'</span> ;</div><div class="line">  <span class="keyword">var</span> typeArr = [<span class="string">'year'</span>,<span class="string">'day'</span>,<span class="string">'hour'</span>,<span class="string">'minute'</span>,<span class="string">'second'</span>] ;</div><div class="line">  <span class="keyword">var</span> sec = <span class="number">0</span> ;</div><div class="line">  <span class="keyword">var</span> minute = <span class="number">0</span> ;</div><div class="line">  <span class="keyword">var</span> hour = <span class="number">0</span> ;</div><div class="line">  <span class="keyword">var</span> day = <span class="number">0</span> ;</div><div class="line">  <span class="keyword">var</span> year = <span class="number">0</span> ;</div><div class="line">  minute = <span class="built_in">Math</span>.floor(seconds / <span class="number">60</span>) ;</div><div class="line">  sec = seconds % <span class="number">60</span> ;</div><div class="line">  </div><div class="line">  hour = <span class="built_in">Math</span>.floor(minute / <span class="number">60</span>) ;</div><div class="line">  minute = minute % <span class="number">60</span> ;</div><div class="line">  </div><div class="line">  day = <span class="built_in">Math</span>.floor(hour / <span class="number">24</span>) ;</div><div class="line">  hour = hour % <span class="number">24</span> ;</div><div class="line">  </div><div class="line">  year = <span class="built_in">Math</span>.floor(day / <span class="number">365</span>) ;</div><div class="line">  day = day % <span class="number">365</span> ;</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> resultArr = [year,day,hour,minute,sec] ;</div><div class="line">  <span class="keyword">var</span> resultStrArr = [] ;</div><div class="line">  <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; resultArr.length ; i ++ )&#123;</div><div class="line">    <span class="keyword">if</span> ( resultArr[i] === <span class="number">1</span> )&#123;</div><div class="line">      resultStrArr.push(resultArr[i]+<span class="string">' '</span> + typeArr[i]) ;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( resultArr[i] &gt;= <span class="number">2</span> )&#123;</div><div class="line">      resultStrArr.push(resultArr[i]+<span class="string">' '</span> + typeArr[i]+<span class="string">'s'</span>) ;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> resultStr = <span class="string">''</span> ;</div><div class="line">  <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; resultStrArr.length ; i ++ )&#123;</div><div class="line">    <span class="keyword">if</span> ( i === resultStrArr.length - <span class="number">2</span> )&#123;</div><div class="line">      resultStr += resultStrArr[i] + <span class="string">' and '</span> + resultStrArr[i+<span class="number">1</span>] ;</div><div class="line">      <span class="keyword">break</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ( i !== resultStrArr.length <span class="number">-1</span> )&#123;</div><div class="line">      resultStr += resultStrArr[i] + <span class="string">', '</span> ;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      resultStr += resultStrArr[i];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> resultStr ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h1&gt;&lt;p&gt;將秒數轉換成可讀的字串。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://jeno5980515.github.io/categories/Online-Judge/"/>
    
      <category term="Codewars" scheme="http://jeno5980515.github.io/categories/Online-Judge/Codewars/"/>
    
    
      <category term="Codewars" scheme="http://jeno5980515.github.io/tags/Codewars/"/>
    
      <category term="4 kyu" scheme="http://jeno5980515.github.io/tags/4-kyu/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 54 - Spiral Matrix</title>
    <link href="http://jeno5980515.github.io/2017/08/31/Online%20Judge/LeetCode/54%20-%20Spiral%20Matrix/"/>
    <id>http://jeno5980515.github.io/2017/08/31/Online Judge/LeetCode/54 - Spiral Matrix/</id>
    <published>2017-08-31T03:33:23.000Z</published>
    <updated>2017-08-31T03:42:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h1><p>模擬繞圈遍歷矩陣。</p>
<a id="more"></a>
<h1 id="程式"><a href="#程式" class="headerlink" title="程式"></a>程式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;number[][]&#125; matrix</div><div class="line"> * @return &#123;number[]&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> spiralOrder = <span class="function"><span class="keyword">function</span>(<span class="params">matrix</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> ( matrix.length === <span class="number">0</span> ) <span class="keyword">return</span> [];</div><div class="line">  <span class="keyword">let</span> bool = matrix.slice().map(<span class="function"><span class="params">rows</span> =&gt;</span> rows.map(<span class="function"><span class="params">el</span> =&gt;</span> <span class="literal">false</span>));</div><div class="line">  <span class="keyword">let</span> result = [];</div><div class="line">  <span class="keyword">let</span> currentDir = <span class="string">'e'</span>;</div><div class="line">  <span class="keyword">const</span> dirs = [<span class="string">'e'</span>, <span class="string">'s'</span>, <span class="string">'w'</span>, <span class="string">'n'</span>, <span class="string">'e'</span>];</div><div class="line">  <span class="keyword">const</span> dxs = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>];</div><div class="line">  <span class="keyword">const</span> dys = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>];</div><div class="line">    </div><div class="line">  <span class="keyword">const</span> checkValid = <span class="function">(<span class="params">x, y, dir</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">switch</span>(dir)&#123;</div><div class="line">      <span class="keyword">case</span> <span class="string">'e'</span>: <span class="keyword">return</span> y &lt; bool[x].length - <span class="number">1</span> &amp;&amp; !bool[x][y+<span class="number">1</span>];</div><div class="line">      <span class="keyword">case</span> <span class="string">'s'</span>: <span class="keyword">return</span> x &lt; bool.length - <span class="number">1</span> &amp;&amp; !bool[x+<span class="number">1</span>][y];</div><div class="line">      <span class="keyword">case</span> <span class="string">'w'</span>: <span class="keyword">return</span> y &gt;= <span class="number">1</span> &amp;&amp; !bool[x][y<span class="number">-1</span>];</div><div class="line">      <span class="keyword">case</span> <span class="string">'n'</span>: <span class="keyword">return</span> x &gt;= <span class="number">1</span> &amp;&amp; !bool[x<span class="number">-1</span>][y];</div><div class="line">    &#125;</div><div class="line">  &#125;  </div><div class="line">    </div><div class="line">  <span class="keyword">const</span> loop = <span class="function">(<span class="params">x ,y, dir</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> ( bool[x][y] ) <span class="keyword">return</span> ;</div><div class="line">    </div><div class="line">    bool[x][y] = <span class="literal">true</span>;</div><div class="line">    result.push(matrix[x][y]);</div><div class="line"></div><div class="line">    <span class="keyword">let</span> dirIndex = dirs.indexOf(dir);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>( !checkValid(x, y, dir) )&#123;</div><div class="line">      dirIndex ++ ;</div><div class="line">      <span class="keyword">if</span> ( checkValid(x, y, dirs[dirIndex]) )&#123;</div><div class="line">        loop(x + dxs[dirIndex], y + dys[dirIndex], dirs[dirIndex]);</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      loop(x + dxs[dirIndex], y + dys[dirIndex], dir);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  loop(<span class="number">0</span>, <span class="number">0</span>, dirs[<span class="number">0</span>]);</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h1&gt;&lt;p&gt;模擬繞圈遍歷矩陣。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://jeno5980515.github.io/categories/Online-Judge/"/>
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/categories/Online-Judge/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/tags/LeetCode/"/>
    
      <category term="54" scheme="http://jeno5980515.github.io/tags/54/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 151 - Reverse Words in a String</title>
    <link href="http://jeno5980515.github.io/2017/08/31/Online%20Judge/LeetCode/151%20-%20Reverse%20Words%20in%20a%20String/"/>
    <id>http://jeno5980515.github.io/2017/08/31/Online Judge/LeetCode/151 - Reverse Words in a String/</id>
    <published>2017-08-31T02:59:00.000Z</published>
    <updated>2017-08-31T03:35:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h1><p>反轉句子，並去除多餘空白。</p>
<a id="more"></a>
<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p>利用內建函式可以快速反轉並組合，必須要用 <code>filter</code> 去除多餘的空白。</p>
<h1 id="程式"><a href="#程式" class="headerlink" title="程式"></a>程式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;string&#125; str</div><div class="line"> * @returns &#123;string&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> reverseWords = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> str.split(<span class="string">' '</span>).filter(<span class="function">(<span class="params">el</span>) =&gt;</span> el !== <span class="string">''</span> ).reverse().join(<span class="string">' '</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h1&gt;&lt;p&gt;反轉句子，並去除多餘空白。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://jeno5980515.github.io/categories/Online-Judge/"/>
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/categories/Online-Judge/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/tags/LeetCode/"/>
    
      <category term="151" scheme="http://jeno5980515.github.io/tags/151/"/>
    
  </entry>
  
  <entry>
    <title>[Pwnable.kr] fd</title>
    <link href="http://jeno5980515.github.io/2017/08/30/Online%20Judge/Pwnable.kr/fd/"/>
    <id>http://jeno5980515.github.io/2017/08/30/Online Judge/Pwnable.kr/fd/</id>
    <published>2017-08-30T00:48:07.000Z</published>
    <updated>2017-08-30T01:20:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Mommy! what is a file descriptor in Linux?</p>
<a id="more"></a>
<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p>首先利用 <code>SSH</code> 進入主機後，可以看到有三個檔案個別是 <code>fd</code> ， <code>fd.c</code> 及 <code>flag</code>。</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-r-sr-x--- <span class="number">1</span> fd_pwn fd   <span class="number">7322</span> Jun <span class="number">11</span>  <span class="number">2014</span> fd</div><div class="line">-rw-r--r-- <span class="number">1</span> root   root  <span class="number">418</span> Jun <span class="number">11</span>  <span class="number">2014</span> fd.c</div><div class="line">-r--r----- <span class="number">1</span> fd_pwn root   <span class="number">50</span> Jun <span class="number">11</span>  <span class="number">2014</span> flag</div></pre></td></tr></table></figure>
<p>我們需要 <code>flag</code> 的內容，但我們只是 <code>fd</code> 因此只能執行 fd 檔案。</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function">fd@ubuntu:~$ <span class="title">whoami</span></span></div><div class="line"><span class="title">fd</span></div></pre></td></tr></table></figure>
<p>題目將原始碼附上了，查看有沒有可以使用的地方。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="keyword">char</span> buf[<span class="number">32</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"pass argv[1] a number\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> fd = atoi( argv[<span class="number">1</span>] ) - <span class="number">0x1234</span>;</div><div class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">    len = read(fd, buf, <span class="number">32</span>);</div><div class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">"LETMEWIN\n"</span>, buf))&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"good job :)\n"</span>);</div><div class="line">        system(<span class="string">"/bin/cat flag"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"learn about Linux file IO\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先看到得到 flag 的地方，在這邊必須讓 <code>buf</code> 和 <code>LETMEWIN\n&quot;</code> 相等。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">"LETMEWIN\n"</span>, buf))&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"good job :)\n"</span>);</div><div class="line">    system(<span class="string">"/bin/cat flag"</span>);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>查看 <a href="https://linux.die.net/man/2/read" target="_blank" rel="external">read</a> 函式知道可以將<code>檔案</code>寫入 buf 中。</p>
<p>因此可以將 <a href="https://en.wikipedia.org/wiki/File_descriptor" target="_blank" rel="external">File descriptor</a> 設為 <code>0</code> ，則可以將使用者輸入寫入 buf。</p>
<p>接著看到 fd 的值相當於執行程式的參數減去 <code>0x1234 (4660)</code>。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> fd = atoi( argv[<span class="number">1</span>] ) - <span class="number">0x1234</span>;</div></pre></td></tr></table></figure></p>
<p>因此首先執行 fd 且帶入 4660 參數 。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./fd 4660</div></pre></td></tr></table></figure></p>
<p>此時會等待使用者輸入，這時輸入 <code>LETMEWIN</code> 即可得到 flag 。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">LETMEWIN</div><div class="line">good job :)</div><div class="line">mommy! I think I know what a file descriptor is!!</div></pre></td></tr></table></figure></p>
<p>flag 就是 <code>mommy! I think I know what a file descriptor is!!</code> </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Mommy! what is a file descriptor in Linux?&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://jeno5980515.github.io/categories/Online-Judge/"/>
    
      <category term="Pwnable.kr" scheme="http://jeno5980515.github.io/categories/Online-Judge/Pwnable-kr/"/>
    
    
      <category term="Pwnable.kr" scheme="http://jeno5980515.github.io/tags/Pwnable-kr/"/>
    
      <category term="fd" scheme="http://jeno5980515.github.io/tags/fd/"/>
    
  </entry>
  
  <entry>
    <title>[JavaScript] forEach, map, reduce 實作</title>
    <link href="http://jeno5980515.github.io/2017/08/28/Programming%20Language/JavaScript/forEach,%20map,%20reduce%20%E5%AF%A6%E4%BD%9C/"/>
    <id>http://jeno5980515.github.io/2017/08/28/Programming Language/JavaScript/forEach, map, reduce 實作/</id>
    <published>2017-08-28T03:25:28.000Z</published>
    <updated>2017-08-28T03:29:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>紀錄一下內建函式的實作。</p>
<a id="more"></a>
<h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.forEach = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">  <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i ++ )&#123;</div><div class="line">    fn(<span class="keyword">this</span>[i], i);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.map = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> newArray = [];</div><div class="line">  <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length ; i++ )&#123;</div><div class="line">    newArray.push(fn(<span class="keyword">this</span>[i], i));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> newArray;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.reduce = <span class="function"><span class="keyword">function</span>(<span class="params">fn, initValue</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> result = initValue || <span class="keyword">this</span>[<span class="number">0</span>] ;</div><div class="line">  <span class="keyword">var</span> initIndex = initValue ? <span class="number">0</span> : <span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span> ( <span class="keyword">var</span> i = initIndex; i &lt; <span class="keyword">this</span>.length; i ++ )&#123;</div><div class="line">    result = fn(result, <span class="keyword">this</span>[i], i);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;紀錄一下內建函式的實作。&lt;/p&gt;
    
    </summary>
    
      <category term="Programming Language" scheme="http://jeno5980515.github.io/categories/Programming-Language/"/>
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/categories/Programming-Language/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>[Phoenix] Socket Server</title>
    <link href="http://jeno5980515.github.io/2017/08/05/Web/Phoenix/Socket%20Server/"/>
    <id>http://jeno5980515.github.io/2017/08/05/Web/Phoenix/Socket Server/</id>
    <published>2017-08-05T02:57:07.000Z</published>
    <updated>2017-08-05T06:43:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在用 <code>Elixir</code> 重寫阿瓦隆的伺服器，簡單記錄利用使用 <code>Phoenix</code> 這個框架使用 <code>Socket</code> 的心得。</p>
<a id="more"></a>
<h2 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h2><p>安裝好 <code>Elixir</code> 和 <code>Phoenix</code> 後先新增一個專案，在這邊先不用到資料庫因此先不安裝 <code>Ecto</code> 。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mix phoenix.new avalon_backend --no-ecto</div></pre></td></tr></table></figure></p>
<h2 id="遊戲大廳及使用者"><a href="#遊戲大廳及使用者" class="headerlink" title="遊戲大廳及使用者"></a>遊戲大廳及使用者</h2><p>在 <code>avalon_backend.ex</code> 新增一個 <code>worker</code> 用來開啟 <code>GenServer</code>。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># lib/avalon_backend.ex</span></div><div class="line">children = [</div><div class="line">  supervisor(AvalonBackend.Endpoint, []),</div><div class="line">  worker(AvalonBackend.UserModel, [%&#123;&#125;])</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>讓伺服器監聽 <code>game:lobby</code> 這個 <code>channel</code> 且讓 socket 在連接的時候給予 <code>id</code> 以便於之後的使用。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># web/channels/user_socket.ex</span></div><div class="line">channel <span class="string">"game:lobby"</span>, AvalonBackend.LobbyChannel</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span></span>(_params, socket) <span class="keyword">do</span></div><div class="line">  id = Enum.random(<span class="number">0</span>..<span class="number">1000</span>)</div><div class="line">  user = %&#123; <span class="symbol">:id</span> =&gt; id &#125;</div><div class="line">  socket = assign(socket, <span class="symbol">:user</span>, user)</div><div class="line">  &#123;<span class="symbol">:ok</span>, socket&#125;</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>在 <code>lobby_channel.ex</code> 定義 channel 在特定事件中所會觸發的事件。</p>
<p>使用者加入會將使用者保存起來，若離開則會移除該使用者，並將當前在 <code>game:lobby</code> 頻道的使用者 <code>broadcast</code> 給該頻道的所有人。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># web/channels/lobby_channel.ex</span></div><div class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">AvalonBackend</span></span>.LobbyChannel <span class="keyword">do</span></div><div class="line">  <span class="keyword">use</span> AvalonBackend.Web, <span class="symbol">:channel</span></div><div class="line">  <span class="keyword">alias</span> AvalonBackend.UserModel</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">join</span></span>(<span class="string">"game:lobby"</span>, _payload, socket) <span class="keyword">do</span></div><div class="line">    user = socket.assigns.user</div><div class="line">    users = UserModel.user_joined(<span class="string">"game:lobby"</span>, user)[<span class="string">"game:lobby"</span>]</div><div class="line">    send <span class="keyword">self</span>(), &#123;<span class="symbol">:after_join</span>, users&#125;</div><div class="line">    &#123;<span class="symbol">:ok</span>, socket&#125;</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">terminate</span></span>(_reason, socket) <span class="keyword">do</span></div><div class="line">    user_id = socket.assigns.user.id</div><div class="line">    users = UserModel.user_left(<span class="string">"game:lobby"</span>, user_id)[<span class="string">"game:lobby"</span>]</div><div class="line">    lobby_update(socket, users)</div><div class="line">    <span class="symbol">:ok</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">handle_info</span></span>(&#123;<span class="symbol">:after_join</span>, users&#125;, socket) <span class="keyword">do</span></div><div class="line">    lobby_update(socket, users)</div><div class="line">    &#123;<span class="symbol">:noreply</span>, socket&#125;</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">lobby_update</span></span>(socket, users) <span class="keyword">do</span></div><div class="line">    broadcast! socket, <span class="string">"lobby_update"</span>, %&#123; <span class="symbol">users:</span> get_users_id(users) &#125;</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">get_users_id</span></span>(<span class="keyword">nil</span>), <span class="symbol">do:</span> []</div><div class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">get_users_id</span></span>(users) <span class="keyword">do</span></div><div class="line">    Enum.map users, &amp;(&amp;<span class="number">1</span>.id)</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>由於 Elixir 沒有全域變數，在儲存變數的需求下我們必須透過 <code>GenServer</code> ， 在這邊利用 <code>Map</code> 型態來保存所有使用者。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># web/models/user_model.ex</span></div><div class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">AvalonBackend</span></span>.UserModel <span class="keyword">do</span></div><div class="line">  <span class="keyword">use</span> GenServer</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">start_link</span></span>(initial_state) <span class="keyword">do</span></div><div class="line">   GenServer.start_link(__MODULE_<span class="number">_</span>, initial_state, <span class="symbol">name:</span> __MODULE_<span class="number">_</span>)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">user_joined</span></span>(channel, user) <span class="keyword">do</span></div><div class="line">   GenServer.call(__MODULE_<span class="number">_</span>, &#123;<span class="symbol">:user_joined</span>, channel, user&#125;)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">user_left</span></span>(channel, user_id) <span class="keyword">do</span></div><div class="line">    GenServer.call(__MODULE_<span class="number">_</span>, &#123;<span class="symbol">:user_left</span>, channel, user_id&#125;)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="comment"># GenServer implementation</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">handle_call</span></span>(&#123;<span class="symbol">:user_joined</span>, channel, user&#125;, _from, state) <span class="keyword">do</span></div><div class="line">    new_state = <span class="keyword">case</span> Map.get(state, channel) <span class="keyword">do</span></div><div class="line">      <span class="keyword">nil</span> -&gt;</div><div class="line">        Map.put(state, channel, [user])</div><div class="line">      users -&gt;</div><div class="line">        Map.put(state, channel, Enum.uniq([user | users]))</div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    &#123;<span class="symbol">:reply</span>, new_state, new_state&#125;</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">handle_call</span></span>(&#123;<span class="symbol">:user_left</span>, channel, user_id&#125;, _from, state) <span class="keyword">do</span></div><div class="line">    new_users = state</div><div class="line">      |&gt; Map.get(channel)</div><div class="line">      |&gt; Enum.reject(&amp;(&amp;<span class="number">1</span>.id == user_id))</div><div class="line"></div><div class="line">    new_state = Map.update!(state, channel, <span class="keyword">fn</span>(<span class="number">_</span>) -&gt; new_users <span class="keyword">end</span>)</div><div class="line"></div><div class="line">    &#123;<span class="symbol">:reply</span>, new_state, new_state&#125;</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>在 client 端引入自己攥寫的 <code>socket.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// web/static/js/app.js</span></div><div class="line"><span class="keyword">import</span> socket <span class="keyword">from</span> <span class="string">"./socket"</span></div></pre></td></tr></table></figure></p>
<p>首先引入來自 <code>Phoenix</code> 的 <code>Socket</code> ，讓該 socket 連接 <code>game:lobby</code> ，並監聽 <code>lobby_update</code> 事件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// web/static/js/socket.js</span></div><div class="line"><span class="keyword">import</span> &#123;Socket&#125; <span class="keyword">from</span> <span class="string">"phoenix"</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> socket = <span class="keyword">new</span> Socket(<span class="string">"/socket"</span>)</div><div class="line">socket.connect()</div><div class="line"></div><div class="line"><span class="comment">// Now that you are connected, you can join channels with a topic:</span></div><div class="line"><span class="keyword">let</span> channel = socket.channel(<span class="string">"game:lobby"</span>, &#123;&#125;)</div><div class="line">channel.on(<span class="string">'lobby_update'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">resp</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(resp);</div><div class="line">&#125;);</div><div class="line">channel.join()</div><div class="line">  .receive(<span class="string">"ok"</span>, resp =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">"Joined successfully"</span>, resp) &#125;)</div><div class="line">  .receive(<span class="string">"error"</span>, resp =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">"Unable to join"</span>, resp) &#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> socket</div></pre></td></tr></table></figure></p>
<h2 id="傳送訊息給特定使用者"><a href="#傳送訊息給特定使用者" class="headerlink" title="傳送訊息給特定使用者"></a>傳送訊息給特定使用者</h2><p>透過將不同使用者加入到自己獨立的 <code>channel</code> ，透過 <code>broadcast</code> 該頻道的方式來對該使用者發出事件。</p>
<p>在 Server 端產生完 id 後，回傳 id 給 client 端。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># web/channel/lobby_channel.ex</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">join</span></span>(<span class="string">"game:lobby"</span>, _payload, socket) <span class="keyword">do</span></div><div class="line">  user = socket.assigns.user</div><div class="line">  users = UserModel.user_joined(<span class="string">"game:lobby"</span>, user)[<span class="string">"game:lobby"</span>]</div><div class="line">  send <span class="keyword">self</span>(), &#123;<span class="symbol">:after_join</span>, users&#125;</div><div class="line">  &#123;<span class="symbol">:ok</span>, %&#123; <span class="symbol">id:</span> user.id &#125;, socket&#125;</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>當 client 端接受 id 後則連接該 id 的頻道 。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// web/static/js/socket.js</span></div><div class="line"><span class="keyword">import</span> &#123;Socket&#125; <span class="keyword">from</span> <span class="string">"phoenix"</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> socket = <span class="keyword">new</span> Socket(<span class="string">"/socket"</span>)</div><div class="line">socket.connect()</div><div class="line"></div><div class="line"><span class="keyword">let</span> channel = socket.channel(<span class="string">"game:lobby"</span>, &#123;&#125;)</div><div class="line"><span class="keyword">let</span> userChannel;</div><div class="line">channel.on(<span class="string">'lobby_update'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(response);</div><div class="line">&#125;);</div><div class="line">channel.join()</div><div class="line">  .receive(<span class="string">"ok"</span>, resp =&gt; &#123; </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Joined successfully"</span>, resp) </div><div class="line">    userChannel = socket.channel(<span class="string">"user:"</span> + resp.id);</div><div class="line">    userChannel.on(<span class="string">"message"</span>, msg =&gt; <span class="built_in">console</span>.log(msg) )</div><div class="line">    userChannel.join()</div><div class="line">      .receive(<span class="string">"ok"</span>, resp =&gt; <span class="built_in">console</span>.log(<span class="string">"joined private user channel"</span>) )</div><div class="line">      .receive(<span class="string">"error"</span>, err =&gt; <span class="built_in">console</span>.log(err));</div><div class="line">  &#125;)</div><div class="line">  .receive(<span class="string">"error"</span>, resp =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">"Unable to join"</span>, resp) &#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> socket</div></pre></td></tr></table></figure></p>
<p>新增使用者專屬的 channel ，並當接受 message 事件時，發送訊息到該指定 user 。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># web/channels/user_socket.ex</span></div><div class="line">channel <span class="string">"user:*"</span>, AvalonBackend.UserChannel</div><div class="line"></div><div class="line"><span class="comment"># web/channels/user_channel.ex</span></div><div class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">AvalonBackend</span></span>.UserChannel <span class="keyword">do</span></div><div class="line">  <span class="keyword">use</span> AvalonBackend.Web, <span class="symbol">:channel</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">join</span></span>(<span class="string">"user:"</span> &lt;&gt; _id, _payload, socket) <span class="keyword">do</span></div><div class="line">    &#123;<span class="symbol">:ok</span>, socket&#125;</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">handle_in</span></span>(<span class="string">"message"</span>, %&#123;<span class="string">"id"</span> =&gt; id, <span class="string">"message"</span> =&gt; message &#125;, socket) <span class="keyword">do</span></div><div class="line">    AvalonBackend.Endpoint.broadcast <span class="string">"user:"</span> &lt;&gt; id, <span class="string">"message"</span>, %&#123; <span class="symbol">message:</span> message &#125;</div><div class="line">    &#123;<span class="symbol">:noreply</span>, socket&#125;</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>在 client 新增輸入欄讓使用者可以輸入 id 及 message 來發送。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- web/templates/layout/app.html.eex --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"idInput"</span> <span class="attr">placeholder</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"messageInput"</span> <span class="attr">placeholder</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"submitButton"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// web/static/js/socket.js</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'submitButton'</span>).addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</div><div class="line">  <span class="keyword">let</span> args = &#123;</div><div class="line">    <span class="attr">id</span> : <span class="built_in">document</span>.getElementById(<span class="string">'idInput'</span>).value,</div><div class="line">    <span class="attr">message</span> : <span class="built_in">document</span>.getElementById(<span class="string">'messageInput'</span>).value</div><div class="line">  &#125;</div><div class="line">  userChannel.push(<span class="string">'message'</span>, args)</div><div class="line">    .receive(<span class="string">'ok'</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'success'</span>))</div><div class="line">    .receive(<span class="string">'error'</span>, (e) =&gt; <span class="built_in">console</span>.log(e));</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>如此一來基本的 Server 功能就完成了。</p>
<h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p><a href="https://github.com/avalon-ng/avalon_backend" target="_blank" rel="external">avalon-ng/avalon_backend</a></p>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p><a href="https://quickleft.com/blog/creating-game-lobby-system-phoenix-websockets/" target="_blank" rel="external">Creating a Game Lobby System in Phoenix with Websockets</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在用 &lt;code&gt;Elixir&lt;/code&gt; 重寫阿瓦隆的伺服器，簡單記錄利用使用 &lt;code&gt;Phoenix&lt;/code&gt; 這個框架使用 &lt;code&gt;Socket&lt;/code&gt; 的心得。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://jeno5980515.github.io/categories/Web/"/>
    
      <category term="Phoenix" scheme="http://jeno5980515.github.io/categories/Web/Phoenix/"/>
    
    
      <category term="Socket" scheme="http://jeno5980515.github.io/tags/Socket/"/>
    
      <category term="Phoenix" scheme="http://jeno5980515.github.io/tags/Phoenix/"/>
    
      <category term="Elixir" scheme="http://jeno5980515.github.io/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>[JavaScript] Symbol</title>
    <link href="http://jeno5980515.github.io/2017/07/26/Programming%20Language/JavaScript/Symbol/"/>
    <id>http://jeno5980515.github.io/2017/07/26/Programming Language/JavaScript/Symbol/</id>
    <published>2017-07-26T06:13:24.000Z</published>
    <updated>2017-07-26T06:45:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>研究了下 <code>Symbol</code> 的實際用處，在此紀錄一下。</p>
<a id="more"></a>
<h2 id="Private"><a href="#Private" class="headerlink" title="Private"></a>Private</h2><p>Symbol 可讓物件有 <code>Private</code> 屬性，讓 Symbol 在遍歷的情況下不出現。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>();</div><div class="line"><span class="keyword">let</span> o = &#123;&#125;;</div><div class="line">o[sym] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> o )&#123;</div><div class="line">  <span class="built_in">console</span>.log(key);   <span class="comment">// nothing</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(o).length); <span class="comment">// 0</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(o)); <span class="comment">// &#123;&#125; </span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(o)); <span class="comment">// []</span></div></pre></td></tr></table></figure></p>
<p>若需要取得 Symbol 可以透過 <code>getOwnPropertySymbols</code> 。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(o)); <span class="comment">// [ Symbol() ]</span></div></pre></td></tr></table></figure></p>
<h2 id="Unique"><a href="#Unique" class="headerlink" title="Unique"></a>Unique</h2><p>每一個 Symbol 都是獨立的。</p>
<p>像 <code>Object</code> 一樣，即使兩個完全相同的 Object 但由於 <code>reference</code> 的不同而不同，因此可以藉由此特性來避免屬性衝突的問題。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Symbol</span>(<span class="string">'1'</span>) === <span class="built_in">Symbol</span>(<span class="string">'1'</span>) <span class="comment">// false</span></div></pre></td></tr></table></figure></p>
<h2 id="Global"><a href="#Global" class="headerlink" title="Global"></a>Global</h2><p>可以註冊 Symbol 在整個環境裡，如此一來同一個屬性的 Symbol 只會有同一個。</p>
<p><code>Symbol.for()</code> 會查看有沒有該屬性的 Symbol 存在，有就返回該 Symbol ， 無則註冊一個。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>.for(<span class="string">'123'</span>);</div><div class="line"><span class="keyword">let</span> sym2 = <span class="built_in">Symbol</span>.for(<span class="string">'123'</span>);</div><div class="line"><span class="built_in">console</span>.log(sym === sym2); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(sym)); <span class="comment">// 123</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;研究了下 &lt;code&gt;Symbol&lt;/code&gt; 的實際用處，在此紀錄一下。&lt;/p&gt;
    
    </summary>
    
      <category term="Programming Language" scheme="http://jeno5980515.github.io/categories/Programming-Language/"/>
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/categories/Programming-Language/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/tags/JavaScript/"/>
    
      <category term="Symbol" scheme="http://jeno5980515.github.io/tags/Symbol/"/>
    
  </entry>
  
  <entry>
    <title>[JavaScript] Method Chaining</title>
    <link href="http://jeno5980515.github.io/2017/07/23/Programming%20Language/JavaScript/Method%20Chaining/"/>
    <id>http://jeno5980515.github.io/2017/07/23/Programming Language/JavaScript/Method Chaining/</id>
    <published>2017-07-23T11:24:20.000Z</published>
    <updated>2017-07-23T11:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在寫 <a href="https://www.npmjs.com/package/canvas-factory" target="_blank" rel="external">canvas-factory</a> ，主要是一個把其他函式庫的功能整合到 <code>Canvas</code> 上的一個套件，像是製作 <code>GIF</code> 、 <code>MP4</code> 等等。其中想要把 API 寫成 <code>Chaining</code> 的形式，但其中又有許多非同步的操作，在此紀錄一下實現結果。</p>
<a id="more"></a>
<h2 id="Method-Chaining"><a href="#Method-Chaining" class="headerlink" title="Method Chaining"></a>Method Chaining</h2><p>若想要達到 <code>Method Chaining</code> 的效果，只要在函式中回傳自己即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> number = n;</div><div class="line">  <span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    number += n;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.sub = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    number -= n;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.toValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> number;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(foo(<span class="number">1</span>).add(<span class="number">1</span>).add(<span class="number">1</span>).sub(<span class="number">1</span>).add(<span class="number">1</span>).toValue());</div></pre></td></tr></table></figure></p>
<h2 id="Async-Method-Chaining"><a href="#Async-Method-Chaining" class="headerlink" title="Async Method Chaining"></a>Async Method Chaining</h2><p>若想要把非同步的事件也串起來，我們可以使用 <code>Promise</code> 的概念，把函式存起來且記錄狀態。</p>
<p>使用 <code>handle</code> 、 <code>fulfill</code> 和 <code>resolve</code> 分別來處理欲執行的函式。</p>
<p>首先將所有 <code>public method</code> 都利用 <code>handle</code> 包一層，執行完該程式則呼叫 <code>fulfill</code> 。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.addAsync = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> handle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      number += n;</div><div class="line">      fulfill();</div><div class="line">    &#125;,<span class="number">500</span>);</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>handle</code> 中只把該函式存起來而不執行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">  queue.push(fn);</div><div class="line">  <span class="keyword">return</span> resolve();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>resolve</code> 中判斷當前狀態去執行函式，一樣回傳自己來繼續串下去。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> resolve = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span> ( queue.length !== <span class="number">0</span> &amp;&amp; !isPending )&#123;</div><div class="line">    isPending = <span class="literal">true</span>;</div><div class="line">    queue[<span class="number">0</span>]();</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;.bind(<span class="keyword">this</span>);</div></pre></td></tr></table></figure></p>
<p><code>fulfill</code> 中代表當前執行的函式執行完畢，呼叫 <code>resolve</code> 繼續執行下一個。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fulfill</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  isPending = <span class="literal">false</span>;</div><div class="line">  queue.shift();</div><div class="line">  resolve();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Foo = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> isPending = <span class="literal">false</span>;</div><div class="line">  <span class="keyword">var</span> queue = [];</div><div class="line">  <span class="keyword">var</span> number = n;</div><div class="line">  <span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> handle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      number += n;</div><div class="line">      fulfill();</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.sub = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;    </div><div class="line">    <span class="keyword">return</span> handle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      number -= n;</div><div class="line">      fulfill();</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.addAsync = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> handle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        number += n;</div><div class="line">        fulfill();</div><div class="line">      &#125;,<span class="number">500</span>);</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.getValue = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> handle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      fn(number);</div><div class="line">      fulfill();</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">    queue.push(fn);</div><div class="line">    <span class="keyword">return</span> resolve();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fulfill</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    isPending = <span class="literal">false</span>;</div><div class="line">    queue.shift();</div><div class="line">    resolve();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> resolve = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> ( queue.length !== <span class="number">0</span> &amp;&amp; !isPending )&#123;</div><div class="line">      isPending = <span class="literal">true</span>;</div><div class="line">      queue[<span class="number">0</span>]();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;.bind(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> Foo(<span class="number">1</span>);</div><div class="line"></div><div class="line">foo</div><div class="line">  .add(<span class="number">1</span>)</div><div class="line">  .addAsync(<span class="number">1</span>)</div><div class="line">  .sub(<span class="number">1</span>)</div><div class="line">  .addAsync(<span class="number">1</span>)</div><div class="line">  .getValue(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(value);</div><div class="line">  &#125;)</div><div class="line">  .add(<span class="number">1</span>)</div><div class="line">  .addAsync(<span class="number">1</span>)  </div><div class="line">  .getValue(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(value);</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">foo</div><div class="line">  .add(<span class="number">1</span>)</div><div class="line">  .addAsync(<span class="number">1</span>)</div><div class="line">  .getValue(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(value);</div><div class="line">  &#125;)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在寫 &lt;a href=&quot;https://www.npmjs.com/package/canvas-factory&quot;&gt;canvas-factory&lt;/a&gt; ，主要是一個把其他函式庫的功能整合到 &lt;code&gt;Canvas&lt;/code&gt; 上的一個套件，像是製作 &lt;code&gt;GIF&lt;/code&gt; 、 &lt;code&gt;MP4&lt;/code&gt; 等等。其中想要把 API 寫成 &lt;code&gt;Chaining&lt;/code&gt; 的形式，但其中又有許多非同步的操作，在此紀錄一下實現結果。&lt;/p&gt;
    
    </summary>
    
      <category term="Programming Language" scheme="http://jeno5980515.github.io/categories/Programming-Language/"/>
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/categories/Programming-Language/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/tags/JavaScript/"/>
    
      <category term="Method Chaining" scheme="http://jeno5980515.github.io/tags/Method-Chaining/"/>
    
  </entry>
  
  <entry>
    <title>[Redux] Redux 實作</title>
    <link href="http://jeno5980515.github.io/2017/05/22/Web/Redux/Redux%20%E5%AF%A6%E4%BD%9C/"/>
    <id>http://jeno5980515.github.io/2017/05/22/Web/Redux/Redux 實作/</id>
    <published>2017-05-22T08:24:47.000Z</published>
    <updated>2017-05-23T07:24:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前陣子寫的<code>Redux</code>解析感覺寫不清楚，因此重寫一篇如何實作<code>Redux</code>。</p>
<p>這邊必須對<code>Redux</code>有些基本認識，而實作的部分都先不做錯誤處理。</p>
<a id="more"></a>
<hr>
<h2 id="createStore"><a href="#createStore" class="headerlink" title="createStore"></a>createStore</h2><p>首先從<code>createStore</code>的部分開始，在實做<code>createStore</code>前先如同往常寫好一個<code>reducer</code>並把他傳入<code>createStore</code>中，並對他發出一個有效的<code>action</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params"> state = <span class="number">0</span> , action </span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">switch</span> ( action.type )&#123;</div><div class="line">		<span class="keyword">case</span> <span class="string">'ADD'</span>:</div><div class="line">			<span class="keyword">return</span> state + action.payload ;</div><div class="line">		<span class="keyword">default</span> :</div><div class="line">			<span class="keyword">return</span> state ;</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> store = createStore(reducer) ;</div><div class="line"><span class="built_in">console</span>.log(store.getState()); <span class="comment">// 0</span></div><div class="line">store.dispatch(&#123;</div><div class="line">	<span class="attr">type</span> : <span class="string">'ADD'</span>,</div><div class="line">	<span class="attr">payload</span> : <span class="number">1</span> </div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(store.getState()); <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<p>接下來開始實做<code>createStore</code>，首先先建立<code>getState</code>和<code>dispatch</code>函式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStore = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">	<span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">const</span> dispatch = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		getState ,</div><div class="line">		dispatch </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下來紀錄傳進來的<code>reducer</code>和<code>state</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer,state</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> nowReducer = reducer ;</div><div class="line">	<span class="keyword">let</span> nowState = state ;</div><div class="line">	<span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">const</span> dispatch = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">	&#125;	</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		getState ,</div><div class="line">		dispatch </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="getState"><a href="#getState" class="headerlink" title="getState"></a>getState</h3><p><code>getState</code>只要簡單回傳<code>nowState</code>即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer,state</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> nowReducer = reducer ;</div><div class="line">	<span class="keyword">let</span> nowState = state ;</div><div class="line">	<span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">		<span class="keyword">return</span> nowState ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">const</span> dispatch = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">	&#125;	</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		getState ,</div><div class="line">		dispatch </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="dispatch"><a href="#dispatch" class="headerlink" title="dispatch"></a>dispatch</h3><p><code>dispatch</code>接受<code>action</code>把它丟給<code>reducer</code>處理，並將<code>nowState</code>替換成運算後的<code>state</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer,state</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> nowReducer = reducer ;</div><div class="line">	<span class="keyword">let</span> nowState = state ;</div><div class="line">	<span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">		<span class="keyword">return</span> nowState ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">		nowState = nowReducer(nowState,action) ;</div><div class="line">	&#125;	</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		getState ,</div><div class="line">		dispatch </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>為了有初始狀態，先發送一個不會被處理的<code>action</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer,state</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> nowReducer = reducer ;</div><div class="line">	<span class="keyword">let</span> nowState = state ;</div><div class="line">	<span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">		<span class="keyword">return</span> nowState ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">		nowState = nowReducer(nowState,action) ;</div><div class="line">	&#125;	</div><div class="line">	dispatch(&#123; <span class="attr">type</span> : <span class="string">'INIT'</span> &#125;) ;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		getState ,</div><div class="line">		dispatch </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如此一來簡單的<code>createStore</code>就可以運行了。</p>
<h3 id="subscribe"><a href="#subscribe" class="headerlink" title="subscribe"></a>subscribe</h3><p><code>subscribe</code>讓你可以讓你綁定函式在<code>dispatch</code>後執行，同時回傳一個<code>unsubscribe</code>函式讓你可以取消綁定。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> listener = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'Now state: '</span>,store.getState()) ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> store = createStore(reducer) ;</div><div class="line"><span class="keyword">let</span> unsubscribe = store.subscribe(listener) ;</div><div class="line">store.dispatch(&#123; <span class="attr">type</span> : <span class="string">'ADD'</span> , <span class="attr">payload</span> : <span class="number">1</span> &#125;);</div><div class="line">unsubscribe();</div><div class="line">store.dispatch(&#123; <span class="attr">type</span> : <span class="string">'ADD'</span> , <span class="attr">payload</span> : <span class="number">1</span> &#125;);</div><div class="line"><span class="built_in">console</span>.log(store.getState());</div></pre></td></tr></table></figure></p>
<p>首先額外建立一個陣列來保存<code>subscribe</code>的所有函式，並建立<code>subscribe</code>函式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer,state</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> nowReducer = reducer ;</div><div class="line">	<span class="keyword">let</span> nowState = state ;</div><div class="line">	<span class="keyword">let</span> nowListener = [] ;</div><div class="line">	<span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">		<span class="keyword">return</span> nowState ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">		nowState = nowReducer(nowState,action) ;</div><div class="line">	&#125;	</div><div class="line">	<span class="keyword">const</span> subscribe = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	dispatch(&#123; <span class="attr">type</span> : <span class="string">'INIT'</span> &#125;) ;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		getState ,</div><div class="line">		dispatch ,</div><div class="line">		subscribe </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下來在只要註冊事件就把該函式放入<code>nowListener</code>並回傳一個函式用來註銷。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer,state</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> nowReducer = reducer ;</div><div class="line">	<span class="keyword">let</span> nowState = state ;</div><div class="line">	<span class="keyword">let</span> nowListeners = [] ;</div><div class="line">	<span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">		<span class="keyword">return</span> nowState ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">		nowState = nowReducer(nowState,action) ;</div><div class="line">		nowListeners.forEach(<span class="function">(<span class="params">listener</span>) =&gt;</span> listener());</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">const</span> subscribe = <span class="function">(<span class="params">listener</span>) =&gt;</span> &#123;</div><div class="line">		nowListeners.push(listener) ;</div><div class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			nowListeners.splice(nowListeners.indexOf(listener),<span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	dispatch(&#123; <span class="attr">type</span> : <span class="string">'INIT'</span> &#125;) ;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		getState ,</div><div class="line">		dispatch ,</div><div class="line">		subscribe </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>Redux</code>在<code>subscribe</code>部分會維持兩個陣列，一個是上次<code>dispatch</code>後的註冊事件，另一個則是在下次<code>dispatch</code>前新註冊的所有事件，這兩個事件陣列會在<code>dispatch</code>後同步，在這邊不實作這部分。</p>
<h3 id="replaceReducer"><a href="#replaceReducer" class="headerlink" title="replaceReducer"></a>replaceReducer</h3><p>將傳進來的<code>reducer</code>和目前的<code>reducer</code>替換<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params"> state = <span class="number">0</span> , action </span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">switch</span> ( action.type )&#123;</div><div class="line">		<span class="keyword">case</span> <span class="string">'ADD'</span>:</div><div class="line">			<span class="keyword">return</span> state + action.payload ;</div><div class="line">		<span class="keyword">default</span> :</div><div class="line">			<span class="keyword">return</span> state ;</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> newReducer = <span class="function">(<span class="params"> state = <span class="number">0</span> , action </span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">switch</span> ( action.type )&#123;</div><div class="line">		<span class="keyword">case</span> <span class="string">'ADD'</span>:</div><div class="line">			<span class="keyword">return</span> state + action.payload * <span class="number">2</span> ;</div><div class="line">		<span class="keyword">default</span> :</div><div class="line">			<span class="keyword">return</span> state ;</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> store = createStore(reducer) ;</div><div class="line">store.dispatch(&#123; <span class="attr">type</span> : <span class="string">'ADD'</span> , <span class="attr">payload</span> : <span class="number">1</span> &#125;);</div><div class="line">store.replaceReducer(newReducer);</div><div class="line">store.dispatch(&#123; <span class="attr">type</span> : <span class="string">'ADD'</span> , <span class="attr">payload</span> : <span class="number">1</span> &#125;);</div><div class="line"><span class="built_in">console</span>.log(store.getState()); <span class="comment">// 3</span></div></pre></td></tr></table></figure></p>
<p>只要把<code>nowReducer</code>替換成傳進來的<code>reducer</code>即可，替換後要發出初始<code>action</code>來獲得初始狀態。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer,state</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> nowReducer = reducer ;</div><div class="line">	<span class="keyword">let</span> nowState = state ;</div><div class="line">	<span class="keyword">let</span> nowListeners = [] ;</div><div class="line">	<span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">		<span class="keyword">return</span> nowState ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">		nowState = nowReducer(nowState,action) ;</div><div class="line">		nowListeners.forEach(<span class="function">(<span class="params">listener</span>) =&gt;</span> listener());</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">const</span> subscribe = <span class="function">(<span class="params">listener</span>) =&gt;</span> &#123;</div><div class="line">		nowListeners.push(listener) ;</div><div class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			nowListeners.splice(nowListeners.indexOf(listener),<span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">const</span> replaceReducer = <span class="function">(<span class="params">reducer</span>) =&gt;</span> &#123;</div><div class="line">		nowReducer = reducer ;</div><div class="line">		dispatch(&#123; <span class="attr">type</span> : <span class="string">'INIT'</span> &#125;) ;</div><div class="line">	&#125;</div><div class="line">	dispatch(&#123; <span class="attr">type</span> : <span class="string">'INIT'</span> &#125;) ;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		getState ,</div><div class="line">		dispatch ,</div><div class="line">		subscribe ,</div><div class="line">		replaceReducer</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如此一來基本的<code>createStore</code>就實作完成了，接下來實作<code>combineReducer</code>的部分。</p>
<hr>
<h2 id="combineReducer"><a href="#combineReducer" class="headerlink" title="combineReducer"></a>combineReducer</h2><p>由於<code>reducer</code>可能不只一個，因此必須將<code>reducers</code>合併為一個。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">const</span> personReducer = <span class="function">(<span class="params"> state = &#123;&#125; , action </span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">switch</span> ( action.type )&#123;</div><div class="line">		<span class="keyword">case</span> <span class="string">'NAME'</span>:</div><div class="line">			<span class="keyword">return</span> &#123;...state, <span class="attr">name</span> : action.payload &#125;;</div><div class="line">		<span class="keyword">case</span> <span class="string">'AGE'</span>:</div><div class="line">			<span class="keyword">return</span> &#123;...state, <span class="attr">age</span> : action.payload &#125; ;</div><div class="line">		<span class="keyword">default</span> :</div><div class="line">			<span class="keyword">return</span> state ;</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> todoReducer = <span class="function">(<span class="params"> state = [] , action </span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">switch</span> ( action.type )&#123;</div><div class="line">		<span class="keyword">case</span> <span class="string">'ADD'</span>:</div><div class="line">			<span class="keyword">return</span> [...state,action.payload] ;</div><div class="line">		<span class="keyword">default</span> :</div><div class="line">			<span class="keyword">return</span> state ;</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> reducer = combineReducer(&#123;</div><div class="line">	personReducer ,</div><div class="line">	todoReducer</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">let</span> store = createStore(reducer) ;</div><div class="line">store.dispatch(&#123; <span class="attr">type</span> : <span class="string">'NAME'</span> , <span class="attr">payload</span> : <span class="string">'Jeno'</span> &#125;);</div><div class="line">store.dispatch(&#123; <span class="attr">type</span> : <span class="string">'AGE'</span> , <span class="attr">payload</span> : <span class="number">22</span> &#125;);</div><div class="line">store.dispatch(&#123; <span class="attr">type</span> : <span class="string">'ADD'</span> , <span class="attr">payload</span> : <span class="string">'Coding'</span> &#125;);</div><div class="line"><span class="built_in">console</span>.log(store.getState());</div></pre></td></tr></table></figure>
<p>接下來實作<code>combineReducer</code>的部分，首先我們先回傳一個函式來代表合併的<code>reducer</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> combineReducer = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下來一樣如同一般的<code>reducer</code>一樣接受<code>state</code>及<code>action</code>，在這邊創建一個新的<code>newState</code>回傳。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> combineReducer = <span class="function">(<span class="params">reducers</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">state = &#123;&#125; , action</span>)</span>&#123;</div><div class="line">		<span class="keyword">let</span> newState = &#123;&#125;;</div><div class="line">		<span class="keyword">return</span> newState ;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下來就是遍歷整個<code>reducers</code>，並將傳入中<code>action</code>和相對應的<code>state</code>傳入該<code>reducer</code>得到的狀態放在<code>newState</code>並回傳<code>newState</code>即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 這時候 reducers 物件的內容</span></div><div class="line">reducers = &#123;</div><div class="line">	personReducer : function( state = &#123;&#125; , action )&#123;</div><div class="line">		switch ( action.type )&#123;</div><div class="line">			case 'NAME':</div><div class="line">				return &#123;...state, name : action.payload &#125;;</div><div class="line">			case 'AGE':</div><div class="line">				return &#123;...state, age : action.payload &#125; ;</div><div class="line">			default :</div><div class="line">				return state ;</div><div class="line">		&#125;	</div><div class="line">	&#125;,</div><div class="line">	todoReducer : function( state = [] , action )&#123;</div><div class="line">		switch ( action.type )&#123;</div><div class="line">			case 'ADD':</div><div class="line">				return [...state,action.payload] ;</div><div class="line">			default :</div><div class="line">				return state ;</div><div class="line">		&#125;	</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"><span class="keyword">const</span> combineReducer = <span class="function">(<span class="params">reducers</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">state = &#123;&#125; , action</span>)</span>&#123;</div><div class="line">		<span class="keyword">let</span> newState = &#123;&#125;;</div><div class="line">		<span class="keyword">for</span> ( <span class="keyword">let</span> key <span class="keyword">in</span> reducers ) &#123;</div><div class="line">			newState[key] = reducers[key](state[key],action) ;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> newState ;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="bindActionCreators"><a href="#bindActionCreators" class="headerlink" title="bindActionCreators"></a>bindActionCreators</h2><p><code>bindActionCreators</code>可以直接把創造<code>action</code>的函式直接和<code>dispatch</code>綁在一起。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> setPersonName = <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">type</span> : <span class="string">'NAME'</span> ,</div><div class="line">		<span class="attr">payload</span> : name </div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> setPersonAge = <span class="function">(<span class="params">age</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">type</span> : <span class="string">'AGE'</span> ,</div><div class="line">		<span class="attr">payload</span> : age </div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> addTodo = <span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">type</span> : <span class="string">'ADD'</span> ,</div><div class="line">		<span class="attr">payload</span> : text </div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> boundActionCreators = bindActionCreators(&#123; setPersonName , setPersonAge , addTodo &#125;,store.dispatch) ;</div><div class="line">boundActionCreators.addTodo(<span class="string">'Coding'</span>) ;</div><div class="line">boundActionCreators.setPersonAge(<span class="number">22</span>);</div><div class="line">boundActionCreators.setPersonName(<span class="string">'Jeno'</span>);</div><div class="line"><span class="built_in">console</span>.log(store.getState());</div></pre></td></tr></table></figure></p>
<p>接下來是實作的部分，我們首先創建一個空物件<code>boundActionCreators</code>並回傳。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> bindActionCreators = <span class="function">(<span class="params">actionCreators,dispatch</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> boundActionCreators = &#123;&#125; ;</div><div class="line">	<span class="keyword">return</span> boundActionCreators ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再來遍歷<code>actionCreators</code>並把相對應的<code>key</code>宣告為函式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 這時 actionCreators 的內容</span></div><div class="line">actionCreators = &#123;</div><div class="line">	setPersonName : function(name)&#123;</div><div class="line">		return &#123;</div><div class="line">			type : 'NAME' ,</div><div class="line">			payload : name </div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line">	setPersonAge : function(age)&#123;</div><div class="line">		return &#123;</div><div class="line">			type : 'AGE' ,</div><div class="line">			payload : age </div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line">	addTodo : function(text)&#123;</div><div class="line">		return &#123;</div><div class="line">			type : 'ADD' ,</div><div class="line">			payload : text </div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">const</span> bindActionCreators = <span class="function">(<span class="params">actionCreators,dispatch</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> boundActionCreators = &#123;&#125; ;</div><div class="line">	<span class="keyword">for</span> ( <span class="keyword">let</span> key <span class="keyword">in</span> actionCreators )&#123;</div><div class="line">		boundActionCreators[key] = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> boundActionCreators ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>該函式的內容則是直接利用<code>dispatch</code>去發出該函式回傳的<code>action</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> bindActionCreators = <span class="function">(<span class="params">actionCreators,dispatch</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> boundActionCreators = &#123;&#125; ;</div><div class="line">	<span class="keyword">for</span> ( <span class="keyword">let</span> key <span class="keyword">in</span> actionCreators )&#123;</div><div class="line">		boundActionCreators[key] = <span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</div><div class="line">			dispatch(actionCreators[key](payload)) ;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> boundActionCreators ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="applyMiddleware"><a href="#applyMiddleware" class="headerlink" title="applyMiddleware"></a>applyMiddleware</h2><p><code>applyMiddleware</code>可以將<code>dispacth</code>包裝起來，如同洋蔥一樣必須一層一層透過<code>middlewares</code>才會到最後的<code>store.dispatch</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> middleware1 = <span class="function">(<span class="params">middlewareAPI</span>) =&gt;</span> (next) =&gt; <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware 1, my next is '</span>,next) ;</div><div class="line">	<span class="keyword">return</span> next(action) ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> middleware2 = <span class="function">(<span class="params">middlewareAPI</span>) =&gt;</span> (next) =&gt; <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware 2, my next is '</span>,next) ;</div><div class="line">	<span class="keyword">return</span> next(action);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> store = createStore(reducer,&#123;&#125;,applyMiddleware(middleware1,middleware2)) ;</div><div class="line">store.dispatch(&#123; <span class="attr">type</span> : <span class="string">'NAME'</span> , <span class="attr">payload</span> : <span class="string">'Jeno '</span>&#125;) ;</div><div class="line"><span class="built_in">console</span>.log(store.getState());</div></pre></td></tr></table></figure>
<p>首先假設我們現在只有一個<code>middleware</code>，<code>middleware</code>傳入兩個參數<code>dispatch</code>和<code>action</code>如下，代表希望<code>dispatch</code>可以透過這個<code>middleware</code>做處理。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> middleware = <span class="function">(<span class="params">dispatch,action</span>) =&gt;</span> &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware, before dispatch'</span>);</div><div class="line">	dispatch(action);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware, after dispatch'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> store = createStore(reducer,&#123;&#125;,middleware) ;</div></pre></td></tr></table></figure>
<p>我們先創建另一個函式專門針對含有<code>middleware</code>的做處理，若要使用<code>middleware</code>則必須使用該函式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStoreWithMiddleWare = <span class="function">(<span class="params">reducer,state,middleware</span>) =&gt;</span> &#123;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> middleware = <span class="function">(<span class="params">dispatch,action</span>) =&gt;</span> &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware, before dispatch'</span>);</div><div class="line">	dispatch(action);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware, after dispatch'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> store = createStoreWithMiddleWare(reducer,&#123;&#125;,middleware) ;</div></pre></td></tr></table></figure></p>
<p>接下來實作<code>createStoreWithMiddleWare</code>的部分，先使用原本<code>createStore</code>創造<code>store</code>，將<code>dispatch</code>修改為將原先的<code>dispatch</code>和<code>action</code>傳入<code>middleware</code>做處理，再將修改後的<code>store</code>回傳。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStoreWithMiddleWare = <span class="function">(<span class="params">reducer,state,middleware</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> store = createStore(reducer,state) ;</div><div class="line">	<span class="keyword">let</span> dispatch = <span class="function"><span class="keyword">function</span>(<span class="params">action</span>)</span>&#123;</div><div class="line">		middleware(store.dispatch,action) ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		...store,</div><div class="line">		dispatch </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我們可以在<code>createStore</code>做處理，如此一來就不需要呼叫兩個不同的函式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer,state,middleware</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">if</span> ( middleware !== <span class="literal">undefined</span> )&#123;</div><div class="line">		<span class="keyword">return</span> createStoreWithMiddleWare(reducer,state,middleware) ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">let</span> nowReducer = reducer ;</div><div class="line">	<span class="keyword">let</span> nowState = state ;</div><div class="line">	<span class="keyword">let</span> nowListeners = [] ;</div><div class="line">	<span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">		<span class="keyword">return</span> nowState ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">		nowState = nowReducer(nowState,action) ;</div><div class="line">		nowListeners.forEach(<span class="function">(<span class="params">listener</span>) =&gt;</span> listener());</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">const</span> subscribe = <span class="function">(<span class="params">listener</span>) =&gt;</span> &#123;</div><div class="line">		nowListeners.push(listener) ;</div><div class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			nowListeners.splice(nowListeners.indexOf(listener),<span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">const</span> replaceReducer = <span class="function">(<span class="params">reducer</span>) =&gt;</span> &#123;</div><div class="line">		nowReducer = reducer ;</div><div class="line">		dispatch(&#123; <span class="attr">type</span> : <span class="string">'INIT'</span> &#125;) ;</div><div class="line">	&#125;</div><div class="line">	dispatch(&#123; <span class="attr">type</span> : <span class="string">'INIT'</span> &#125;) ;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		getState ,</div><div class="line">		dispatch ,</div><div class="line">		subscribe ,</div><div class="line">		replaceReducer</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> store = createStore(reducer,&#123;&#125;,middleware) ;</div></pre></td></tr></table></figure></p>
<p>若我們想要傳入多個<code>middlewares</code>，我們可以修改每一個<code>middleware</code>成新的函式，將下一個<code>middleware</code>帶進去。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStoreWithMiddleWare = <span class="function">(<span class="params">reducer,state,middlewares</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> store = createStore(reducer,state) ;</div><div class="line">	<span class="keyword">let</span> newMiddleware = [...middlewares,store.dispatch] ;</div><div class="line">	<span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; newMiddleware.length - <span class="number">1</span> ; i ++ )&#123;</div><div class="line">		<span class="keyword">let</span> fn = newMiddleware[i] ;</div><div class="line">		newMiddleware[i] = <span class="function"><span class="keyword">function</span>(<span class="params">action,dispatch</span>)</span>&#123;</div><div class="line">			fn(action,newMiddleware[i+<span class="number">1</span>]) ;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">let</span> dispatch = <span class="function"><span class="keyword">function</span>(<span class="params">action</span>)</span>&#123;</div><div class="line">		newMiddleware[<span class="number">0</span>](action,newMiddleware[<span class="number">1</span>]) ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		...store,</div><div class="line">		dispatch </div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> middleware1 = <span class="function">(<span class="params">action,dispatch</span>) =&gt;</span> &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware 1, before dispatch'</span>);</div><div class="line">	dispatch(action);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware 1, after dispatch'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> middleware2 = <span class="function">(<span class="params">action,dispatch</span>) =&gt;</span> &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware 2, before dispatch'</span>);</div><div class="line">	dispatch(action);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware 2, after dispatch'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我們在這邊把<code>action</code>和<code>dispatch</code>參數對調，是為了因應<code>dispatch(action)</code>第一個參數是<code>action</code>的原因。</p>
<p>或者，我們也可以在這邊先將<code>middleware</code>函式<code>Curry</code>化，如此一來我們就可以先傳入<code>store.patch</code>，之後再傳入<code>action</code>，以便於直接搭配<code>compose</code>來使用。</p>
<p>關於<code>Curry</code>可以看我另一篇文章：<a href="http://jeno5980515.github.io/2017/05/17/Programming%20Language/JavaScript/Curry/">[JavaScript] Curry</a><br>關於<code>Compose</code>可以看我的另一篇文章：<a href="http://jeno5980515.github.io/2017/05/18/Programming%20Language/JavaScript/Compose%20%E5%92%8C%20Pipe/">[JavaScript] Compose 和 Pipe</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStoreWithMiddleWare = <span class="function">(<span class="params">reducer,state,middleware</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> store = createStore(reducer,state) ;</div><div class="line">	<span class="keyword">let</span> dispatch = store.dispatch ;</div><div class="line">	dispatch = <span class="function"><span class="keyword">function</span>(<span class="params">action</span>)</span>&#123;</div><div class="line">		middleware(store.dispatch)(action) ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		...store,</div><div class="line">		dispatch </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接著修改<code>middleware</code>的函式結構。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> middleware = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> (action) =&gt; &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware 1, before dispatch'</span>);</div><div class="line">	dispatch(action);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware 1, after dispatch'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果要傳入多個<code>middlewares</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> middleware1 = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> (action) =&gt; &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware 1, before dispatch'</span>);</div><div class="line">	dispatch(action);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware 1, after dispatch'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> middleware2 = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> (action) =&gt; &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware 2, before dispatch'</span>);</div><div class="line">	dispatch(action);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware 2, after dispatch'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> store = createStore(reducer,&#123;&#125;,[middleware1,middleware2]) ;</div></pre></td></tr></table></figure></p>
<p>修改<code>createStoreWithMiddleWare</code>，先<code>compose</code>所有的<code>middlewares</code>再傳入<code>store.dispatch</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStoreWithMiddleWare = <span class="function">(<span class="params">reducer,state,middlewares</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> store = createStore(reducer,state) ;</div><div class="line">	<span class="keyword">let</span> dispatch = store.dispatch ;</div><div class="line">	<span class="keyword">let</span> composedMiddleWare = compose(...middlewares)(store.dispatch);</div><div class="line">	dispatch = <span class="function"><span class="keyword">function</span>(<span class="params">action</span>)</span>&#123;</div><div class="line">		composedMiddleWare(action) ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		...store,</div><div class="line">		dispatch </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>帶入<code>store.dispatch</code>到<code>Compose</code>完<code>Curry</code>後的<code>middlewares</code>，可以經由每次回傳一個函式到上一個<code>middleware</code>，如此一來就可以組合成一個大的<code>middleware</code>使傳入的<code>action</code>可以透過<code>middleware1</code>-&gt;<code>middleware2</code>-&gt;<code>store.dispatch</code>。</p>
<p>接著，假設我們現在必須對特定的<code>action</code>做處理，例如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">store.dispatch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">	setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">		dispatch(&#123;</div><div class="line">			<span class="attr">type</span> : <span class="string">'AGE'</span> ,</div><div class="line">			<span class="attr">payload</span> : <span class="number">22</span></div><div class="line">		&#125;) ;</div><div class="line">		<span class="built_in">console</span>.log(getState());</div><div class="line">	&#125;,<span class="number">1000</span>)</div><div class="line">&#125;) ;</div></pre></td></tr></table></figure></p>
<p>發現在<code>action</code>裡面的函式並沒有<code>dispatch</code>和<code>getState</code>可以使用，因此必須傳這兩個進來。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">store.dispatch(<span class="function">(<span class="params">middlewareAPI</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> dispatch = middlewareAPI.dispatch ;</div><div class="line">	<span class="keyword">let</span> getState = middlewareAPI.getState ;</div><div class="line">	setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">		dispatch(&#123;</div><div class="line">			<span class="attr">type</span> : <span class="string">'AGE'</span> ,</div><div class="line">			<span class="attr">payload</span> : <span class="number">22</span></div><div class="line">		&#125;) ;</div><div class="line">		<span class="built_in">console</span>.log(getState());</div><div class="line">	&#125;,<span class="number">1000</span>)</div><div class="line">&#125;) ;</div></pre></td></tr></table></figure></p>
<p>如此一來修改<code>createStoreWithMiddleWare</code>，在這邊我們傳入帶<code>dispatch</code>和<code>getState</code>的<code>middlewareAPI</code>到每個<code>middleware</code>，注意在這邊帶的<code>dispatch</code>必須是修改過後的<code>dispatch</code>而不是<code>store.dispatch</code>，才可以確保每次<code>dispatch</code>都會從第一個<code>middleware</code>開始。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStoreWithMiddleWare = <span class="function">(<span class="params">reducer,state,middlewares</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> store = createStore(reducer,state) ;</div><div class="line">	<span class="keyword">let</span> dispatch = store.dispatch ;</div><div class="line">	<span class="keyword">let</span> middlewareAPI = &#123;</div><div class="line">		<span class="attr">getState</span> : store.getState ,</div><div class="line">		<span class="attr">dispatch</span> : <span class="function">(<span class="params">action</span>) =&gt;</span> dispatch(action) </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">let</span> newMiddlewares = middlewares.map(<span class="function">(<span class="params">middleware</span>)=&gt;</span>middleware(middlewareAPI));</div><div class="line">	<span class="keyword">let</span> composedMiddleWare = compose(...newMiddlewares)(store.dispatch);</div><div class="line">	dispatch = <span class="function"><span class="keyword">function</span>(<span class="params">action</span>)</span>&#123;</div><div class="line">		composedMiddleWare(action) ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		...store,</div><div class="line">		dispatch </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再來我們必須修改<code>middleware</code>的架構，再這邊我們把<code>middleware2</code>修改成可以處理<code>action</code>是函式的狀況，同時這也是<code>redux-thunk</code>實作原理。</p>
<p>為了避免<code>dispatch</code>搞混，我們將前往下一個<code>middleware</code>的<code>dispatch</code>改為<code>next</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> middleware1 = <span class="function">(<span class="params">middlewareAPI</span>) =&gt;</span> (next) =&gt; <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware 1, going to next'</span>);</div><div class="line">	<span class="keyword">let</span> result = next(action);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> middleware2 = <span class="function">(<span class="params">middlewareAPI</span>) =&gt;</span> (next) =&gt; <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware 2, going to next'</span>);</div><div class="line">	<span class="keyword">if</span> ( <span class="keyword">typeof</span> action === <span class="string">'function'</span> )&#123;</div><div class="line">		action(middlewareAPI) ;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">let</span> result = next(action);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因此每當我們呼叫一般的物件<code>action</code>，則會通過<code>middleware1</code>-&gt;<code>middleware2</code>-&gt;<code>store.dispatch</code>。</p>
<p>若<code>action</code>是函式如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">let</span> store = createStore(reducer,&#123;&#125;,[middleware1,middleware2]) ;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(store.getState());</div><div class="line">store.dispatch(&#123; <span class="attr">type</span> : <span class="string">'NAME'</span> , <span class="attr">payload</span> : <span class="string">'Jeno '</span>&#125;) ;</div><div class="line"><span class="built_in">console</span>.log(store.getState());</div><div class="line">store.dispatch(<span class="function">(<span class="params">middlewareAPI</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> dispatch = middlewareAPI.dispatch ;</div><div class="line">	<span class="keyword">let</span> getState = middlewareAPI.getState ;</div><div class="line">	setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">		dispatch(&#123;</div><div class="line">			<span class="attr">type</span> : <span class="string">'AGE'</span> ,</div><div class="line">			<span class="attr">payload</span> : <span class="number">22</span></div><div class="line">		&#125;) ;</div><div class="line">		<span class="built_in">console</span>.log(getState());</div><div class="line">	&#125;,<span class="number">1000</span>)</div><div class="line">&#125;) ;</div></pre></td></tr></table></figure></p>
<p>流程則是<code>middleware1</code>-&gt;<code>middleware2</code>-&gt;<code>middleware1</code>-&gt;<code>middleware2</code>-&gt;<code>store.dispatch</code>。</p>
<p>如此一來處理<code>middlewares</code>的函式其實差不多了，我們把參數傳遞方式改一下並且改<code>createStoreWithMiddleWare</code>為<code>applyMiddleware</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> applyMiddleware = <span class="function">(<span class="params">reducer,state,middlewares</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> store = createStore(reducer,state) ;</div><div class="line">	<span class="keyword">let</span> dispatch = store.dispatch ;</div><div class="line">	<span class="keyword">let</span> middlewareAPI = &#123;</div><div class="line">		<span class="attr">getState</span> : store.getState ,</div><div class="line">		<span class="attr">dispatch</span> : <span class="function">(<span class="params">action</span>) =&gt;</span> dispatch(action) </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">let</span> newMiddlewares = middlewares.map(<span class="function">(<span class="params">middleware</span>)=&gt;</span>middleware(middlewareAPI));</div><div class="line">	<span class="keyword">let</span> composedMiddleWare = compose(...newMiddlewares)(store.dispatch);</div><div class="line">	dispatch = <span class="function"><span class="keyword">function</span>(<span class="params">action</span>)</span>&#123;</div><div class="line">		composedMiddleWare(action) ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		...store,</div><div class="line">		dispatch </div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> store = createStore(reducer,&#123;&#125;,applyMiddleware(middleware1,middleware2)) ;</div></pre></td></tr></table></figure></p>
<p>接著改寫<code>applyMiddleware</code>的結構，並讓它可以傳<code>reducer</code>和<code>state</code>進來。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> applyMiddleware = <span class="function">(<span class="params">...middlewares</span>) =&gt;</span> (reducer,state) =&gt; &#123;</div><div class="line">	<span class="keyword">let</span> store = createStore(reducer,state) ;</div><div class="line">	<span class="keyword">let</span> dispatch = store.dispatch ;</div><div class="line">	<span class="keyword">let</span> middlewareAPI = &#123;</div><div class="line">		<span class="attr">getState</span> : store.getState ,</div><div class="line">		<span class="attr">dispatch</span> : <span class="function">(<span class="params">action</span>) =&gt;</span> dispatch(action) </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">let</span> newMiddlewares = middlewares.map(<span class="function">(<span class="params">middleware</span>)=&gt;</span>middleware(middlewareAPI));</div><div class="line">	<span class="keyword">let</span> composedMiddleWare = compose(...newMiddlewares)(store.dispatch);</div><div class="line">	dispatch = <span class="function"><span class="keyword">function</span>(<span class="params">action</span>)</span>&#123;</div><div class="line">		composedMiddleWare(action) ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		...store,</div><div class="line">		dispatch </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在<code>createStore</code>的部分也做修改。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer,state,enhancer</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">if</span> ( enhancer !== <span class="literal">undefined</span> )&#123;</div><div class="line">		<span class="keyword">return</span> enhancer(reducer,state) ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">let</span> nowReducer = reducer ;</div><div class="line">	<span class="keyword">let</span> nowState = state ;</div><div class="line">	<span class="keyword">let</span> nowListeners = [] ;</div><div class="line">	<span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">		<span class="keyword">return</span> nowState ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">		nowState = nowReducer(nowState,action) ;</div><div class="line">		nowListeners.forEach(<span class="function">(<span class="params">listener</span>) =&gt;</span> listener());</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">const</span> subscribe = <span class="function">(<span class="params">listener</span>) =&gt;</span> &#123;</div><div class="line">		nowListeners.push(listener) ;</div><div class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			nowListeners.splice(nowListeners.indexOf(listener),<span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">const</span> replaceReducer = <span class="function">(<span class="params">reducer</span>) =&gt;</span> &#123;</div><div class="line">		nowReducer = reducer ;</div><div class="line">		dispatch(&#123; <span class="attr">type</span> : <span class="string">'INIT'</span> &#125;) ;</div><div class="line">	&#125;</div><div class="line">	dispatch(&#123; <span class="attr">type</span> : <span class="string">'INIT'</span> &#125;) ;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		getState ,</div><div class="line">		dispatch ,</div><div class="line">		subscribe ,</div><div class="line">		replaceReducer</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>Redux</code>會再把<code>createStore</code>傳進<code>applyMiddleware</code>裡，如此一來就不需要<code>createStore</code>這段程式了。 </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前陣子寫的&lt;code&gt;Redux&lt;/code&gt;解析感覺寫不清楚，因此重寫一篇如何實作&lt;code&gt;Redux&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;這邊必須對&lt;code&gt;Redux&lt;/code&gt;有些基本認識，而實作的部分都先不做錯誤處理。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://jeno5980515.github.io/categories/Web/"/>
    
      <category term="Redux" scheme="http://jeno5980515.github.io/categories/Web/Redux/"/>
    
    
      <category term="Redux" scheme="http://jeno5980515.github.io/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>[JavaScript] Compose 和 Pipe</title>
    <link href="http://jeno5980515.github.io/2017/05/18/Programming%20Language/JavaScript/Compose%20%E5%92%8C%20Pipe/"/>
    <id>http://jeno5980515.github.io/2017/05/18/Programming Language/JavaScript/Compose 和 Pipe/</id>
    <published>2017-05-18T03:59:50.000Z</published>
    <updated>2017-06-01T08:45:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Compose"><a href="#Compose" class="headerlink" title="Compose"></a>Compose</h2><p><code>Compose</code>把多個函式組合成一個函式，關係式如下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">F(x) = f(g(x))</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>程式範例</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> x + <span class="number">1</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> g = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> x * <span class="number">2</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">f(g(<span class="number">1</span>)); <span class="comment">// 3</span></div><div class="line"><span class="keyword">var</span> F = compose(f,g);</div><div class="line">F(<span class="number">1</span>); <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>首先回傳一個函式，並利用閉包將傳入的函式紀錄起來。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> compose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> fns = <span class="built_in">arguments</span> ;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>這個回傳的函式要依次執行函式參數，注意要從最後一個開始執行。</p>
<p>這裡使用 call 而不直接呼叫是為了以防函式使用到 this 的情形。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> compose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> fns = <span class="built_in">arguments</span> ;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">		<span class="keyword">for</span> ( <span class="keyword">var</span> i = fns.length - <span class="number">1</span> ; i &gt;= <span class="number">0</span> ; i -- )&#123;</div><div class="line">			result = fns[i].call(<span class="keyword">this</span>,result) ;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result ;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> x + <span class="number">1</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> g = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> x * <span class="number">2</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">f(g(<span class="number">1</span>)); <span class="comment">// 3</span></div><div class="line"><span class="keyword">var</span> F = compose(f,g);</div><div class="line">F(<span class="number">1</span>); <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p>可以使用<code>reduce</code> ，記得是從最後一個開始執行所以要使用 <code>reduceRight</code>。</p>
<p>由於 reduce 用於陣列而 arguments 只是類陣列，所以先將 arguments 先轉為陣列。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> fns = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>,<span class="number">0</span>);</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> result = fns.reduceRight(<span class="function"><span class="keyword">function</span>(<span class="params">result , fn</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> fn.call(<span class="keyword">this</span>,result);</div><div class="line">		&#125;,arg);</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="Pipe"><a href="#Pipe" class="headerlink" title="Pipe"></a>Pipe</h2><p>Pipe 其實和 Compose 很像，只是函式執行順序不一樣而已，因此改變程式順序即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">pipe</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> fns = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>,<span class="number">0</span>);</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> result = fns.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">result , fn</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> fn.call(<span class="keyword">this</span>,result);</div><div class="line">		&#125;,arg);</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p><a href="http://blakeembrey.com/articles/2014/01/compose-functions-javascript/" target="_blank" rel="external">Composing Functions in JavaScript</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Compose&quot;&gt;&lt;a href=&quot;#Compose&quot; class=&quot;headerlink&quot; title=&quot;Compose&quot;&gt;&lt;/a&gt;Compose&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Compose&lt;/code&gt;把多個函式組合成一個函式，關係式如下。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;F(x) = f(g(x))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Programming Language" scheme="http://jeno5980515.github.io/categories/Programming-Language/"/>
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/categories/Programming-Language/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/tags/JavaScript/"/>
    
      <category term="Compose" scheme="http://jeno5980515.github.io/tags/Compose/"/>
    
      <category term="Pipe" scheme="http://jeno5980515.github.io/tags/Pipe/"/>
    
  </entry>
  
  <entry>
    <title>[JavaScript] Curry</title>
    <link href="http://jeno5980515.github.io/2017/05/17/Programming%20Language/JavaScript/Curry/"/>
    <id>http://jeno5980515.github.io/2017/05/17/Programming Language/JavaScript/Curry/</id>
    <published>2017-05-17T13:15:57.000Z</published>
    <updated>2017-05-17T13:41:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>Curry</code>化指的是將接受多個參數的函數轉換成可以依次傳入參數的函式，以下見例子。</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">x , y</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> x + y ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">add(<span class="number">1</span>,<span class="number">2</span>) ; <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p>Curry 化後<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> x + y ;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">add(<span class="number">1</span>)(<span class="number">2</span>); <span class="comment">// 3</span></div></pre></td></tr></table></figure></p>
<p>這樣做有什麼好處？好處在於我們利用不同的參數來創造不同的函式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> addOne = add(<span class="number">1</span>) ;</div><div class="line"><span class="keyword">var</span> addTwo = add(<span class="number">2</span>) ;</div><div class="line">addOne(<span class="number">1</span>) ; <span class="comment">// 2</span></div><div class="line">addTwo(<span class="number">1</span>) ; <span class="comment">// 3</span></div></pre></td></tr></table></figure></p>
<p>許多函式庫有提供<code>Curry</code>化的功能，像是<code>lodash</code>等等的函式庫。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">x , y , z</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> x + y + z ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> curryAdd = _.curry(add) ;</div><div class="line">curryAdd(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// 6 </span></div><div class="line">curryAdd(<span class="number">1</span>,<span class="number">2</span>)(<span class="number">3</span>); <span class="comment">// 6 </span></div><div class="line">curryAdd(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>); <span class="comment">// 6</span></div></pre></td></tr></table></figure></p>
<p>接下來透過實作來了解是如何辦到 Curry 功能的。</p>
<h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>首先無論如何先回傳一個函式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> curry = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再來我們要知道什麼時候是參數已經傳完的情況並且作處理，若參數已經傳完則利用 apply 執行函式。</p>
<p>在這邊先 slice 一份 arguments，而由於 arguments 不是陣列而是物件，因此不可以直接對 arguments 做 slice 。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> curry = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>);</div><div class="line">		<span class="keyword">if</span> ( args.length &gt;= fn.length ) &#123;</div><div class="line">			<span class="keyword">return</span> fn.apply(<span class="literal">null</span>, args);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>若參數還沒傳完，這時候要回傳個函式讓使用者繼續呼叫<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> curry = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>);</div><div class="line">		<span class="keyword">if</span> ( args.length &gt;= fn.length ) &#123;</div><div class="line">			<span class="keyword">return</span> fn.apply(<span class="literal">null</span>, args);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>若再次呼叫這個函式，則直接把帶入的參數連接到之前的參數後面，並再次呼叫原先的 curried 函式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> curry = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">	<span class="comment">// 為了再次呼叫命名為 curried</span></div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">curried</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>);</div><div class="line">		<span class="keyword">if</span> ( args.length &gt;= fn.length ) &#123;</div><div class="line">			<span class="keyword">return</span> fn.apply(<span class="literal">null</span>, args);</div><div class="line">		&#125;	</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="keyword">var</span> args2 = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>);</div><div class="line">				<span class="keyword">return</span> curried.apply(<span class="literal">null</span>, args.concat(args2)); </div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如此一來就完成了</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> curry = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">curried</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>);</div><div class="line">		<span class="keyword">if</span> ( args.length &gt;= fn.length ) &#123;</div><div class="line">			<span class="keyword">return</span> fn.apply(<span class="literal">null</span>, args);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="keyword">var</span> args2 = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>);</div><div class="line">				<span class="keyword">return</span> curried.apply(<span class="literal">null</span>, args.concat(args2)); </div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">x , y ,z</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> x + y + z ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> add = curry(add);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>)(<span class="number">3</span>));	<span class="comment">// 6</span></div><div class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>)(<span class="number">2</span>,<span class="number">3</span>));	<span class="comment">// 6</span></div><div class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>));	<span class="comment">// 6</span></div><div class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));	<span class="comment">// 6</span></div></pre></td></tr></table></figure>
<h3 id="不限參數"><a href="#不限參數" class="headerlink" title="不限參數"></a>不限參數</h3><p>若我們希望這個函式不限定參數數量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">add(<span class="number">1</span>) <span class="comment">//1</span></div><div class="line">add(<span class="number">1</span>)(<span class="number">2</span>) <span class="comment">// 3</span></div><div class="line">add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)<span class="comment">// 6</span></div></pre></td></tr></table></figure></p>
<p>以上的方法是不合理的，因為它不知道現在該繼續回傳函式還是該回傳結果，我們可以提供個函式讓它知道已經執行完要得到結果。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">add(<span class="number">1</span>).value() <span class="comment">//1</span></div><div class="line">add(<span class="number">1</span>)(<span class="number">2</span>).value() <span class="comment">// 3</span></div><div class="line">add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>).value()<span class="comment">// 6</span></div></pre></td></tr></table></figure></p>
<p>首先一樣先回傳一個函式，並且讓這個函式回傳自己以便繼續傳入參數，且另外給這個函式一個 value 函式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> curried = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> curried ;</div><div class="line">	&#125;</div><div class="line">	curried.value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> curried ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在每次帶入參數後將值加總，並在 value 函式回傳結果即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">sum</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> curried = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">		sum += num ;</div><div class="line">		<span class="keyword">return</span> curried ;</div><div class="line">	&#125;</div><div class="line">	curried.value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> sum ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> curried ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如此一來即可不斷對 add 帶入參數<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myAdder = add ;</div><div class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++) &#123;</div><div class="line">	myAdder = myAdder(<span class="number">10</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">myAdder(<span class="number">10</span>); <span class="comment">// 100</span></div></pre></td></tr></table></figure></p>
<p>利用 arguments 來處理一次帶入多個參數<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> sum = <span class="number">0</span> ;</div><div class="line">	<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="built_in">arguments</span>.length ; i ++ )&#123;</div><div class="line">		sum += <span class="built_in">arguments</span>[i] ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">var</span> curried = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="built_in">arguments</span>.length ; i ++ )&#123;</div><div class="line">			sum += <span class="built_in">arguments</span>[i] ;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> curried ;</div><div class="line">	&#125;</div><div class="line">	curried.value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> sum ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> curried ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">add(<span class="number">1</span>).value() <span class="comment">//1</span></div><div class="line">add(<span class="number">1</span>)(<span class="number">2</span>).value() <span class="comment">// 3</span></div><div class="line">add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>).value() <span class="comment">// 6</span></div><div class="line">add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)(<span class="number">4</span>).value() <span class="comment">// 10</span></div><div class="line">add(<span class="number">1</span>)(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>).value() <span class="comment">// 10</span></div></pre></td></tr></table></figure></p>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p><a href="http://blog.carbonfive.com/2015/01/14/gettin-freaky-functional-wcurried-javascript/" target="_blank" rel="external">Gettin’ Freaky Functional w/Curried JavaScript</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Curry&lt;/code&gt;化指的是將接受多個參數的函數轉換成可以依次傳入參數的函式，以下見例子。&lt;/p&gt;
    
    </summary>
    
      <category term="Programming Language" scheme="http://jeno5980515.github.io/categories/Programming-Language/"/>
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/categories/Programming-Language/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/tags/JavaScript/"/>
    
      <category term="Curry" scheme="http://jeno5980515.github.io/tags/Curry/"/>
    
  </entry>
  
</feed>
