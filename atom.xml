<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jeno&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jeno5980515.github.io/"/>
  <updated>2017-09-03T06:57:18.000Z</updated>
  <id>http://jeno5980515.github.io/</id>
  
  <author>
    <name>Jeno</name>
    <email>jeno5980515@yahoo.com.tw</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[LeetCode] 59 - Spiral Matrix II</title>
    <link href="http://jeno5980515.github.io/2017/09/03/Online%20Judge/LeetCode/59%20-%20Spiral%20Matrix%20II/"/>
    <id>http://jeno5980515.github.io/2017/09/03/Online Judge/LeetCode/59 - Spiral Matrix II/</id>
    <published>2017-09-03T06:50:20.000Z</published>
    <updated>2017-09-03T06:57:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h1><p>同 <code>54 - Spiral Matrix</code> ，模擬繞圈遍歷矩陣即可。</p>
<a id="more"></a>
<h1 id="程式"><a href="#程式" class="headerlink" title="程式"></a>程式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;number&#125; n</div><div class="line"> * @return &#123;number[][]&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> generateMatrix = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> ( n === <span class="number">0</span> ) <span class="keyword">return</span> [];</div><div class="line">  <span class="keyword">let</span> matrix = <span class="built_in">Array</span>.apply(<span class="literal">null</span>, <span class="built_in">Array</span>(n)).map(<span class="function"><span class="params">row</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(n));</div><div class="line">  <span class="keyword">const</span> dirs = [<span class="string">'e'</span>, <span class="string">'s'</span>, <span class="string">'w'</span>, <span class="string">'n'</span>, <span class="string">'e'</span>];</div><div class="line">  <span class="keyword">const</span> dxs = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>];</div><div class="line">  <span class="keyword">const</span> dys = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>];</div><div class="line">    </div><div class="line">  <span class="keyword">const</span> checkValid = <span class="function">(<span class="params">x, y, dir</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">switch</span>(dir)&#123;</div><div class="line">      <span class="keyword">case</span> <span class="string">'e'</span>: <span class="keyword">return</span> y &lt; matrix[x].length - <span class="number">1</span> &amp;&amp; !matrix[x][y+<span class="number">1</span>];</div><div class="line">      <span class="keyword">case</span> <span class="string">'s'</span>: <span class="keyword">return</span> x &lt; matrix.length - <span class="number">1</span> &amp;&amp; !matrix[x+<span class="number">1</span>][y];</div><div class="line">      <span class="keyword">case</span> <span class="string">'w'</span>: <span class="keyword">return</span> y &gt;= <span class="number">1</span> &amp;&amp; !matrix[x][y<span class="number">-1</span>];</div><div class="line">      <span class="keyword">case</span> <span class="string">'n'</span>: <span class="keyword">return</span> x &gt;= <span class="number">1</span> &amp;&amp; !matrix[x<span class="number">-1</span>][y];</div><div class="line">    &#125;</div><div class="line">  &#125;  </div><div class="line">    </div><div class="line">  <span class="keyword">const</span> loop = <span class="function">(<span class="params">x ,y, dir, number</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> ( matrix[x][y] ) <span class="keyword">return</span> ;</div><div class="line">    </div><div class="line">    matrix[x][y] = number;</div><div class="line">    <span class="keyword">let</span> dirIndex = dirs.indexOf(dir);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>( !checkValid(x, y, dir) )&#123;</div><div class="line">      dirIndex ++ ;</div><div class="line">      <span class="keyword">if</span> ( checkValid(x, y, dirs[dirIndex]) )&#123;</div><div class="line">        loop(x + dxs[dirIndex], y + dys[dirIndex], dirs[dirIndex], number + <span class="number">1</span>);</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      loop(x + dxs[dirIndex], y + dys[dirIndex], dir, number + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  loop(<span class="number">0</span>, <span class="number">0</span>, dirs[<span class="number">0</span>], <span class="number">1</span>);</div><div class="line">  <span class="keyword">return</span> matrix;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h1&gt;&lt;p&gt;同 &lt;code&gt;54 - Spiral Matrix&lt;/code&gt; ，模擬繞圈遍歷矩陣即可。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://jeno5980515.github.io/categories/Online-Judge/"/>
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/categories/Online-Judge/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/tags/LeetCode/"/>
    
      <category term="59" scheme="http://jeno5980515.github.io/tags/59/"/>
    
  </entry>
  
  <entry>
    <title>[Codewars] 4 kyu - Sum Strings as Numbers</title>
    <link href="http://jeno5980515.github.io/2017/08/31/Online%20Judge/Codewars/4%20kyu%20-%20Sum%20Strings%20as%20Numbers/"/>
    <id>http://jeno5980515.github.io/2017/08/31/Online Judge/Codewars/4 kyu - Sum Strings as Numbers/</id>
    <published>2017-08-31T04:00:03.000Z</published>
    <updated>2017-08-31T04:03:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h1><p>大數相加。</p>
<a id="more"></a>
<h1 id="程式"><a href="#程式" class="headerlink" title="程式"></a>程式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumStrings</span>(<span class="params">a,b</span>) </span>&#123; </div><div class="line">  <span class="keyword">if</span> ( b.length &gt; a.length )&#123;</div><div class="line">    <span class="keyword">var</span> temp = a ;</div><div class="line">    a = b ;</div><div class="line">    b = temp ;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">while</span> ( b.length &lt; a.length )&#123;</div><div class="line">    b = <span class="string">'0'</span> + b ;</div><div class="line">  &#125;</div><div class="line">  a = a.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</div><div class="line">  b = b.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</div><div class="line">  <span class="keyword">var</span> c = <span class="string">''</span> , i = <span class="number">0</span> ;</div><div class="line">  <span class="keyword">var</span> carry = <span class="number">0</span> ;</div><div class="line">  <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; a.length ; i ++ ) &#123;</div><div class="line">    <span class="keyword">var</span> result = <span class="built_in">parseInt</span>(a[i]) + <span class="built_in">parseInt</span>(b[i]) + carry ;</div><div class="line">    carry = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">if</span> ( result &gt;= <span class="number">10</span> )&#123;</div><div class="line">      result -= <span class="number">10</span> ;</div><div class="line">      carry ++ ;</div><div class="line">    &#125;</div><div class="line">    c = c + result;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> ( carry !== <span class="number">0</span> )&#123;</div><div class="line">    c = c + <span class="string">'1'</span> ;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">while</span> ( c[c.length<span class="number">-1</span>] === <span class="string">'0'</span> )&#123;</div><div class="line">    c = c.slice(<span class="number">0</span>,c.length<span class="number">-1</span>) ;</div><div class="line">  &#125;</div><div class="line">  c = c.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>) ;</div><div class="line">  <span class="keyword">return</span> c ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h1&gt;&lt;p&gt;大數相加。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://jeno5980515.github.io/categories/Online-Judge/"/>
    
      <category term="Codewars" scheme="http://jeno5980515.github.io/categories/Online-Judge/Codewars/"/>
    
    
      <category term="Codewars" scheme="http://jeno5980515.github.io/tags/Codewars/"/>
    
      <category term="4 kyu" scheme="http://jeno5980515.github.io/tags/4-kyu/"/>
    
  </entry>
  
  <entry>
    <title>[Codewars] 5 kyu - Maximum subarray sum</title>
    <link href="http://jeno5980515.github.io/2017/08/31/Online%20Judge/Codewars/5%20kyu%20-%20Maximum%20subarray%20sum/"/>
    <id>http://jeno5980515.github.io/2017/08/31/Online Judge/Codewars/5 kyu - Maximum subarray sum/</id>
    <published>2017-08-31T03:58:03.000Z</published>
    <updated>2017-08-31T04:04:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h1><p>求最大子序列。</p>
<a id="more"></a>
<h1 id="程式"><a href="#程式" class="headerlink" title="程式"></a>程式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> maxSequence = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> max = <span class="number">0</span> ;</div><div class="line">  <span class="keyword">var</span> sum = <span class="number">0</span> ;</div><div class="line">  <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; arr.length ; i ++ )&#123;</div><div class="line">    sum += arr[i] ;</div><div class="line">    <span class="keyword">if</span> ( sum &gt; max )&#123;</div><div class="line">      max = sum ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ( sum &lt; <span class="number">0</span> )&#123;</div><div class="line">      sum = <span class="number">0</span> ;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> max ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h1&gt;&lt;p&gt;求最大子序列。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://jeno5980515.github.io/categories/Online-Judge/"/>
    
      <category term="Codewars" scheme="http://jeno5980515.github.io/categories/Online-Judge/Codewars/"/>
    
    
      <category term="Codewars" scheme="http://jeno5980515.github.io/tags/Codewars/"/>
    
      <category term="5 kyu" scheme="http://jeno5980515.github.io/tags/5-kyu/"/>
    
  </entry>
  
  <entry>
    <title>[Codewars] 4 kyu - Human readable duration format</title>
    <link href="http://jeno5980515.github.io/2017/08/31/Online%20Judge/Codewars/4%20kyu%20-%20Human%20readable%20duration%20format/"/>
    <id>http://jeno5980515.github.io/2017/08/31/Online Judge/Codewars/4 kyu - Human readable duration format/</id>
    <published>2017-08-31T03:54:10.000Z</published>
    <updated>2017-08-31T04:03:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h1><p>將秒數轉換成可讀的字串。</p>
<a id="more"></a>
<h1 id="程式"><a href="#程式" class="headerlink" title="程式"></a>程式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatDuration</span> (<span class="params">seconds</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> ( seconds === <span class="number">0</span> ) <span class="keyword">return</span> <span class="string">'now'</span> ;</div><div class="line">  <span class="keyword">var</span> typeArr = [<span class="string">'year'</span>,<span class="string">'day'</span>,<span class="string">'hour'</span>,<span class="string">'minute'</span>,<span class="string">'second'</span>] ;</div><div class="line">  <span class="keyword">var</span> sec = <span class="number">0</span> ;</div><div class="line">  <span class="keyword">var</span> minute = <span class="number">0</span> ;</div><div class="line">  <span class="keyword">var</span> hour = <span class="number">0</span> ;</div><div class="line">  <span class="keyword">var</span> day = <span class="number">0</span> ;</div><div class="line">  <span class="keyword">var</span> year = <span class="number">0</span> ;</div><div class="line">  minute = <span class="built_in">Math</span>.floor(seconds / <span class="number">60</span>) ;</div><div class="line">  sec = seconds % <span class="number">60</span> ;</div><div class="line">  </div><div class="line">  hour = <span class="built_in">Math</span>.floor(minute / <span class="number">60</span>) ;</div><div class="line">  minute = minute % <span class="number">60</span> ;</div><div class="line">  </div><div class="line">  day = <span class="built_in">Math</span>.floor(hour / <span class="number">24</span>) ;</div><div class="line">  hour = hour % <span class="number">24</span> ;</div><div class="line">  </div><div class="line">  year = <span class="built_in">Math</span>.floor(day / <span class="number">365</span>) ;</div><div class="line">  day = day % <span class="number">365</span> ;</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> resultArr = [year,day,hour,minute,sec] ;</div><div class="line">  <span class="keyword">var</span> resultStrArr = [] ;</div><div class="line">  <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; resultArr.length ; i ++ )&#123;</div><div class="line">    <span class="keyword">if</span> ( resultArr[i] === <span class="number">1</span> )&#123;</div><div class="line">      resultStrArr.push(resultArr[i]+<span class="string">' '</span> + typeArr[i]) ;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( resultArr[i] &gt;= <span class="number">2</span> )&#123;</div><div class="line">      resultStrArr.push(resultArr[i]+<span class="string">' '</span> + typeArr[i]+<span class="string">'s'</span>) ;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> resultStr = <span class="string">''</span> ;</div><div class="line">  <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; resultStrArr.length ; i ++ )&#123;</div><div class="line">    <span class="keyword">if</span> ( i === resultStrArr.length - <span class="number">2</span> )&#123;</div><div class="line">      resultStr += resultStrArr[i] + <span class="string">' and '</span> + resultStrArr[i+<span class="number">1</span>] ;</div><div class="line">      <span class="keyword">break</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ( i !== resultStrArr.length <span class="number">-1</span> )&#123;</div><div class="line">      resultStr += resultStrArr[i] + <span class="string">', '</span> ;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      resultStr += resultStrArr[i];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> resultStr ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h1&gt;&lt;p&gt;將秒數轉換成可讀的字串。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://jeno5980515.github.io/categories/Online-Judge/"/>
    
      <category term="Codewars" scheme="http://jeno5980515.github.io/categories/Online-Judge/Codewars/"/>
    
    
      <category term="Codewars" scheme="http://jeno5980515.github.io/tags/Codewars/"/>
    
      <category term="4 kyu" scheme="http://jeno5980515.github.io/tags/4-kyu/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 54 - Spiral Matrix</title>
    <link href="http://jeno5980515.github.io/2017/08/31/Online%20Judge/LeetCode/54%20-%20Spiral%20Matrix/"/>
    <id>http://jeno5980515.github.io/2017/08/31/Online Judge/LeetCode/54 - Spiral Matrix/</id>
    <published>2017-08-31T03:33:23.000Z</published>
    <updated>2017-08-31T03:42:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h1><p>模擬繞圈遍歷矩陣。</p>
<a id="more"></a>
<h1 id="程式"><a href="#程式" class="headerlink" title="程式"></a>程式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;number[][]&#125; matrix</div><div class="line"> * @return &#123;number[]&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> spiralOrder = <span class="function"><span class="keyword">function</span>(<span class="params">matrix</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> ( matrix.length === <span class="number">0</span> ) <span class="keyword">return</span> [];</div><div class="line">  <span class="keyword">let</span> bool = matrix.slice().map(<span class="function"><span class="params">rows</span> =&gt;</span> rows.map(<span class="function"><span class="params">el</span> =&gt;</span> <span class="literal">false</span>));</div><div class="line">  <span class="keyword">let</span> result = [];</div><div class="line">  <span class="keyword">let</span> currentDir = <span class="string">'e'</span>;</div><div class="line">  <span class="keyword">const</span> dirs = [<span class="string">'e'</span>, <span class="string">'s'</span>, <span class="string">'w'</span>, <span class="string">'n'</span>, <span class="string">'e'</span>];</div><div class="line">  <span class="keyword">const</span> dxs = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>];</div><div class="line">  <span class="keyword">const</span> dys = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>];</div><div class="line">    </div><div class="line">  <span class="keyword">const</span> checkValid = <span class="function">(<span class="params">x, y, dir</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">switch</span>(dir)&#123;</div><div class="line">      <span class="keyword">case</span> <span class="string">'e'</span>: <span class="keyword">return</span> y &lt; bool[x].length - <span class="number">1</span> &amp;&amp; !bool[x][y+<span class="number">1</span>];</div><div class="line">      <span class="keyword">case</span> <span class="string">'s'</span>: <span class="keyword">return</span> x &lt; bool.length - <span class="number">1</span> &amp;&amp; !bool[x+<span class="number">1</span>][y];</div><div class="line">      <span class="keyword">case</span> <span class="string">'w'</span>: <span class="keyword">return</span> y &gt;= <span class="number">1</span> &amp;&amp; !bool[x][y<span class="number">-1</span>];</div><div class="line">      <span class="keyword">case</span> <span class="string">'n'</span>: <span class="keyword">return</span> x &gt;= <span class="number">1</span> &amp;&amp; !bool[x<span class="number">-1</span>][y];</div><div class="line">    &#125;</div><div class="line">  &#125;  </div><div class="line">    </div><div class="line">  <span class="keyword">const</span> loop = <span class="function">(<span class="params">x ,y, dir</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> ( bool[x][y] ) <span class="keyword">return</span> ;</div><div class="line">    </div><div class="line">    bool[x][y] = <span class="literal">true</span>;</div><div class="line">    result.push(matrix[x][y]);</div><div class="line"></div><div class="line">    <span class="keyword">let</span> dirIndex = dirs.indexOf(dir);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>( !checkValid(x, y, dir) )&#123;</div><div class="line">      dirIndex ++ ;</div><div class="line">      <span class="keyword">if</span> ( checkValid(x, y, dirs[dirIndex]) )&#123;</div><div class="line">        loop(x + dxs[dirIndex], y + dys[dirIndex], dirs[dirIndex]);</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      loop(x + dxs[dirIndex], y + dys[dirIndex], dir);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  loop(<span class="number">0</span>, <span class="number">0</span>, dirs[<span class="number">0</span>]);</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h1&gt;&lt;p&gt;模擬繞圈遍歷矩陣。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://jeno5980515.github.io/categories/Online-Judge/"/>
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/categories/Online-Judge/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/tags/LeetCode/"/>
    
      <category term="54" scheme="http://jeno5980515.github.io/tags/54/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 151 - Reverse Words in a String</title>
    <link href="http://jeno5980515.github.io/2017/08/31/Online%20Judge/LeetCode/151%20-%20Reverse%20Words%20in%20a%20String/"/>
    <id>http://jeno5980515.github.io/2017/08/31/Online Judge/LeetCode/151 - Reverse Words in a String/</id>
    <published>2017-08-31T02:59:00.000Z</published>
    <updated>2017-08-31T03:35:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h1><p>反轉句子，並去除多餘空白。</p>
<a id="more"></a>
<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p>利用內建函式可以快速反轉並組合，必須要用 <code>filter</code> 去除多餘的空白。</p>
<h1 id="程式"><a href="#程式" class="headerlink" title="程式"></a>程式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;string&#125; str</div><div class="line"> * @returns &#123;string&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> reverseWords = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> str.split(<span class="string">' '</span>).filter(<span class="function">(<span class="params">el</span>) =&gt;</span> el !== <span class="string">''</span> ).reverse().join(<span class="string">' '</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h1&gt;&lt;p&gt;反轉句子，並去除多餘空白。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://jeno5980515.github.io/categories/Online-Judge/"/>
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/categories/Online-Judge/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/tags/LeetCode/"/>
    
      <category term="151" scheme="http://jeno5980515.github.io/tags/151/"/>
    
  </entry>
  
  <entry>
    <title>[Pwnable.kr] fd</title>
    <link href="http://jeno5980515.github.io/2017/08/30/Online%20Judge/Pwnable.kr/fd/"/>
    <id>http://jeno5980515.github.io/2017/08/30/Online Judge/Pwnable.kr/fd/</id>
    <published>2017-08-30T00:48:07.000Z</published>
    <updated>2017-08-30T01:20:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Mommy! what is a file descriptor in Linux?</p>
<a id="more"></a>
<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p>首先利用 <code>SSH</code> 進入主機後，可以看到有三個檔案個別是 <code>fd</code> ， <code>fd.c</code> 及 <code>flag</code>。</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-r-sr-x--- <span class="number">1</span> fd_pwn fd   <span class="number">7322</span> Jun <span class="number">11</span>  <span class="number">2014</span> fd</div><div class="line">-rw-r--r-- <span class="number">1</span> root   root  <span class="number">418</span> Jun <span class="number">11</span>  <span class="number">2014</span> fd.c</div><div class="line">-r--r----- <span class="number">1</span> fd_pwn root   <span class="number">50</span> Jun <span class="number">11</span>  <span class="number">2014</span> flag</div></pre></td></tr></table></figure>
<p>我們需要 <code>flag</code> 的內容，但我們只是 <code>fd</code> 因此只能執行 fd 檔案。</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function">fd@ubuntu:~$ <span class="title">whoami</span></span></div><div class="line"><span class="title">fd</span></div></pre></td></tr></table></figure>
<p>題目將原始碼附上了，查看有沒有可以使用的地方。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="keyword">char</span> buf[<span class="number">32</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"pass argv[1] a number\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> fd = atoi( argv[<span class="number">1</span>] ) - <span class="number">0x1234</span>;</div><div class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">    len = read(fd, buf, <span class="number">32</span>);</div><div class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">"LETMEWIN\n"</span>, buf))&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"good job :)\n"</span>);</div><div class="line">        system(<span class="string">"/bin/cat flag"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"learn about Linux file IO\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先看到得到 flag 的地方，在這邊必須讓 <code>buf</code> 和 <code>LETMEWIN\n&quot;</code> 相等。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">"LETMEWIN\n"</span>, buf))&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"good job :)\n"</span>);</div><div class="line">    system(<span class="string">"/bin/cat flag"</span>);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>查看 <a href="https://linux.die.net/man/2/read" target="_blank" rel="external">read</a> 函式知道可以將<code>檔案</code>寫入 buf 中。</p>
<p>因此可以將 <a href="https://en.wikipedia.org/wiki/File_descriptor" target="_blank" rel="external">File descriptor</a> 設為 <code>0</code> ，則可以將使用者輸入寫入 buf。</p>
<p>接著看到 fd 的值相當於執行程式的參數減去 <code>0x1234 (4660)</code>。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> fd = atoi( argv[<span class="number">1</span>] ) - <span class="number">0x1234</span>;</div></pre></td></tr></table></figure></p>
<p>因此首先執行 fd 且帶入 4660 參數 。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./fd 4660</div></pre></td></tr></table></figure></p>
<p>此時會等待使用者輸入，這時輸入 <code>LETMEWIN</code> 即可得到 flag 。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">LETMEWIN</div><div class="line">good job :)</div><div class="line">mommy! I think I know what a file descriptor is!!</div></pre></td></tr></table></figure></p>
<p>flag 就是 <code>mommy! I think I know what a file descriptor is!!</code> </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Mommy! what is a file descriptor in Linux?&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://jeno5980515.github.io/categories/Online-Judge/"/>
    
      <category term="Pwnable.kr" scheme="http://jeno5980515.github.io/categories/Online-Judge/Pwnable-kr/"/>
    
    
      <category term="Pwnable.kr" scheme="http://jeno5980515.github.io/tags/Pwnable-kr/"/>
    
      <category term="fd" scheme="http://jeno5980515.github.io/tags/fd/"/>
    
  </entry>
  
  <entry>
    <title>[JavaScript] forEach, map, reduce 實作</title>
    <link href="http://jeno5980515.github.io/2017/08/28/Programming%20Language/JavaScript/forEach,%20map,%20reduce%20%E5%AF%A6%E4%BD%9C/"/>
    <id>http://jeno5980515.github.io/2017/08/28/Programming Language/JavaScript/forEach, map, reduce 實作/</id>
    <published>2017-08-28T03:25:28.000Z</published>
    <updated>2017-08-28T03:29:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>紀錄一下內建函式的實作。</p>
<a id="more"></a>
<h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.forEach = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">  <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i ++ )&#123;</div><div class="line">    fn(<span class="keyword">this</span>[i], i);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.map = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> newArray = [];</div><div class="line">  <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length ; i++ )&#123;</div><div class="line">    newArray.push(fn(<span class="keyword">this</span>[i], i));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> newArray;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.reduce = <span class="function"><span class="keyword">function</span>(<span class="params">fn, initValue</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> result = initValue || <span class="keyword">this</span>[<span class="number">0</span>] ;</div><div class="line">  <span class="keyword">var</span> initIndex = initValue ? <span class="number">0</span> : <span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span> ( <span class="keyword">var</span> i = initIndex; i &lt; <span class="keyword">this</span>.length; i ++ )&#123;</div><div class="line">    result = fn(result, <span class="keyword">this</span>[i], i);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;紀錄一下內建函式的實作。&lt;/p&gt;
    
    </summary>
    
      <category term="Programming Language" scheme="http://jeno5980515.github.io/categories/Programming-Language/"/>
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/categories/Programming-Language/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>[Phoenix] Socket Server</title>
    <link href="http://jeno5980515.github.io/2017/08/05/Web/Phoenix/Socket%20Server/"/>
    <id>http://jeno5980515.github.io/2017/08/05/Web/Phoenix/Socket Server/</id>
    <published>2017-08-05T02:57:07.000Z</published>
    <updated>2017-08-05T06:43:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在用 <code>Elixir</code> 重寫阿瓦隆的伺服器，簡單記錄利用使用 <code>Phoenix</code> 這個框架使用 <code>Socket</code> 的心得。</p>
<a id="more"></a>
<h2 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h2><p>安裝好 <code>Elixir</code> 和 <code>Phoenix</code> 後先新增一個專案，在這邊先不用到資料庫因此先不安裝 <code>Ecto</code> 。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mix phoenix.new avalon_backend --no-ecto</div></pre></td></tr></table></figure></p>
<h2 id="遊戲大廳及使用者"><a href="#遊戲大廳及使用者" class="headerlink" title="遊戲大廳及使用者"></a>遊戲大廳及使用者</h2><p>在 <code>avalon_backend.ex</code> 新增一個 <code>worker</code> 用來開啟 <code>GenServer</code>。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># lib/avalon_backend.ex</span></div><div class="line">children = [</div><div class="line">  supervisor(AvalonBackend.Endpoint, []),</div><div class="line">  worker(AvalonBackend.UserModel, [%&#123;&#125;])</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>讓伺服器監聽 <code>game:lobby</code> 這個 <code>channel</code> 且讓 socket 在連接的時候給予 <code>id</code> 以便於之後的使用。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># web/channels/user_socket.ex</span></div><div class="line">channel <span class="string">"game:lobby"</span>, AvalonBackend.LobbyChannel</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span></span>(_params, socket) <span class="keyword">do</span></div><div class="line">  id = Enum.random(<span class="number">0</span>..<span class="number">1000</span>)</div><div class="line">  user = %&#123; <span class="symbol">:id</span> =&gt; id &#125;</div><div class="line">  socket = assign(socket, <span class="symbol">:user</span>, user)</div><div class="line">  &#123;<span class="symbol">:ok</span>, socket&#125;</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>在 <code>lobby_channel.ex</code> 定義 channel 在特定事件中所會觸發的事件。</p>
<p>使用者加入會將使用者保存起來，若離開則會移除該使用者，並將當前在 <code>game:lobby</code> 頻道的使用者 <code>broadcast</code> 給該頻道的所有人。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># web/channels/lobby_channel.ex</span></div><div class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">AvalonBackend</span></span>.LobbyChannel <span class="keyword">do</span></div><div class="line">  <span class="keyword">use</span> AvalonBackend.Web, <span class="symbol">:channel</span></div><div class="line">  <span class="keyword">alias</span> AvalonBackend.UserModel</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">join</span></span>(<span class="string">"game:lobby"</span>, _payload, socket) <span class="keyword">do</span></div><div class="line">    user = socket.assigns.user</div><div class="line">    users = UserModel.user_joined(<span class="string">"game:lobby"</span>, user)[<span class="string">"game:lobby"</span>]</div><div class="line">    send <span class="keyword">self</span>(), &#123;<span class="symbol">:after_join</span>, users&#125;</div><div class="line">    &#123;<span class="symbol">:ok</span>, socket&#125;</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">terminate</span></span>(_reason, socket) <span class="keyword">do</span></div><div class="line">    user_id = socket.assigns.user.id</div><div class="line">    users = UserModel.user_left(<span class="string">"game:lobby"</span>, user_id)[<span class="string">"game:lobby"</span>]</div><div class="line">    lobby_update(socket, users)</div><div class="line">    <span class="symbol">:ok</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">handle_info</span></span>(&#123;<span class="symbol">:after_join</span>, users&#125;, socket) <span class="keyword">do</span></div><div class="line">    lobby_update(socket, users)</div><div class="line">    &#123;<span class="symbol">:noreply</span>, socket&#125;</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">lobby_update</span></span>(socket, users) <span class="keyword">do</span></div><div class="line">    broadcast! socket, <span class="string">"lobby_update"</span>, %&#123; <span class="symbol">users:</span> get_users_id(users) &#125;</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">get_users_id</span></span>(<span class="keyword">nil</span>), <span class="symbol">do:</span> []</div><div class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">get_users_id</span></span>(users) <span class="keyword">do</span></div><div class="line">    Enum.map users, &amp;(&amp;<span class="number">1</span>.id)</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>由於 Elixir 沒有全域變數，在儲存變數的需求下我們必須透過 <code>GenServer</code> ， 在這邊利用 <code>Map</code> 型態來保存所有使用者。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># web/models/user_model.ex</span></div><div class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">AvalonBackend</span></span>.UserModel <span class="keyword">do</span></div><div class="line">  <span class="keyword">use</span> GenServer</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">start_link</span></span>(initial_state) <span class="keyword">do</span></div><div class="line">   GenServer.start_link(__MODULE_<span class="number">_</span>, initial_state, <span class="symbol">name:</span> __MODULE_<span class="number">_</span>)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">user_joined</span></span>(channel, user) <span class="keyword">do</span></div><div class="line">   GenServer.call(__MODULE_<span class="number">_</span>, &#123;<span class="symbol">:user_joined</span>, channel, user&#125;)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">user_left</span></span>(channel, user_id) <span class="keyword">do</span></div><div class="line">    GenServer.call(__MODULE_<span class="number">_</span>, &#123;<span class="symbol">:user_left</span>, channel, user_id&#125;)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="comment"># GenServer implementation</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">handle_call</span></span>(&#123;<span class="symbol">:user_joined</span>, channel, user&#125;, _from, state) <span class="keyword">do</span></div><div class="line">    new_state = <span class="keyword">case</span> Map.get(state, channel) <span class="keyword">do</span></div><div class="line">      <span class="keyword">nil</span> -&gt;</div><div class="line">        Map.put(state, channel, [user])</div><div class="line">      users -&gt;</div><div class="line">        Map.put(state, channel, Enum.uniq([user | users]))</div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    &#123;<span class="symbol">:reply</span>, new_state, new_state&#125;</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">handle_call</span></span>(&#123;<span class="symbol">:user_left</span>, channel, user_id&#125;, _from, state) <span class="keyword">do</span></div><div class="line">    new_users = state</div><div class="line">      |&gt; Map.get(channel)</div><div class="line">      |&gt; Enum.reject(&amp;(&amp;<span class="number">1</span>.id == user_id))</div><div class="line"></div><div class="line">    new_state = Map.update!(state, channel, <span class="keyword">fn</span>(<span class="number">_</span>) -&gt; new_users <span class="keyword">end</span>)</div><div class="line"></div><div class="line">    &#123;<span class="symbol">:reply</span>, new_state, new_state&#125;</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>在 client 端引入自己攥寫的 <code>socket.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// web/static/js/app.js</span></div><div class="line"><span class="keyword">import</span> socket <span class="keyword">from</span> <span class="string">"./socket"</span></div></pre></td></tr></table></figure></p>
<p>首先引入來自 <code>Phoenix</code> 的 <code>Socket</code> ，讓該 socket 連接 <code>game:lobby</code> ，並監聽 <code>lobby_update</code> 事件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// web/static/js/socket.js</span></div><div class="line"><span class="keyword">import</span> &#123;Socket&#125; <span class="keyword">from</span> <span class="string">"phoenix"</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> socket = <span class="keyword">new</span> Socket(<span class="string">"/socket"</span>)</div><div class="line">socket.connect()</div><div class="line"></div><div class="line"><span class="comment">// Now that you are connected, you can join channels with a topic:</span></div><div class="line"><span class="keyword">let</span> channel = socket.channel(<span class="string">"game:lobby"</span>, &#123;&#125;)</div><div class="line">channel.on(<span class="string">'lobby_update'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">resp</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(resp);</div><div class="line">&#125;);</div><div class="line">channel.join()</div><div class="line">  .receive(<span class="string">"ok"</span>, resp =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">"Joined successfully"</span>, resp) &#125;)</div><div class="line">  .receive(<span class="string">"error"</span>, resp =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">"Unable to join"</span>, resp) &#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> socket</div></pre></td></tr></table></figure></p>
<h2 id="傳送訊息給特定使用者"><a href="#傳送訊息給特定使用者" class="headerlink" title="傳送訊息給特定使用者"></a>傳送訊息給特定使用者</h2><p>透過將不同使用者加入到自己獨立的 <code>channel</code> ，透過 <code>broadcast</code> 該頻道的方式來對該使用者發出事件。</p>
<p>在 Server 端產生完 id 後，回傳 id 給 client 端。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># web/channel/lobby_channel.ex</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">join</span></span>(<span class="string">"game:lobby"</span>, _payload, socket) <span class="keyword">do</span></div><div class="line">  user = socket.assigns.user</div><div class="line">  users = UserModel.user_joined(<span class="string">"game:lobby"</span>, user)[<span class="string">"game:lobby"</span>]</div><div class="line">  send <span class="keyword">self</span>(), &#123;<span class="symbol">:after_join</span>, users&#125;</div><div class="line">  &#123;<span class="symbol">:ok</span>, %&#123; <span class="symbol">id:</span> user.id &#125;, socket&#125;</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>當 client 端接受 id 後則連接該 id 的頻道 。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// web/static/js/socket.js</span></div><div class="line"><span class="keyword">import</span> &#123;Socket&#125; <span class="keyword">from</span> <span class="string">"phoenix"</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> socket = <span class="keyword">new</span> Socket(<span class="string">"/socket"</span>)</div><div class="line">socket.connect()</div><div class="line"></div><div class="line"><span class="keyword">let</span> channel = socket.channel(<span class="string">"game:lobby"</span>, &#123;&#125;)</div><div class="line"><span class="keyword">let</span> userChannel;</div><div class="line">channel.on(<span class="string">'lobby_update'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(response);</div><div class="line">&#125;);</div><div class="line">channel.join()</div><div class="line">  .receive(<span class="string">"ok"</span>, resp =&gt; &#123; </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Joined successfully"</span>, resp) </div><div class="line">    userChannel = socket.channel(<span class="string">"user:"</span> + resp.id);</div><div class="line">    userChannel.on(<span class="string">"message"</span>, msg =&gt; <span class="built_in">console</span>.log(msg) )</div><div class="line">    userChannel.join()</div><div class="line">      .receive(<span class="string">"ok"</span>, resp =&gt; <span class="built_in">console</span>.log(<span class="string">"joined private user channel"</span>) )</div><div class="line">      .receive(<span class="string">"error"</span>, err =&gt; <span class="built_in">console</span>.log(err));</div><div class="line">  &#125;)</div><div class="line">  .receive(<span class="string">"error"</span>, resp =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">"Unable to join"</span>, resp) &#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> socket</div></pre></td></tr></table></figure></p>
<p>新增使用者專屬的 channel ，並當接受 message 事件時，發送訊息到該指定 user 。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># web/channels/user_socket.ex</span></div><div class="line">channel <span class="string">"user:*"</span>, AvalonBackend.UserChannel</div><div class="line"></div><div class="line"><span class="comment"># web/channels/user_channel.ex</span></div><div class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">AvalonBackend</span></span>.UserChannel <span class="keyword">do</span></div><div class="line">  <span class="keyword">use</span> AvalonBackend.Web, <span class="symbol">:channel</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">join</span></span>(<span class="string">"user:"</span> &lt;&gt; _id, _payload, socket) <span class="keyword">do</span></div><div class="line">    &#123;<span class="symbol">:ok</span>, socket&#125;</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">handle_in</span></span>(<span class="string">"message"</span>, %&#123;<span class="string">"id"</span> =&gt; id, <span class="string">"message"</span> =&gt; message &#125;, socket) <span class="keyword">do</span></div><div class="line">    AvalonBackend.Endpoint.broadcast <span class="string">"user:"</span> &lt;&gt; id, <span class="string">"message"</span>, %&#123; <span class="symbol">message:</span> message &#125;</div><div class="line">    &#123;<span class="symbol">:noreply</span>, socket&#125;</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>在 client 新增輸入欄讓使用者可以輸入 id 及 message 來發送。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- web/templates/layout/app.html.eex --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"idInput"</span> <span class="attr">placeholder</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"messageInput"</span> <span class="attr">placeholder</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"submitButton"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// web/static/js/socket.js</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'submitButton'</span>).addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</div><div class="line">  <span class="keyword">let</span> args = &#123;</div><div class="line">    <span class="attr">id</span> : <span class="built_in">document</span>.getElementById(<span class="string">'idInput'</span>).value,</div><div class="line">    <span class="attr">message</span> : <span class="built_in">document</span>.getElementById(<span class="string">'messageInput'</span>).value</div><div class="line">  &#125;</div><div class="line">  userChannel.push(<span class="string">'message'</span>, args)</div><div class="line">    .receive(<span class="string">'ok'</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'success'</span>))</div><div class="line">    .receive(<span class="string">'error'</span>, (e) =&gt; <span class="built_in">console</span>.log(e));</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>如此一來基本的 Server 功能就完成了。</p>
<h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p><a href="https://github.com/avalon-ng/avalon_backend" target="_blank" rel="external">avalon-ng/avalon_backend</a></p>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p><a href="https://quickleft.com/blog/creating-game-lobby-system-phoenix-websockets/" target="_blank" rel="external">Creating a Game Lobby System in Phoenix with Websockets</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在用 &lt;code&gt;Elixir&lt;/code&gt; 重寫阿瓦隆的伺服器，簡單記錄利用使用 &lt;code&gt;Phoenix&lt;/code&gt; 這個框架使用 &lt;code&gt;Socket&lt;/code&gt; 的心得。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://jeno5980515.github.io/categories/Web/"/>
    
      <category term="Phoenix" scheme="http://jeno5980515.github.io/categories/Web/Phoenix/"/>
    
    
      <category term="Socket" scheme="http://jeno5980515.github.io/tags/Socket/"/>
    
      <category term="Phoenix" scheme="http://jeno5980515.github.io/tags/Phoenix/"/>
    
      <category term="Elixir" scheme="http://jeno5980515.github.io/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>[JavaScript] Symbol</title>
    <link href="http://jeno5980515.github.io/2017/07/26/Programming%20Language/JavaScript/Symbol/"/>
    <id>http://jeno5980515.github.io/2017/07/26/Programming Language/JavaScript/Symbol/</id>
    <published>2017-07-26T06:13:24.000Z</published>
    <updated>2017-07-26T06:45:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>研究了下 <code>Symbol</code> 的實際用處，在此紀錄一下。</p>
<a id="more"></a>
<h2 id="Private"><a href="#Private" class="headerlink" title="Private"></a>Private</h2><p>Symbol 可讓物件有 <code>Private</code> 屬性，讓 Symbol 在遍歷的情況下不出現。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>();</div><div class="line"><span class="keyword">let</span> o = &#123;&#125;;</div><div class="line">o[sym] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> o )&#123;</div><div class="line">  <span class="built_in">console</span>.log(key);   <span class="comment">// nothing</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(o).length); <span class="comment">// 0</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(o)); <span class="comment">// &#123;&#125; </span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(o)); <span class="comment">// []</span></div></pre></td></tr></table></figure></p>
<p>若需要取得 Symbol 可以透過 <code>getOwnPropertySymbols</code> 。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(o)); <span class="comment">// [ Symbol() ]</span></div></pre></td></tr></table></figure></p>
<h2 id="Unique"><a href="#Unique" class="headerlink" title="Unique"></a>Unique</h2><p>每一個 Symbol 都是獨立的。</p>
<p>像 <code>Object</code> 一樣，即使兩個完全相同的 Object 但由於 <code>reference</code> 的不同而不同，因此可以藉由此特性來避免屬性衝突的問題。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Symbol</span>(<span class="string">'1'</span>) === <span class="built_in">Symbol</span>(<span class="string">'1'</span>) <span class="comment">// false</span></div></pre></td></tr></table></figure></p>
<h2 id="Global"><a href="#Global" class="headerlink" title="Global"></a>Global</h2><p>可以註冊 Symbol 在整個環境裡，如此一來同一個屬性的 Symbol 只會有同一個。</p>
<p><code>Symbol.for()</code> 會查看有沒有該屬性的 Symbol 存在，有就返回該 Symbol ， 無則註冊一個。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>.for(<span class="string">'123'</span>);</div><div class="line"><span class="keyword">let</span> sym2 = <span class="built_in">Symbol</span>.for(<span class="string">'123'</span>);</div><div class="line"><span class="built_in">console</span>.log(sym === sym2); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(sym)); <span class="comment">// 123</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;研究了下 &lt;code&gt;Symbol&lt;/code&gt; 的實際用處，在此紀錄一下。&lt;/p&gt;
    
    </summary>
    
      <category term="Programming Language" scheme="http://jeno5980515.github.io/categories/Programming-Language/"/>
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/categories/Programming-Language/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/tags/JavaScript/"/>
    
      <category term="Symbol" scheme="http://jeno5980515.github.io/tags/Symbol/"/>
    
  </entry>
  
  <entry>
    <title>[JavaScript] Method Chaining</title>
    <link href="http://jeno5980515.github.io/2017/07/23/Programming%20Language/JavaScript/Method%20Chaining/"/>
    <id>http://jeno5980515.github.io/2017/07/23/Programming Language/JavaScript/Method Chaining/</id>
    <published>2017-07-23T11:24:20.000Z</published>
    <updated>2017-07-23T11:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在寫 <a href="https://www.npmjs.com/package/canvas-factory" target="_blank" rel="external">canvas-factory</a> ，主要是一個把其他函式庫的功能整合到 <code>Canvas</code> 上的一個套件，像是製作 <code>GIF</code> 、 <code>MP4</code> 等等。其中想要把 API 寫成 <code>Chaining</code> 的形式，但其中又有許多非同步的操作，在此紀錄一下實現結果。</p>
<a id="more"></a>
<h2 id="Method-Chaining"><a href="#Method-Chaining" class="headerlink" title="Method Chaining"></a>Method Chaining</h2><p>若想要達到 <code>Method Chaining</code> 的效果，只要在函式中回傳自己即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> number = n;</div><div class="line">  <span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    number += n;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.sub = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    number -= n;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.toValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> number;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(foo(<span class="number">1</span>).add(<span class="number">1</span>).add(<span class="number">1</span>).sub(<span class="number">1</span>).add(<span class="number">1</span>).toValue());</div></pre></td></tr></table></figure></p>
<h2 id="Async-Method-Chaining"><a href="#Async-Method-Chaining" class="headerlink" title="Async Method Chaining"></a>Async Method Chaining</h2><p>若想要把非同步的事件也串起來，我們可以使用 <code>Promise</code> 的概念，把函式存起來且記錄狀態。</p>
<p>使用 <code>handle</code> 、 <code>fulfill</code> 和 <code>resolve</code> 分別來處理欲執行的函式。</p>
<p>首先將所有 <code>public method</code> 都利用 <code>handle</code> 包一層，執行完該程式則呼叫 <code>fulfill</code> 。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.addAsync = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> handle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      number += n;</div><div class="line">      fulfill();</div><div class="line">    &#125;,<span class="number">500</span>);</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>handle</code> 中只把該函式存起來而不執行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">  queue.push(fn);</div><div class="line">  <span class="keyword">return</span> resolve();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>resolve</code> 中判斷當前狀態去執行函式，一樣回傳自己來繼續串下去。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> resolve = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span> ( queue.length !== <span class="number">0</span> &amp;&amp; !isPending )&#123;</div><div class="line">    isPending = <span class="literal">true</span>;</div><div class="line">    queue[<span class="number">0</span>]();</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;.bind(<span class="keyword">this</span>);</div></pre></td></tr></table></figure></p>
<p><code>fulfill</code> 中代表當前執行的函式執行完畢，呼叫 <code>resolve</code> 繼續執行下一個。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fulfill</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  isPending = <span class="literal">false</span>;</div><div class="line">  queue.shift();</div><div class="line">  resolve();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Foo = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> isPending = <span class="literal">false</span>;</div><div class="line">  <span class="keyword">var</span> queue = [];</div><div class="line">  <span class="keyword">var</span> number = n;</div><div class="line">  <span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> handle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      number += n;</div><div class="line">      fulfill();</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.sub = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;    </div><div class="line">    <span class="keyword">return</span> handle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      number -= n;</div><div class="line">      fulfill();</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.addAsync = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> handle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        number += n;</div><div class="line">        fulfill();</div><div class="line">      &#125;,<span class="number">500</span>);</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.getValue = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> handle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      fn(number);</div><div class="line">      fulfill();</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">    queue.push(fn);</div><div class="line">    <span class="keyword">return</span> resolve();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fulfill</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    isPending = <span class="literal">false</span>;</div><div class="line">    queue.shift();</div><div class="line">    resolve();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> resolve = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> ( queue.length !== <span class="number">0</span> &amp;&amp; !isPending )&#123;</div><div class="line">      isPending = <span class="literal">true</span>;</div><div class="line">      queue[<span class="number">0</span>]();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;.bind(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> Foo(<span class="number">1</span>);</div><div class="line"></div><div class="line">foo</div><div class="line">  .add(<span class="number">1</span>)</div><div class="line">  .addAsync(<span class="number">1</span>)</div><div class="line">  .sub(<span class="number">1</span>)</div><div class="line">  .addAsync(<span class="number">1</span>)</div><div class="line">  .getValue(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(value);</div><div class="line">  &#125;)</div><div class="line">  .add(<span class="number">1</span>)</div><div class="line">  .addAsync(<span class="number">1</span>)  </div><div class="line">  .getValue(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(value);</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">foo</div><div class="line">  .add(<span class="number">1</span>)</div><div class="line">  .addAsync(<span class="number">1</span>)</div><div class="line">  .getValue(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(value);</div><div class="line">  &#125;)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在寫 &lt;a href=&quot;https://www.npmjs.com/package/canvas-factory&quot;&gt;canvas-factory&lt;/a&gt; ，主要是一個把其他函式庫的功能整合到 &lt;code&gt;Canvas&lt;/code&gt; 上的一個套件，像是製作 &lt;code&gt;GIF&lt;/code&gt; 、 &lt;code&gt;MP4&lt;/code&gt; 等等。其中想要把 API 寫成 &lt;code&gt;Chaining&lt;/code&gt; 的形式，但其中又有許多非同步的操作，在此紀錄一下實現結果。&lt;/p&gt;
    
    </summary>
    
      <category term="Programming Language" scheme="http://jeno5980515.github.io/categories/Programming-Language/"/>
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/categories/Programming-Language/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/tags/JavaScript/"/>
    
      <category term="Method Chaining" scheme="http://jeno5980515.github.io/tags/Method-Chaining/"/>
    
  </entry>
  
  <entry>
    <title>[Redux] Redux 實作</title>
    <link href="http://jeno5980515.github.io/2017/05/22/Web/Redux/Redux%20%E5%AF%A6%E4%BD%9C/"/>
    <id>http://jeno5980515.github.io/2017/05/22/Web/Redux/Redux 實作/</id>
    <published>2017-05-22T08:24:47.000Z</published>
    <updated>2017-05-23T07:24:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前陣子寫的<code>Redux</code>解析感覺寫不清楚，因此重寫一篇如何實作<code>Redux</code>。</p>
<p>這邊必須對<code>Redux</code>有些基本認識，而實作的部分都先不做錯誤處理。</p>
<a id="more"></a>
<hr>
<h2 id="createStore"><a href="#createStore" class="headerlink" title="createStore"></a>createStore</h2><p>首先從<code>createStore</code>的部分開始，在實做<code>createStore</code>前先如同往常寫好一個<code>reducer</code>並把他傳入<code>createStore</code>中，並對他發出一個有效的<code>action</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params"> state = <span class="number">0</span> , action </span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">switch</span> ( action.type )&#123;</div><div class="line">		<span class="keyword">case</span> <span class="string">'ADD'</span>:</div><div class="line">			<span class="keyword">return</span> state + action.payload ;</div><div class="line">		<span class="keyword">default</span> :</div><div class="line">			<span class="keyword">return</span> state ;</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> store = createStore(reducer) ;</div><div class="line"><span class="built_in">console</span>.log(store.getState()); <span class="comment">// 0</span></div><div class="line">store.dispatch(&#123;</div><div class="line">	<span class="attr">type</span> : <span class="string">'ADD'</span>,</div><div class="line">	<span class="attr">payload</span> : <span class="number">1</span> </div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(store.getState()); <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<p>接下來開始實做<code>createStore</code>，首先先建立<code>getState</code>和<code>dispatch</code>函式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStore = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">	<span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">const</span> dispatch = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		getState ,</div><div class="line">		dispatch </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下來紀錄傳進來的<code>reducer</code>和<code>state</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer,state</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> nowReducer = reducer ;</div><div class="line">	<span class="keyword">let</span> nowState = state ;</div><div class="line">	<span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">const</span> dispatch = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">	&#125;	</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		getState ,</div><div class="line">		dispatch </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="getState"><a href="#getState" class="headerlink" title="getState"></a>getState</h3><p><code>getState</code>只要簡單回傳<code>nowState</code>即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer,state</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> nowReducer = reducer ;</div><div class="line">	<span class="keyword">let</span> nowState = state ;</div><div class="line">	<span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">		<span class="keyword">return</span> nowState ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">const</span> dispatch = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">	&#125;	</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		getState ,</div><div class="line">		dispatch </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="dispatch"><a href="#dispatch" class="headerlink" title="dispatch"></a>dispatch</h3><p><code>dispatch</code>接受<code>action</code>把它丟給<code>reducer</code>處理，並將<code>nowState</code>替換成運算後的<code>state</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer,state</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> nowReducer = reducer ;</div><div class="line">	<span class="keyword">let</span> nowState = state ;</div><div class="line">	<span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">		<span class="keyword">return</span> nowState ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">		nowState = nowReducer(nowState,action) ;</div><div class="line">	&#125;	</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		getState ,</div><div class="line">		dispatch </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>為了有初始狀態，先發送一個不會被處理的<code>action</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer,state</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> nowReducer = reducer ;</div><div class="line">	<span class="keyword">let</span> nowState = state ;</div><div class="line">	<span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">		<span class="keyword">return</span> nowState ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">		nowState = nowReducer(nowState,action) ;</div><div class="line">	&#125;	</div><div class="line">	dispatch(&#123; <span class="attr">type</span> : <span class="string">'INIT'</span> &#125;) ;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		getState ,</div><div class="line">		dispatch </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如此一來簡單的<code>createStore</code>就可以運行了。</p>
<h3 id="subscribe"><a href="#subscribe" class="headerlink" title="subscribe"></a>subscribe</h3><p><code>subscribe</code>讓你可以讓你綁定函式在<code>dispatch</code>後執行，同時回傳一個<code>unsubscribe</code>函式讓你可以取消綁定。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> listener = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'Now state: '</span>,store.getState()) ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> store = createStore(reducer) ;</div><div class="line"><span class="keyword">let</span> unsubscribe = store.subscribe(listener) ;</div><div class="line">store.dispatch(&#123; <span class="attr">type</span> : <span class="string">'ADD'</span> , <span class="attr">payload</span> : <span class="number">1</span> &#125;);</div><div class="line">unsubscribe();</div><div class="line">store.dispatch(&#123; <span class="attr">type</span> : <span class="string">'ADD'</span> , <span class="attr">payload</span> : <span class="number">1</span> &#125;);</div><div class="line"><span class="built_in">console</span>.log(store.getState());</div></pre></td></tr></table></figure></p>
<p>首先額外建立一個陣列來保存<code>subscribe</code>的所有函式，並建立<code>subscribe</code>函式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer,state</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> nowReducer = reducer ;</div><div class="line">	<span class="keyword">let</span> nowState = state ;</div><div class="line">	<span class="keyword">let</span> nowListener = [] ;</div><div class="line">	<span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">		<span class="keyword">return</span> nowState ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">		nowState = nowReducer(nowState,action) ;</div><div class="line">	&#125;	</div><div class="line">	<span class="keyword">const</span> subscribe = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	dispatch(&#123; <span class="attr">type</span> : <span class="string">'INIT'</span> &#125;) ;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		getState ,</div><div class="line">		dispatch ,</div><div class="line">		subscribe </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下來在只要註冊事件就把該函式放入<code>nowListener</code>並回傳一個函式用來註銷。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer,state</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> nowReducer = reducer ;</div><div class="line">	<span class="keyword">let</span> nowState = state ;</div><div class="line">	<span class="keyword">let</span> nowListeners = [] ;</div><div class="line">	<span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">		<span class="keyword">return</span> nowState ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">		nowState = nowReducer(nowState,action) ;</div><div class="line">		nowListeners.forEach(<span class="function">(<span class="params">listener</span>) =&gt;</span> listener());</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">const</span> subscribe = <span class="function">(<span class="params">listener</span>) =&gt;</span> &#123;</div><div class="line">		nowListeners.push(listener) ;</div><div class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			nowListeners.splice(nowListeners.indexOf(listener),<span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	dispatch(&#123; <span class="attr">type</span> : <span class="string">'INIT'</span> &#125;) ;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		getState ,</div><div class="line">		dispatch ,</div><div class="line">		subscribe </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>Redux</code>在<code>subscribe</code>部分會維持兩個陣列，一個是上次<code>dispatch</code>後的註冊事件，另一個則是在下次<code>dispatch</code>前新註冊的所有事件，這兩個事件陣列會在<code>dispatch</code>後同步，在這邊不實作這部分。</p>
<h3 id="replaceReducer"><a href="#replaceReducer" class="headerlink" title="replaceReducer"></a>replaceReducer</h3><p>將傳進來的<code>reducer</code>和目前的<code>reducer</code>替換<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params"> state = <span class="number">0</span> , action </span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">switch</span> ( action.type )&#123;</div><div class="line">		<span class="keyword">case</span> <span class="string">'ADD'</span>:</div><div class="line">			<span class="keyword">return</span> state + action.payload ;</div><div class="line">		<span class="keyword">default</span> :</div><div class="line">			<span class="keyword">return</span> state ;</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> newReducer = <span class="function">(<span class="params"> state = <span class="number">0</span> , action </span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">switch</span> ( action.type )&#123;</div><div class="line">		<span class="keyword">case</span> <span class="string">'ADD'</span>:</div><div class="line">			<span class="keyword">return</span> state + action.payload * <span class="number">2</span> ;</div><div class="line">		<span class="keyword">default</span> :</div><div class="line">			<span class="keyword">return</span> state ;</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> store = createStore(reducer) ;</div><div class="line">store.dispatch(&#123; <span class="attr">type</span> : <span class="string">'ADD'</span> , <span class="attr">payload</span> : <span class="number">1</span> &#125;);</div><div class="line">store.replaceReducer(newReducer);</div><div class="line">store.dispatch(&#123; <span class="attr">type</span> : <span class="string">'ADD'</span> , <span class="attr">payload</span> : <span class="number">1</span> &#125;);</div><div class="line"><span class="built_in">console</span>.log(store.getState()); <span class="comment">// 3</span></div></pre></td></tr></table></figure></p>
<p>只要把<code>nowReducer</code>替換成傳進來的<code>reducer</code>即可，替換後要發出初始<code>action</code>來獲得初始狀態。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer,state</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> nowReducer = reducer ;</div><div class="line">	<span class="keyword">let</span> nowState = state ;</div><div class="line">	<span class="keyword">let</span> nowListeners = [] ;</div><div class="line">	<span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">		<span class="keyword">return</span> nowState ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">		nowState = nowReducer(nowState,action) ;</div><div class="line">		nowListeners.forEach(<span class="function">(<span class="params">listener</span>) =&gt;</span> listener());</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">const</span> subscribe = <span class="function">(<span class="params">listener</span>) =&gt;</span> &#123;</div><div class="line">		nowListeners.push(listener) ;</div><div class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			nowListeners.splice(nowListeners.indexOf(listener),<span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">const</span> replaceReducer = <span class="function">(<span class="params">reducer</span>) =&gt;</span> &#123;</div><div class="line">		nowReducer = reducer ;</div><div class="line">		dispatch(&#123; <span class="attr">type</span> : <span class="string">'INIT'</span> &#125;) ;</div><div class="line">	&#125;</div><div class="line">	dispatch(&#123; <span class="attr">type</span> : <span class="string">'INIT'</span> &#125;) ;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		getState ,</div><div class="line">		dispatch ,</div><div class="line">		subscribe ,</div><div class="line">		replaceReducer</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如此一來基本的<code>createStore</code>就實作完成了，接下來實作<code>combineReducer</code>的部分。</p>
<hr>
<h2 id="combineReducer"><a href="#combineReducer" class="headerlink" title="combineReducer"></a>combineReducer</h2><p>由於<code>reducer</code>可能不只一個，因此必須將<code>reducers</code>合併為一個。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">const</span> personReducer = <span class="function">(<span class="params"> state = &#123;&#125; , action </span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">switch</span> ( action.type )&#123;</div><div class="line">		<span class="keyword">case</span> <span class="string">'NAME'</span>:</div><div class="line">			<span class="keyword">return</span> &#123;...state, <span class="attr">name</span> : action.payload &#125;;</div><div class="line">		<span class="keyword">case</span> <span class="string">'AGE'</span>:</div><div class="line">			<span class="keyword">return</span> &#123;...state, <span class="attr">age</span> : action.payload &#125; ;</div><div class="line">		<span class="keyword">default</span> :</div><div class="line">			<span class="keyword">return</span> state ;</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> todoReducer = <span class="function">(<span class="params"> state = [] , action </span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">switch</span> ( action.type )&#123;</div><div class="line">		<span class="keyword">case</span> <span class="string">'ADD'</span>:</div><div class="line">			<span class="keyword">return</span> [...state,action.payload] ;</div><div class="line">		<span class="keyword">default</span> :</div><div class="line">			<span class="keyword">return</span> state ;</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> reducer = combineReducer(&#123;</div><div class="line">	personReducer ,</div><div class="line">	todoReducer</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">let</span> store = createStore(reducer) ;</div><div class="line">store.dispatch(&#123; <span class="attr">type</span> : <span class="string">'NAME'</span> , <span class="attr">payload</span> : <span class="string">'Jeno'</span> &#125;);</div><div class="line">store.dispatch(&#123; <span class="attr">type</span> : <span class="string">'AGE'</span> , <span class="attr">payload</span> : <span class="number">22</span> &#125;);</div><div class="line">store.dispatch(&#123; <span class="attr">type</span> : <span class="string">'ADD'</span> , <span class="attr">payload</span> : <span class="string">'Coding'</span> &#125;);</div><div class="line"><span class="built_in">console</span>.log(store.getState());</div></pre></td></tr></table></figure>
<p>接下來實作<code>combineReducer</code>的部分，首先我們先回傳一個函式來代表合併的<code>reducer</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> combineReducer = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下來一樣如同一般的<code>reducer</code>一樣接受<code>state</code>及<code>action</code>，在這邊創建一個新的<code>newState</code>回傳。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> combineReducer = <span class="function">(<span class="params">reducers</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">state = &#123;&#125; , action</span>)</span>&#123;</div><div class="line">		<span class="keyword">let</span> newState = &#123;&#125;;</div><div class="line">		<span class="keyword">return</span> newState ;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下來就是遍歷整個<code>reducers</code>，並將傳入中<code>action</code>和相對應的<code>state</code>傳入該<code>reducer</code>得到的狀態放在<code>newState</code>並回傳<code>newState</code>即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 這時候 reducers 物件的內容</span></div><div class="line">reducers = &#123;</div><div class="line">	personReducer : function( state = &#123;&#125; , action )&#123;</div><div class="line">		switch ( action.type )&#123;</div><div class="line">			case 'NAME':</div><div class="line">				return &#123;...state, name : action.payload &#125;;</div><div class="line">			case 'AGE':</div><div class="line">				return &#123;...state, age : action.payload &#125; ;</div><div class="line">			default :</div><div class="line">				return state ;</div><div class="line">		&#125;	</div><div class="line">	&#125;,</div><div class="line">	todoReducer : function( state = [] , action )&#123;</div><div class="line">		switch ( action.type )&#123;</div><div class="line">			case 'ADD':</div><div class="line">				return [...state,action.payload] ;</div><div class="line">			default :</div><div class="line">				return state ;</div><div class="line">		&#125;	</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"><span class="keyword">const</span> combineReducer = <span class="function">(<span class="params">reducers</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">state = &#123;&#125; , action</span>)</span>&#123;</div><div class="line">		<span class="keyword">let</span> newState = &#123;&#125;;</div><div class="line">		<span class="keyword">for</span> ( <span class="keyword">let</span> key <span class="keyword">in</span> reducers ) &#123;</div><div class="line">			newState[key] = reducers[key](state[key],action) ;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> newState ;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="bindActionCreators"><a href="#bindActionCreators" class="headerlink" title="bindActionCreators"></a>bindActionCreators</h2><p><code>bindActionCreators</code>可以直接把創造<code>action</code>的函式直接和<code>dispatch</code>綁在一起。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> setPersonName = <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">type</span> : <span class="string">'NAME'</span> ,</div><div class="line">		<span class="attr">payload</span> : name </div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> setPersonAge = <span class="function">(<span class="params">age</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">type</span> : <span class="string">'AGE'</span> ,</div><div class="line">		<span class="attr">payload</span> : age </div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> addTodo = <span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">type</span> : <span class="string">'ADD'</span> ,</div><div class="line">		<span class="attr">payload</span> : text </div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> boundActionCreators = bindActionCreators(&#123; setPersonName , setPersonAge , addTodo &#125;,store.dispatch) ;</div><div class="line">boundActionCreators.addTodo(<span class="string">'Coding'</span>) ;</div><div class="line">boundActionCreators.setPersonAge(<span class="number">22</span>);</div><div class="line">boundActionCreators.setPersonName(<span class="string">'Jeno'</span>);</div><div class="line"><span class="built_in">console</span>.log(store.getState());</div></pre></td></tr></table></figure></p>
<p>接下來是實作的部分，我們首先創建一個空物件<code>boundActionCreators</code>並回傳。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> bindActionCreators = <span class="function">(<span class="params">actionCreators,dispatch</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> boundActionCreators = &#123;&#125; ;</div><div class="line">	<span class="keyword">return</span> boundActionCreators ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再來遍歷<code>actionCreators</code>並把相對應的<code>key</code>宣告為函式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 這時 actionCreators 的內容</span></div><div class="line">actionCreators = &#123;</div><div class="line">	setPersonName : function(name)&#123;</div><div class="line">		return &#123;</div><div class="line">			type : 'NAME' ,</div><div class="line">			payload : name </div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line">	setPersonAge : function(age)&#123;</div><div class="line">		return &#123;</div><div class="line">			type : 'AGE' ,</div><div class="line">			payload : age </div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line">	addTodo : function(text)&#123;</div><div class="line">		return &#123;</div><div class="line">			type : 'ADD' ,</div><div class="line">			payload : text </div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">const</span> bindActionCreators = <span class="function">(<span class="params">actionCreators,dispatch</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> boundActionCreators = &#123;&#125; ;</div><div class="line">	<span class="keyword">for</span> ( <span class="keyword">let</span> key <span class="keyword">in</span> actionCreators )&#123;</div><div class="line">		boundActionCreators[key] = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> boundActionCreators ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>該函式的內容則是直接利用<code>dispatch</code>去發出該函式回傳的<code>action</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> bindActionCreators = <span class="function">(<span class="params">actionCreators,dispatch</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> boundActionCreators = &#123;&#125; ;</div><div class="line">	<span class="keyword">for</span> ( <span class="keyword">let</span> key <span class="keyword">in</span> actionCreators )&#123;</div><div class="line">		boundActionCreators[key] = <span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</div><div class="line">			dispatch(actionCreators[key](payload)) ;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> boundActionCreators ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="applyMiddleware"><a href="#applyMiddleware" class="headerlink" title="applyMiddleware"></a>applyMiddleware</h2><p><code>applyMiddleware</code>可以將<code>dispacth</code>包裝起來，如同洋蔥一樣必須一層一層透過<code>middlewares</code>才會到最後的<code>store.dispatch</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> middleware1 = <span class="function">(<span class="params">middlewareAPI</span>) =&gt;</span> (next) =&gt; <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware 1, my next is '</span>,next) ;</div><div class="line">	<span class="keyword">return</span> next(action) ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> middleware2 = <span class="function">(<span class="params">middlewareAPI</span>) =&gt;</span> (next) =&gt; <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware 2, my next is '</span>,next) ;</div><div class="line">	<span class="keyword">return</span> next(action);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> store = createStore(reducer,&#123;&#125;,applyMiddleware(middleware1,middleware2)) ;</div><div class="line">store.dispatch(&#123; <span class="attr">type</span> : <span class="string">'NAME'</span> , <span class="attr">payload</span> : <span class="string">'Jeno '</span>&#125;) ;</div><div class="line"><span class="built_in">console</span>.log(store.getState());</div></pre></td></tr></table></figure>
<p>首先假設我們現在只有一個<code>middleware</code>，<code>middleware</code>傳入兩個參數<code>dispatch</code>和<code>action</code>如下，代表希望<code>dispatch</code>可以透過這個<code>middleware</code>做處理。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> middleware = <span class="function">(<span class="params">dispatch,action</span>) =&gt;</span> &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware, before dispatch'</span>);</div><div class="line">	dispatch(action);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware, after dispatch'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> store = createStore(reducer,&#123;&#125;,middleware) ;</div></pre></td></tr></table></figure>
<p>我們先創建另一個函式專門針對含有<code>middleware</code>的做處理，若要使用<code>middleware</code>則必須使用該函式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStoreWithMiddleWare = <span class="function">(<span class="params">reducer,state,middleware</span>) =&gt;</span> &#123;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> middleware = <span class="function">(<span class="params">dispatch,action</span>) =&gt;</span> &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware, before dispatch'</span>);</div><div class="line">	dispatch(action);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware, after dispatch'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> store = createStoreWithMiddleWare(reducer,&#123;&#125;,middleware) ;</div></pre></td></tr></table></figure></p>
<p>接下來實作<code>createStoreWithMiddleWare</code>的部分，先使用原本<code>createStore</code>創造<code>store</code>，將<code>dispatch</code>修改為將原先的<code>dispatch</code>和<code>action</code>傳入<code>middleware</code>做處理，再將修改後的<code>store</code>回傳。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStoreWithMiddleWare = <span class="function">(<span class="params">reducer,state,middleware</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> store = createStore(reducer,state) ;</div><div class="line">	<span class="keyword">let</span> dispatch = <span class="function"><span class="keyword">function</span>(<span class="params">action</span>)</span>&#123;</div><div class="line">		middleware(store.dispatch,action) ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		...store,</div><div class="line">		dispatch </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我們可以在<code>createStore</code>做處理，如此一來就不需要呼叫兩個不同的函式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer,state,middleware</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">if</span> ( middleware !== <span class="literal">undefined</span> )&#123;</div><div class="line">		<span class="keyword">return</span> createStoreWithMiddleWare(reducer,state,middleware) ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">let</span> nowReducer = reducer ;</div><div class="line">	<span class="keyword">let</span> nowState = state ;</div><div class="line">	<span class="keyword">let</span> nowListeners = [] ;</div><div class="line">	<span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">		<span class="keyword">return</span> nowState ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">		nowState = nowReducer(nowState,action) ;</div><div class="line">		nowListeners.forEach(<span class="function">(<span class="params">listener</span>) =&gt;</span> listener());</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">const</span> subscribe = <span class="function">(<span class="params">listener</span>) =&gt;</span> &#123;</div><div class="line">		nowListeners.push(listener) ;</div><div class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			nowListeners.splice(nowListeners.indexOf(listener),<span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">const</span> replaceReducer = <span class="function">(<span class="params">reducer</span>) =&gt;</span> &#123;</div><div class="line">		nowReducer = reducer ;</div><div class="line">		dispatch(&#123; <span class="attr">type</span> : <span class="string">'INIT'</span> &#125;) ;</div><div class="line">	&#125;</div><div class="line">	dispatch(&#123; <span class="attr">type</span> : <span class="string">'INIT'</span> &#125;) ;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		getState ,</div><div class="line">		dispatch ,</div><div class="line">		subscribe ,</div><div class="line">		replaceReducer</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> store = createStore(reducer,&#123;&#125;,middleware) ;</div></pre></td></tr></table></figure></p>
<p>若我們想要傳入多個<code>middlewares</code>，我們可以修改每一個<code>middleware</code>成新的函式，將下一個<code>middleware</code>帶進去。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStoreWithMiddleWare = <span class="function">(<span class="params">reducer,state,middlewares</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> store = createStore(reducer,state) ;</div><div class="line">	<span class="keyword">let</span> newMiddleware = [...middlewares,store.dispatch] ;</div><div class="line">	<span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; newMiddleware.length - <span class="number">1</span> ; i ++ )&#123;</div><div class="line">		<span class="keyword">let</span> fn = newMiddleware[i] ;</div><div class="line">		newMiddleware[i] = <span class="function"><span class="keyword">function</span>(<span class="params">action,dispatch</span>)</span>&#123;</div><div class="line">			fn(action,newMiddleware[i+<span class="number">1</span>]) ;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">let</span> dispatch = <span class="function"><span class="keyword">function</span>(<span class="params">action</span>)</span>&#123;</div><div class="line">		newMiddleware[<span class="number">0</span>](action,newMiddleware[<span class="number">1</span>]) ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		...store,</div><div class="line">		dispatch </div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> middleware1 = <span class="function">(<span class="params">action,dispatch</span>) =&gt;</span> &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware 1, before dispatch'</span>);</div><div class="line">	dispatch(action);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware 1, after dispatch'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> middleware2 = <span class="function">(<span class="params">action,dispatch</span>) =&gt;</span> &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware 2, before dispatch'</span>);</div><div class="line">	dispatch(action);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware 2, after dispatch'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我們在這邊把<code>action</code>和<code>dispatch</code>參數對調，是為了因應<code>dispatch(action)</code>第一個參數是<code>action</code>的原因。</p>
<p>或者，我們也可以在這邊先將<code>middleware</code>函式<code>Curry</code>化，如此一來我們就可以先傳入<code>store.patch</code>，之後再傳入<code>action</code>，以便於直接搭配<code>compose</code>來使用。</p>
<p>關於<code>Curry</code>可以看我另一篇文章：<a href="http://jeno5980515.github.io/2017/05/17/Programming%20Language/JavaScript/Curry/">[JavaScript] Curry</a><br>關於<code>Compose</code>可以看我的另一篇文章：<a href="http://jeno5980515.github.io/2017/05/18/Programming%20Language/JavaScript/Compose%20%E5%92%8C%20Pipe/">[JavaScript] Compose 和 Pipe</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStoreWithMiddleWare = <span class="function">(<span class="params">reducer,state,middleware</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> store = createStore(reducer,state) ;</div><div class="line">	<span class="keyword">let</span> dispatch = store.dispatch ;</div><div class="line">	dispatch = <span class="function"><span class="keyword">function</span>(<span class="params">action</span>)</span>&#123;</div><div class="line">		middleware(store.dispatch)(action) ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		...store,</div><div class="line">		dispatch </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接著修改<code>middleware</code>的函式結構。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> middleware = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> (action) =&gt; &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware 1, before dispatch'</span>);</div><div class="line">	dispatch(action);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware 1, after dispatch'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果要傳入多個<code>middlewares</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> middleware1 = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> (action) =&gt; &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware 1, before dispatch'</span>);</div><div class="line">	dispatch(action);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware 1, after dispatch'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> middleware2 = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> (action) =&gt; &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware 2, before dispatch'</span>);</div><div class="line">	dispatch(action);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware 2, after dispatch'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> store = createStore(reducer,&#123;&#125;,[middleware1,middleware2]) ;</div></pre></td></tr></table></figure></p>
<p>修改<code>createStoreWithMiddleWare</code>，先<code>compose</code>所有的<code>middlewares</code>再傳入<code>store.dispatch</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStoreWithMiddleWare = <span class="function">(<span class="params">reducer,state,middlewares</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> store = createStore(reducer,state) ;</div><div class="line">	<span class="keyword">let</span> dispatch = store.dispatch ;</div><div class="line">	<span class="keyword">let</span> composedMiddleWare = compose(...middlewares)(store.dispatch);</div><div class="line">	dispatch = <span class="function"><span class="keyword">function</span>(<span class="params">action</span>)</span>&#123;</div><div class="line">		composedMiddleWare(action) ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		...store,</div><div class="line">		dispatch </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>帶入<code>store.dispatch</code>到<code>Compose</code>完<code>Curry</code>後的<code>middlewares</code>，可以經由每次回傳一個函式到上一個<code>middleware</code>，如此一來就可以組合成一個大的<code>middleware</code>使傳入的<code>action</code>可以透過<code>middleware1</code>-&gt;<code>middleware2</code>-&gt;<code>store.dispatch</code>。</p>
<p>接著，假設我們現在必須對特定的<code>action</code>做處理，例如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">store.dispatch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">	setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">		dispatch(&#123;</div><div class="line">			<span class="attr">type</span> : <span class="string">'AGE'</span> ,</div><div class="line">			<span class="attr">payload</span> : <span class="number">22</span></div><div class="line">		&#125;) ;</div><div class="line">		<span class="built_in">console</span>.log(getState());</div><div class="line">	&#125;,<span class="number">1000</span>)</div><div class="line">&#125;) ;</div></pre></td></tr></table></figure></p>
<p>發現在<code>action</code>裡面的函式並沒有<code>dispatch</code>和<code>getState</code>可以使用，因此必須傳這兩個進來。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">store.dispatch(<span class="function">(<span class="params">middlewareAPI</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> dispatch = middlewareAPI.dispatch ;</div><div class="line">	<span class="keyword">let</span> getState = middlewareAPI.getState ;</div><div class="line">	setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">		dispatch(&#123;</div><div class="line">			<span class="attr">type</span> : <span class="string">'AGE'</span> ,</div><div class="line">			<span class="attr">payload</span> : <span class="number">22</span></div><div class="line">		&#125;) ;</div><div class="line">		<span class="built_in">console</span>.log(getState());</div><div class="line">	&#125;,<span class="number">1000</span>)</div><div class="line">&#125;) ;</div></pre></td></tr></table></figure></p>
<p>如此一來修改<code>createStoreWithMiddleWare</code>，在這邊我們傳入帶<code>dispatch</code>和<code>getState</code>的<code>middlewareAPI</code>到每個<code>middleware</code>，注意在這邊帶的<code>dispatch</code>必須是修改過後的<code>dispatch</code>而不是<code>store.dispatch</code>，才可以確保每次<code>dispatch</code>都會從第一個<code>middleware</code>開始。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStoreWithMiddleWare = <span class="function">(<span class="params">reducer,state,middlewares</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> store = createStore(reducer,state) ;</div><div class="line">	<span class="keyword">let</span> dispatch = store.dispatch ;</div><div class="line">	<span class="keyword">let</span> middlewareAPI = &#123;</div><div class="line">		<span class="attr">getState</span> : store.getState ,</div><div class="line">		<span class="attr">dispatch</span> : <span class="function">(<span class="params">action</span>) =&gt;</span> dispatch(action) </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">let</span> newMiddlewares = middlewares.map(<span class="function">(<span class="params">middleware</span>)=&gt;</span>middleware(middlewareAPI));</div><div class="line">	<span class="keyword">let</span> composedMiddleWare = compose(...newMiddlewares)(store.dispatch);</div><div class="line">	dispatch = <span class="function"><span class="keyword">function</span>(<span class="params">action</span>)</span>&#123;</div><div class="line">		composedMiddleWare(action) ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		...store,</div><div class="line">		dispatch </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再來我們必須修改<code>middleware</code>的架構，再這邊我們把<code>middleware2</code>修改成可以處理<code>action</code>是函式的狀況，同時這也是<code>redux-thunk</code>實作原理。</p>
<p>為了避免<code>dispatch</code>搞混，我們將前往下一個<code>middleware</code>的<code>dispatch</code>改為<code>next</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> middleware1 = <span class="function">(<span class="params">middlewareAPI</span>) =&gt;</span> (next) =&gt; <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware 1, going to next'</span>);</div><div class="line">	<span class="keyword">let</span> result = next(action);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> middleware2 = <span class="function">(<span class="params">middlewareAPI</span>) =&gt;</span> (next) =&gt; <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am middleware 2, going to next'</span>);</div><div class="line">	<span class="keyword">if</span> ( <span class="keyword">typeof</span> action === <span class="string">'function'</span> )&#123;</div><div class="line">		action(middlewareAPI) ;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">let</span> result = next(action);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因此每當我們呼叫一般的物件<code>action</code>，則會通過<code>middleware1</code>-&gt;<code>middleware2</code>-&gt;<code>store.dispatch</code>。</p>
<p>若<code>action</code>是函式如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">let</span> store = createStore(reducer,&#123;&#125;,[middleware1,middleware2]) ;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(store.getState());</div><div class="line">store.dispatch(&#123; <span class="attr">type</span> : <span class="string">'NAME'</span> , <span class="attr">payload</span> : <span class="string">'Jeno '</span>&#125;) ;</div><div class="line"><span class="built_in">console</span>.log(store.getState());</div><div class="line">store.dispatch(<span class="function">(<span class="params">middlewareAPI</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> dispatch = middlewareAPI.dispatch ;</div><div class="line">	<span class="keyword">let</span> getState = middlewareAPI.getState ;</div><div class="line">	setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">		dispatch(&#123;</div><div class="line">			<span class="attr">type</span> : <span class="string">'AGE'</span> ,</div><div class="line">			<span class="attr">payload</span> : <span class="number">22</span></div><div class="line">		&#125;) ;</div><div class="line">		<span class="built_in">console</span>.log(getState());</div><div class="line">	&#125;,<span class="number">1000</span>)</div><div class="line">&#125;) ;</div></pre></td></tr></table></figure></p>
<p>流程則是<code>middleware1</code>-&gt;<code>middleware2</code>-&gt;<code>middleware1</code>-&gt;<code>middleware2</code>-&gt;<code>store.dispatch</code>。</p>
<p>如此一來處理<code>middlewares</code>的函式其實差不多了，我們把參數傳遞方式改一下並且改<code>createStoreWithMiddleWare</code>為<code>applyMiddleware</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> applyMiddleware = <span class="function">(<span class="params">reducer,state,middlewares</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> store = createStore(reducer,state) ;</div><div class="line">	<span class="keyword">let</span> dispatch = store.dispatch ;</div><div class="line">	<span class="keyword">let</span> middlewareAPI = &#123;</div><div class="line">		<span class="attr">getState</span> : store.getState ,</div><div class="line">		<span class="attr">dispatch</span> : <span class="function">(<span class="params">action</span>) =&gt;</span> dispatch(action) </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">let</span> newMiddlewares = middlewares.map(<span class="function">(<span class="params">middleware</span>)=&gt;</span>middleware(middlewareAPI));</div><div class="line">	<span class="keyword">let</span> composedMiddleWare = compose(...newMiddlewares)(store.dispatch);</div><div class="line">	dispatch = <span class="function"><span class="keyword">function</span>(<span class="params">action</span>)</span>&#123;</div><div class="line">		composedMiddleWare(action) ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		...store,</div><div class="line">		dispatch </div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> store = createStore(reducer,&#123;&#125;,applyMiddleware(middleware1,middleware2)) ;</div></pre></td></tr></table></figure></p>
<p>接著改寫<code>applyMiddleware</code>的結構，並讓它可以傳<code>reducer</code>和<code>state</code>進來。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> applyMiddleware = <span class="function">(<span class="params">...middlewares</span>) =&gt;</span> (reducer,state) =&gt; &#123;</div><div class="line">	<span class="keyword">let</span> store = createStore(reducer,state) ;</div><div class="line">	<span class="keyword">let</span> dispatch = store.dispatch ;</div><div class="line">	<span class="keyword">let</span> middlewareAPI = &#123;</div><div class="line">		<span class="attr">getState</span> : store.getState ,</div><div class="line">		<span class="attr">dispatch</span> : <span class="function">(<span class="params">action</span>) =&gt;</span> dispatch(action) </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">let</span> newMiddlewares = middlewares.map(<span class="function">(<span class="params">middleware</span>)=&gt;</span>middleware(middlewareAPI));</div><div class="line">	<span class="keyword">let</span> composedMiddleWare = compose(...newMiddlewares)(store.dispatch);</div><div class="line">	dispatch = <span class="function"><span class="keyword">function</span>(<span class="params">action</span>)</span>&#123;</div><div class="line">		composedMiddleWare(action) ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		...store,</div><div class="line">		dispatch </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在<code>createStore</code>的部分也做修改。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer,state,enhancer</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">if</span> ( enhancer !== <span class="literal">undefined</span> )&#123;</div><div class="line">		<span class="keyword">return</span> enhancer(reducer,state) ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">let</span> nowReducer = reducer ;</div><div class="line">	<span class="keyword">let</span> nowState = state ;</div><div class="line">	<span class="keyword">let</span> nowListeners = [] ;</div><div class="line">	<span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">		<span class="keyword">return</span> nowState ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">		nowState = nowReducer(nowState,action) ;</div><div class="line">		nowListeners.forEach(<span class="function">(<span class="params">listener</span>) =&gt;</span> listener());</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">const</span> subscribe = <span class="function">(<span class="params">listener</span>) =&gt;</span> &#123;</div><div class="line">		nowListeners.push(listener) ;</div><div class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			nowListeners.splice(nowListeners.indexOf(listener),<span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">const</span> replaceReducer = <span class="function">(<span class="params">reducer</span>) =&gt;</span> &#123;</div><div class="line">		nowReducer = reducer ;</div><div class="line">		dispatch(&#123; <span class="attr">type</span> : <span class="string">'INIT'</span> &#125;) ;</div><div class="line">	&#125;</div><div class="line">	dispatch(&#123; <span class="attr">type</span> : <span class="string">'INIT'</span> &#125;) ;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		getState ,</div><div class="line">		dispatch ,</div><div class="line">		subscribe ,</div><div class="line">		replaceReducer</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>Redux</code>會再把<code>createStore</code>傳進<code>applyMiddleware</code>裡，如此一來就不需要<code>createStore</code>這段程式了。 </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前陣子寫的&lt;code&gt;Redux&lt;/code&gt;解析感覺寫不清楚，因此重寫一篇如何實作&lt;code&gt;Redux&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;這邊必須對&lt;code&gt;Redux&lt;/code&gt;有些基本認識，而實作的部分都先不做錯誤處理。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://jeno5980515.github.io/categories/Web/"/>
    
      <category term="Redux" scheme="http://jeno5980515.github.io/categories/Web/Redux/"/>
    
    
      <category term="Redux" scheme="http://jeno5980515.github.io/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>[JavaScript] Compose 和 Pipe</title>
    <link href="http://jeno5980515.github.io/2017/05/18/Programming%20Language/JavaScript/Compose%20%E5%92%8C%20Pipe/"/>
    <id>http://jeno5980515.github.io/2017/05/18/Programming Language/JavaScript/Compose 和 Pipe/</id>
    <published>2017-05-18T03:59:50.000Z</published>
    <updated>2017-06-01T08:45:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Compose"><a href="#Compose" class="headerlink" title="Compose"></a>Compose</h2><p><code>Compose</code>把多個函式組合成一個函式，關係式如下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">F(x) = f(g(x))</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>程式範例</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> x + <span class="number">1</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> g = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> x * <span class="number">2</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">f(g(<span class="number">1</span>)); <span class="comment">// 3</span></div><div class="line"><span class="keyword">var</span> F = compose(f,g);</div><div class="line">F(<span class="number">1</span>); <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>首先回傳一個函式，並利用閉包將傳入的函式紀錄起來。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> compose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> fns = <span class="built_in">arguments</span> ;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>這個回傳的函式要依次執行函式參數，注意要從最後一個開始執行。</p>
<p>這裡使用 call 而不直接呼叫是為了以防函式使用到 this 的情形。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> compose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> fns = <span class="built_in">arguments</span> ;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">		<span class="keyword">for</span> ( <span class="keyword">var</span> i = fns.length - <span class="number">1</span> ; i &gt;= <span class="number">0</span> ; i -- )&#123;</div><div class="line">			result = fns[i].call(<span class="keyword">this</span>,result) ;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result ;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> x + <span class="number">1</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> g = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> x * <span class="number">2</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">f(g(<span class="number">1</span>)); <span class="comment">// 3</span></div><div class="line"><span class="keyword">var</span> F = compose(f,g);</div><div class="line">F(<span class="number">1</span>); <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p>可以使用<code>reduce</code> ，記得是從最後一個開始執行所以要使用 <code>reduceRight</code>。</p>
<p>由於 reduce 用於陣列而 arguments 只是類陣列，所以先將 arguments 先轉為陣列。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> fns = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>,<span class="number">0</span>);</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> result = fns.reduceRight(<span class="function"><span class="keyword">function</span>(<span class="params">result , fn</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> fn.call(<span class="keyword">this</span>,result);</div><div class="line">		&#125;,arg);</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="Pipe"><a href="#Pipe" class="headerlink" title="Pipe"></a>Pipe</h2><p>Pipe 其實和 Compose 很像，只是函式執行順序不一樣而已，因此改變程式順序即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">pipe</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> fns = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>,<span class="number">0</span>);</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> result = fns.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">result , fn</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> fn.call(<span class="keyword">this</span>,result);</div><div class="line">		&#125;,arg);</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p><a href="http://blakeembrey.com/articles/2014/01/compose-functions-javascript/" target="_blank" rel="external">Composing Functions in JavaScript</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Compose&quot;&gt;&lt;a href=&quot;#Compose&quot; class=&quot;headerlink&quot; title=&quot;Compose&quot;&gt;&lt;/a&gt;Compose&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Compose&lt;/code&gt;把多個函式組合成一個函式，關係式如下。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;F(x) = f(g(x))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Programming Language" scheme="http://jeno5980515.github.io/categories/Programming-Language/"/>
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/categories/Programming-Language/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/tags/JavaScript/"/>
    
      <category term="Compose" scheme="http://jeno5980515.github.io/tags/Compose/"/>
    
      <category term="Pipe" scheme="http://jeno5980515.github.io/tags/Pipe/"/>
    
  </entry>
  
  <entry>
    <title>[JavaScript] Curry</title>
    <link href="http://jeno5980515.github.io/2017/05/17/Programming%20Language/JavaScript/Curry/"/>
    <id>http://jeno5980515.github.io/2017/05/17/Programming Language/JavaScript/Curry/</id>
    <published>2017-05-17T13:15:57.000Z</published>
    <updated>2017-05-17T13:41:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>Curry</code>化指的是將接受多個參數的函數轉換成可以依次傳入參數的函式，以下見例子。</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">x , y</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> x + y ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">add(<span class="number">1</span>,<span class="number">2</span>) ; <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p>Curry 化後<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> x + y ;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">add(<span class="number">1</span>)(<span class="number">2</span>); <span class="comment">// 3</span></div></pre></td></tr></table></figure></p>
<p>這樣做有什麼好處？好處在於我們利用不同的參數來創造不同的函式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> addOne = add(<span class="number">1</span>) ;</div><div class="line"><span class="keyword">var</span> addTwo = add(<span class="number">2</span>) ;</div><div class="line">addOne(<span class="number">1</span>) ; <span class="comment">// 2</span></div><div class="line">addTwo(<span class="number">1</span>) ; <span class="comment">// 3</span></div></pre></td></tr></table></figure></p>
<p>許多函式庫有提供<code>Curry</code>化的功能，像是<code>lodash</code>等等的函式庫。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">x , y , z</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> x + y + z ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> curryAdd = _.curry(add) ;</div><div class="line">curryAdd(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// 6 </span></div><div class="line">curryAdd(<span class="number">1</span>,<span class="number">2</span>)(<span class="number">3</span>); <span class="comment">// 6 </span></div><div class="line">curryAdd(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>); <span class="comment">// 6</span></div></pre></td></tr></table></figure></p>
<p>接下來透過實作來了解是如何辦到 Curry 功能的。</p>
<h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>首先無論如何先回傳一個函式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> curry = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再來我們要知道什麼時候是參數已經傳完的情況並且作處理，若參數已經傳完則利用 apply 執行函式。</p>
<p>在這邊先 slice 一份 arguments，而由於 arguments 不是陣列而是物件，因此不可以直接對 arguments 做 slice 。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> curry = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>);</div><div class="line">		<span class="keyword">if</span> ( args.length &gt;= fn.length ) &#123;</div><div class="line">			<span class="keyword">return</span> fn.apply(<span class="literal">null</span>, args);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>若參數還沒傳完，這時候要回傳個函式讓使用者繼續呼叫<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> curry = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>);</div><div class="line">		<span class="keyword">if</span> ( args.length &gt;= fn.length ) &#123;</div><div class="line">			<span class="keyword">return</span> fn.apply(<span class="literal">null</span>, args);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>若再次呼叫這個函式，則直接把帶入的參數連接到之前的參數後面，並再次呼叫原先的 curried 函式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> curry = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">	<span class="comment">// 為了再次呼叫命名為 curried</span></div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">curried</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>);</div><div class="line">		<span class="keyword">if</span> ( args.length &gt;= fn.length ) &#123;</div><div class="line">			<span class="keyword">return</span> fn.apply(<span class="literal">null</span>, args);</div><div class="line">		&#125;	</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="keyword">var</span> args2 = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>);</div><div class="line">				<span class="keyword">return</span> curried.apply(<span class="literal">null</span>, args.concat(args2)); </div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如此一來就完成了</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> curry = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">curried</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>);</div><div class="line">		<span class="keyword">if</span> ( args.length &gt;= fn.length ) &#123;</div><div class="line">			<span class="keyword">return</span> fn.apply(<span class="literal">null</span>, args);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="keyword">var</span> args2 = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>);</div><div class="line">				<span class="keyword">return</span> curried.apply(<span class="literal">null</span>, args.concat(args2)); </div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">x , y ,z</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> x + y + z ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> add = curry(add);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>)(<span class="number">3</span>));	<span class="comment">// 6</span></div><div class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>)(<span class="number">2</span>,<span class="number">3</span>));	<span class="comment">// 6</span></div><div class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>));	<span class="comment">// 6</span></div><div class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));	<span class="comment">// 6</span></div></pre></td></tr></table></figure>
<h3 id="不限參數"><a href="#不限參數" class="headerlink" title="不限參數"></a>不限參數</h3><p>若我們希望這個函式不限定參數數量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">add(<span class="number">1</span>) <span class="comment">//1</span></div><div class="line">add(<span class="number">1</span>)(<span class="number">2</span>) <span class="comment">// 3</span></div><div class="line">add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)<span class="comment">// 6</span></div></pre></td></tr></table></figure></p>
<p>以上的方法是不合理的，因為它不知道現在該繼續回傳函式還是該回傳結果，我們可以提供個函式讓它知道已經執行完要得到結果。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">add(<span class="number">1</span>).value() <span class="comment">//1</span></div><div class="line">add(<span class="number">1</span>)(<span class="number">2</span>).value() <span class="comment">// 3</span></div><div class="line">add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>).value()<span class="comment">// 6</span></div></pre></td></tr></table></figure></p>
<p>首先一樣先回傳一個函式，並且讓這個函式回傳自己以便繼續傳入參數，且另外給這個函式一個 value 函式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> curried = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> curried ;</div><div class="line">	&#125;</div><div class="line">	curried.value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> curried ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在每次帶入參數後將值加總，並在 value 函式回傳結果即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">sum</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> curried = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">		sum += num ;</div><div class="line">		<span class="keyword">return</span> curried ;</div><div class="line">	&#125;</div><div class="line">	curried.value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> sum ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> curried ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如此一來即可不斷對 add 帶入參數<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myAdder = add ;</div><div class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++) &#123;</div><div class="line">	myAdder = myAdder(<span class="number">10</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">myAdder(<span class="number">10</span>); <span class="comment">// 100</span></div></pre></td></tr></table></figure></p>
<p>利用 arguments 來處理一次帶入多個參數<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> sum = <span class="number">0</span> ;</div><div class="line">	<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="built_in">arguments</span>.length ; i ++ )&#123;</div><div class="line">		sum += <span class="built_in">arguments</span>[i] ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">var</span> curried = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="built_in">arguments</span>.length ; i ++ )&#123;</div><div class="line">			sum += <span class="built_in">arguments</span>[i] ;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> curried ;</div><div class="line">	&#125;</div><div class="line">	curried.value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> sum ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> curried ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">add(<span class="number">1</span>).value() <span class="comment">//1</span></div><div class="line">add(<span class="number">1</span>)(<span class="number">2</span>).value() <span class="comment">// 3</span></div><div class="line">add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>).value() <span class="comment">// 6</span></div><div class="line">add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)(<span class="number">4</span>).value() <span class="comment">// 10</span></div><div class="line">add(<span class="number">1</span>)(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>).value() <span class="comment">// 10</span></div></pre></td></tr></table></figure></p>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p><a href="http://blog.carbonfive.com/2015/01/14/gettin-freaky-functional-wcurried-javascript/" target="_blank" rel="external">Gettin’ Freaky Functional w/Curried JavaScript</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Curry&lt;/code&gt;化指的是將接受多個參數的函數轉換成可以依次傳入參數的函式，以下見例子。&lt;/p&gt;
    
    </summary>
    
      <category term="Programming Language" scheme="http://jeno5980515.github.io/categories/Programming-Language/"/>
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/categories/Programming-Language/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/tags/JavaScript/"/>
    
      <category term="Curry" scheme="http://jeno5980515.github.io/tags/Curry/"/>
    
  </entry>
  
  <entry>
    <title>[Other] Untrusted</title>
    <link href="http://jeno5980515.github.io/2017/05/12/Other/Untrusted/"/>
    <id>http://jeno5980515.github.io/2017/05/12/Other/Untrusted/</id>
    <published>2017-05-12T10:44:20.000Z</published>
    <updated>2017-05-12T11:27:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://alexnisnevich.github.io/untrusted/" target="_blank" rel="external">Untrusted</a> 這個小遊戲必須由玩家編寫 JavaScript 來完成任務，遊戲目的只要操作角色到出口即可。</p>
<p>其中必須觀察現有的程式，大部分的程式是不能做修改的，必須在黑色的地方新增或修改程式讓遊戲可以順利進行。</p>
<a id="more"></a>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><h3 id="1-cellBlockA"><a href="#1-cellBlockA" class="headerlink" title="1. cellBlockA"></a>1. cellBlockA</h3><p>直接將黑色部分的程式刪除即可</p>
<h3 id="2-theLongWayOut"><a href="#2-theLongWayOut" class="headerlink" title="2. theLongWayOut"></a>2. theLongWayOut</h3><p>將 maze 重設大小 (非必要)，另外新增一個出口</p>
<h3 id="3-validationEngaged"><a href="#3-validationEngaged" class="headerlink" title="3. validationEngaged"></a>3. validationEngaged</h3><p>在維持一定數量的 block 情況下修改位置</p>
<h3 id="4-multiplicity"><a href="#4-multiplicity" class="headerlink" title="4. multiplicity"></a>4. multiplicity</h3><p>新增一個出口</p>
<h3 id="5-minesweeper"><a href="#5-minesweeper" class="headerlink" title="5. minesweeper"></a>5. minesweeper</h3><p>修改地雷的顏色</p>
<h3 id="6-drones101"><a href="#6-drones101" class="headerlink" title="6. drones101"></a>6. drones101</h3><p>新增一長條的 block 來阻擋 d 的去路</p>
<h3 id="7-colors"><a href="#7-colors" class="headerlink" title="7. colors"></a>7. colors</h3><p>這邊的電話可以讓你按Q或Ctrl+6執行callback，因此在callback裡每次呼叫都改變顏色即可</p>
<h3 id="8-intoTheWoods"><a href="#8-intoTheWoods" class="headerlink" title="8. intoTheWoods"></a>8. intoTheWoods</h3><p>將callback函式改成<code>generateForest</code>，如此一來一邊行動一邊重新產生樹林即可到達終點</p>
<h3 id="9-fordingTheRiver"><a href="#9-fordingTheRiver" class="headerlink" title="9. fordingTheRiver"></a>9. fordingTheRiver</h3><p>重新定義一個raft，然後放一堆到水面上穿過</p>
<h3 id="10-ambush"><a href="#10-ambush" class="headerlink" title="10. ambush"></a>10. ambush</h3><p>全部改成向右移動，並在出口的平行左邊放一個 block 阻擋 d 繼續向右擋到出口</p>
<h3 id="11-robot"><a href="#11-robot" class="headerlink" title="11. robot"></a>11. robot</h3><p>若機器人可以向右則向右，否則向下，接著跟機器人會合拿到鑰匙即可</p>
<h3 id="12-robotNav"><a href="#12-robotNav" class="headerlink" title="12. robotNav"></a>12. robotNav</h3><p>在第一個 # 柱子放四個直的，然後再第二個左邊放置一個4個 block 類似閃電的圖形，接著機器人行動判斷向右-&gt;向下-&gt;向上即可。</p>
<h3 id="13-robotMaze"><a href="#13-robotMaze" class="headerlink" title="13. robotMaze"></a>13. robotMaze</h3><p>這關運氣好，只有讓機器人先向下然後向右，某次產生的地圖可以過關</p>
<h3 id="14-crispsContest"><a href="#14-crispsContest" class="headerlink" title="14. crispsContest"></a>14. crispsContest</h3><p>修改的地方改成藍色鑰匙，行動順序如下</p>
<p>左邊<span style="color:blue;">⊗</span>-&gt;<span style="color:green;">⊗</span>-&gt;<span style="color:blue;">⊗</span>-&gt;右上<span style="color:red;">⊗</span>-&gt;<span style="color:green;">⊗</span>-&gt;<span style="color:red;">⊗</span>-&gt;右下<span style="color:yellow;">⊗</span>-&gt;<span style="color:blue;">⊗</span>-&gt;<span style="color:yellow;">⊗</span></p>
<h3 id="15-exceptionalCrossing"><a href="#15-exceptionalCrossing" class="headerlink" title="15. exceptionalCrossing"></a>15. exceptionalCrossing</h3><p>修改的地方改成一個未宣告的變數，如此一來就可以穿越水面到終點</p>
<h3 id="16-lasers"><a href="#16-lasers" class="headerlink" title="16. lasers"></a>16. lasers</h3><p>在最下面重寫<code>getRandomInt</code>函式，每次回傳到同一個數字例如0，如此一來雷射都會產生在那個點而已。</p>
<h3 id="17-pointers"><a href="#17-pointers" class="headerlink" title="17. pointers"></a>17. pointers</h3><p>這關莫名其妙過了，目前想法是一定要讓傳送點傳到傳送點不可以直接傳到 trap ，然後就會到出口附近的傳送點了。</p>
<h3 id="18-superDrEvalBros"><a href="#18-superDrEvalBros" class="headerlink" title="18. superDrEvalBros"></a>18. superDrEvalBros</h3><p>在callback裡面另外寫一個反重力函式讓角色不斷向上且註冊 timer 即可。</p>
<h3 id="19-documentObjectMadness"><a href="#19-documentObjectMadness" class="headerlink" title="19. documentObjectMadness"></a>19. documentObjectMadness</h3><p>這關不知道在幹麻亂動就過了 ….</p>
<h3 id="20-bossFight"><a href="#20-bossFight" class="headerlink" title="20. bossFight"></a>20. bossFight</h3><p>可以發現只有在最一開始限制了 dynamic 數量，並且非 dynamic 數量還允許你建一個，因此 define 一個 boss2 和 bullet2 ， 讓使用者碰觸到 boss2 的時候會發射向上的 bullet2 來炸光所有 boss 即可得到 Algorithm</p>
<h3 id="21-endOfTheLine"><a href="#21-endOfTheLine" class="headerlink" title="21. endOfTheLine"></a>21. endOfTheLine</h3><p>進入 menu 的 scripts 的 object.js，把 exit 裡的判斷 finalLevel 拿掉即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://alexnisnevich.github.io/untrusted/&quot;&gt;Untrusted&lt;/a&gt; 這個小遊戲必須由玩家編寫 JavaScript 來完成任務，遊戲目的只要操作角色到出口即可。&lt;/p&gt;
&lt;p&gt;其中必須觀察現有的程式，大部分的程式是不能做修改的，必須在黑色的地方新增或修改程式讓遊戲可以順利進行。&lt;/p&gt;
    
    </summary>
    
      <category term="Other" scheme="http://jeno5980515.github.io/categories/Other/"/>
    
    
      <category term="Game" scheme="http://jeno5980515.github.io/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 136 - Single Number</title>
    <link href="http://jeno5980515.github.io/2017/05/12/Online%20Judge/LeetCode/136%20-%20Single%20Number/"/>
    <id>http://jeno5980515.github.io/2017/05/12/Online Judge/LeetCode/136 - Single Number/</id>
    <published>2017-05-12T02:47:30.000Z</published>
    <updated>2017-05-12T02:54:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h1><p>有一個陣列裡面的元素皆出現兩次，只有一個元素為一次，找出獨立的那個元素。</p>
<a id="more"></a>
<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p>利用XOR運算，兩個相同的元素XOR運算結果為0，所以剩下的那一個就是答案。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>^<span class="number">2</span>^<span class="number">3</span>^<span class="number">4</span>^<span class="number">3</span>^<span class="number">2</span>^<span class="number">1</span> = <span class="number">1</span>^<span class="number">1</span>^<span class="number">2</span>^<span class="number">2</span>^<span class="number">3</span>^<span class="number">3</span>^<span class="number">4</span> = <span class="number">4</span></div></pre></td></tr></table></figure></p>
<h1 id="程式"><a href="#程式" class="headerlink" title="程式"></a>程式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;number[]&#125; nums</div><div class="line"> * @return &#123;number&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> singleNumber = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> number = nums[<span class="number">0</span>] ;</div><div class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">1</span> ; i &lt; nums.length ; i ++ )&#123;</div><div class="line">        number ^= nums[i] ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> number ;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h1&gt;&lt;p&gt;有一個陣列裡面的元素皆出現兩次，只有一個元素為一次，找出獨立的那個元素。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://jeno5980515.github.io/categories/Online-Judge/"/>
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/categories/Online-Judge/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/tags/LeetCode/"/>
    
      <category term="136" scheme="http://jeno5980515.github.io/tags/136/"/>
    
      <category term="XOR" scheme="http://jeno5980515.github.io/tags/XOR/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 5 - Longest Palindromic Substring</title>
    <link href="http://jeno5980515.github.io/2017/05/09/Online%20Judge/LeetCode/5%20-%20Longest%20Palindromic%20Substring/"/>
    <id>http://jeno5980515.github.io/2017/05/09/Online Judge/LeetCode/5 - Longest Palindromic Substring/</id>
    <published>2017-05-09T05:51:34.000Z</published>
    <updated>2017-05-09T06:04:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h1><p>求最長回文子字串。</p>
<a id="more"></a>
<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p>假設<code>dp(i,j)</code>代表從i到j的子字串是否為回文，得到下列遞迴式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dp(i,j) = <span class="number">1</span> , <span class="keyword">if</span> ( s[i] == s[j] &amp;&amp; dp(i+<span class="number">1</span>,j<span class="number">-1</span>) == <span class="number">1</span> ) </div><div class="line">	= <span class="number">0</span> , <span class="keyword">else</span></div></pre></td></tr></table></figure></p>
<h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1><p>不得不說JavaScript真的是慢了許多 … </p>
<h1 id="程式"><a href="#程式" class="headerlink" title="程式"></a>程式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;string&#125; s</div><div class="line"> * @return &#123;string&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> longestPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> ( s.length &lt;= <span class="number">1</span> ) <span class="keyword">return</span> s ;</div><div class="line">    <span class="keyword">var</span> nowMax = <span class="number">1</span> , nowString = s[s.length<span class="number">-1</span>] ;</div><div class="line">    <span class="keyword">var</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(s.length+<span class="number">1</span>);</div><div class="line">    <span class="keyword">var</span> copy = <span class="keyword">new</span> <span class="built_in">Array</span>(s.length+<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; s.length+<span class="number">1</span> ; i++) &#123;</div><div class="line">        copy[i] = <span class="literal">true</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; s.length+<span class="number">1</span>; i++)&#123;</div><div class="line">        dp[i] = copy.slice(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> i = s.length - <span class="number">1</span> ; i &gt;= <span class="number">0</span> ; i -- )&#123;</div><div class="line">        <span class="keyword">for</span> ( <span class="keyword">var</span> j = i + <span class="number">1</span> ; j &lt; s.length ; j ++ )&#123;</div><div class="line">            <span class="keyword">if</span> ( s[i] === s[j] &amp;&amp; dp[i+<span class="number">1</span>][j<span class="number">-1</span>] !== <span class="literal">false</span> )&#123;</div><div class="line">                dp[i][j] = <span class="literal">true</span> ;</div><div class="line">                <span class="keyword">if</span> ( j - i + <span class="number">1</span> &gt; nowMax )&#123;</div><div class="line">                    nowMax = j - i + <span class="number">1</span> ;</div><div class="line">                    nowString = s.substring(i,j+<span class="number">1</span>) ;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                dp[i][j] = <span class="literal">false</span> ;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> nowString ;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h1&gt;&lt;p&gt;求最長回文子字串。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://jeno5980515.github.io/categories/Online-Judge/"/>
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/categories/Online-Judge/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/tags/LeetCode/"/>
    
      <category term="Palindrome" scheme="http://jeno5980515.github.io/tags/Palindrome/"/>
    
      <category term="5" scheme="http://jeno5980515.github.io/tags/5/"/>
    
  </entry>
  
  <entry>
    <title>[JavaScript] V8 和 Event Loop</title>
    <link href="http://jeno5980515.github.io/2017/05/08/Programming%20Language/JavaScript/V8%20%E5%92%8C%20Event%20Loop/"/>
    <id>http://jeno5980515.github.io/2017/05/08/Programming Language/JavaScript/V8 和 Event Loop/</id>
    <published>2017-05-08T08:55:36.000Z</published>
    <updated>2017-05-11T03:29:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近研究了下 V8 和 Event Loop，以下圖片和程式碼皆引用自影片中。</p>
<a id="more"></a>
<h2 id="V8"><a href="#V8" class="headerlink" title="V8"></a>V8</h2><p>以往JavaScript是透過直譯式的方式執行，而 V8 會直接將 JavaScript 轉換成電腦看的懂的<code>Machine Code</code> 再執行，目前在 Chrome 和 Node.js 都是使用這套引擎。</p>
<hr>
<h3 id="Hidden-Class"><a href="#Hidden-Class" class="headerlink" title="Hidden Class"></a>Hidden Class</h3><p>JavaScript是動態語言，這帶來了便利但也造成效能問題，以往類似引擎會採用類似<code>Hash Table</code>的方式來編譯，而V8則會在<code>Runtime</code>的時候建立<code>Hidden Class</code>。</p>
<p>若物件有相同的<code>Hidden Class</code>，則可以使用相同的<code>Machine Code</code>，稱之為<code>Inline Caches</code>。</p>
<p><img src="/img/JavaScript/about/v8_1.PNG" alt=""><br>依照程式的執行順序，我們會依序創建<code>Hidden Class</code>。</p>
<p>p1：<br><code>Point</code>-&gt;<code>Point,x</code>-&gt;<code>Point,x,y</code><br>p2：<br>由於創建過所以可以直接指到<code>Point,x,y</code>，這時候如果我們給p2一個新的值z，則會創建一個<code>Point,x,y,z</code></p>
<h4 id="優化"><a href="#優化" class="headerlink" title="優化"></a>優化</h4><ol>
<li>經由構造函數創建所有的物件</li>
<li>使用同順序創建物件的元素</li>
</ol>
<hr>
<h3 id="數字"><a href="#數字" class="headerlink" title="數字"></a>數字</h3><p><img src="/img/JavaScript/about/v8_2.PNG" alt=""><br>V8會用32 bits的空間<br>用最後一個bit來判別是不是數字，1為物件指標而0則為數字。</p>
<p>萬一這個數字超過31個bits，這時候會將數字放在Box裡並轉換為double，再存到物件中。</p>
<h4 id="優化-1"><a href="#優化-1" class="headerlink" title="優化"></a>優化</h4><ul>
<li>使用31 bits的有符號整數</li>
</ul>
<hr>
<h3 id="陣列"><a href="#陣列" class="headerlink" title="陣列"></a>陣列</h3><h4 id="Fast-Elements"><a href="#Fast-Elements" class="headerlink" title="Fast Elements"></a>Fast Elements</h4><p>緊密的陣列會使用線性的儲存。</p>
<h4 id="Dictionary-Elements"><a href="#Dictionary-Elements" class="headerlink" title="Dictionary Elements"></a>Dictionary Elements</h4><p>寬鬆的陣列會使用<code>Hash Table</code>儲存。 </p>
<h4 id="優化-2"><a href="#優化-2" class="headerlink" title="優化"></a>優化</h4><ol>
<li>使用連續的陣列並且起始為0</li>
<li>不要宣告一個過大的陣列</li>
<li>別刪除陣列的元素  </li>
<li><p>別使用未宣告或者已刪除的元素</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//bad</span></div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> b = <span class="number">0</span> ; b &lt; <span class="number">10</span> ; b ++ )&#123;</div><div class="line">	a[<span class="number">0</span>] |= b ;</div><div class="line">&#125;</div><div class="line"><span class="comment">//good</span></div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">a[<span class="number">0</span>] = <span class="number">0</span> ;</div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> b = <span class="number">0</span> ; b &lt; <span class="number">10</span> ; b ++ )&#123;</div><div class="line">	a[<span class="number">0</span>] |= b ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>若陣列中值的類型都是<code>Double</code>，陣列會將Double unbox且直接存在Double類型的buffer。</p>
</li>
<li>若陣列的元素類型不一致會產生不同的<code>Hidden Class</code>，因此造成效能上的花費。<br><img src="/img/JavaScript/about/v8_4.PNG" alt=""></li>
<li><p>事先宣告可在compile時讓V8優化</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [ <span class="number">77</span> , <span class="number">88</span> , <span class="number">0.5</span> , <span class="literal">true</span> ] ;</div></pre></td></tr></table></figure>
</li>
<li><p>小陣列中事先宣告正確大小</p>
</li>
</ol>
<hr>
<h3 id="Compilers"><a href="#Compilers" class="headerlink" title="Compilers"></a>Compilers</h3><p>V8有兩種Compilers。</p>
<h4 id="Full-Compiler"><a href="#Full-Compiler" class="headerlink" title="Full Compiler"></a>Full Compiler</h4><ol>
<li>盡快產生可以執行的程式</li>
<li>在<code>Compile Time</code>幾乎不做類別分析</li>
<li>使用<code>Inline Caches</code>在<code>Runtime</code>做類別分析且最佳化，同樣的<code>Hidden Class</code>可以使用同樣的最佳化程式。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"> x , y </span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> x + y ;</div><div class="line">&#125;</div><div class="line">add(<span class="number">1</span>,<span class="number">2</span>);	<span class="comment">// Monomorphic</span></div><div class="line">add(<span class="string">"a"</span>,<span class="string">"b"</span>);	<span class="comment">// Polymorphic</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Optimizing-Compiler"><a href="#Optimizing-Compiler" class="headerlink" title="Optimizing Compiler"></a>Optimizing Compiler</h4><ol>
<li>Optimizing Compiler會收集<code>Inline Caches</code>的資訊來對於常使用的函式重新編譯。</li>
<li><code>try/catch</code>區塊無法最佳化 (影片為2012年，不曉得目前是否仍是如此)</li>
<li>若要使用<code>try/catch</code>則使用下列方式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">perf</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">// do work here</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	perf();</div><div class="line">&#125; <span class="keyword">catch</span> (e)&#123;</div><div class="line">	<span class="comment">// handle exceptions here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h3 id="反最佳化"><a href="#反最佳化" class="headerlink" title="反最佳化"></a>反最佳化</h3><p>若 V8 發現最佳化的效果不佳會自動反最佳化，如此一來會造成效能上的損失。</p>
<h4 id="優化-3"><a href="#優化-3" class="headerlink" title="優化"></a>優化</h4><ul>
<li>不要改變最佳化的function造成<code>Hidden Class</code>的改變。</li>
</ul>
<hr>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.isPrimeDivisible = <span class="function"><span class="keyword">function</span>(<span class="params">candidate</span>)</span>&#123;</div><div class="line">	<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">1</span> ; i &lt;= <span class="keyword">this</span>.prime_count ; ++i )&#123;</div><div class="line">		<span class="keyword">if</span> ( candidate % <span class="keyword">this</span>.primes[i] === <span class="number">0</span> ) </div><div class="line">			<span class="keyword">return</span> <span class="literal">true</span> ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>這段程式碼中由於超出邊界，如此一來造成效能上的影響<br><img src="/img/JavaScript/about/v8_9.PNG" alt=""><br>修正邊界後<br><img src="/img/JavaScript/about/v8_10.PNG" alt=""></p>
<p>演算法上的影響也很重要。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.isPrimeDivisible = <span class="function"><span class="keyword">function</span>(<span class="params">candidate</span>)</span>&#123;</div><div class="line">	<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">1</span> ; i &lt;= <span class="keyword">this</span>.prime_count ; ++i )&#123;</div><div class="line">		<span class="keyword">var</span> current_prime = <span class="keyword">this</span>.primes[i] ;</div><div class="line">		<span class="keyword">if</span> ( current_prime * current_prime &gt; candidate )&#123;</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span> ;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> ( candidate % current_prime === <span class="number">0</span> ) </div><div class="line">			<span class="keyword">return</span> <span class="literal">true</span> ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>改進後的效能差異<br><img src="/img/JavaScript/about/v8_13.PNG" alt=""></p>
<hr>
<h2 id="單執行緒"><a href="#單執行緒" class="headerlink" title="單執行緒"></a>單執行緒</h2><p>由於起初做為瀏覽器的語言，JavaScript被設計為單執行緒，如此才不會在多執行緒的情況下造成 DOM 操作上的問題。</p>
<p>HTML5的<code>Web Worker</code>可以另外建立執行緒，但新的執行緒仍不能操作 DOM。</p>
<h2 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h2><p>現在知道了JavaScript是如何編譯運行的，那JavaScript是如何處理異步事件像是DOM、HTTP Request、Timer等等呢？</p>
<p><img src="/img/JavaScript/about/event_1.PNG" alt=""><br>前面提到的V8就負責了<code>heap</code>和<code>stack</code>操作，那些WebAPIs則不包含在V8裡頭。 (瀏覽器端的WebAPIs和Node.js的API不同，但<code>Event Loop</code>原理是差不多的。)</p>
<p>單執行緒代表了只有一個<code>call stack</code>，也代表了一次只能做一件事情。</p>
<p>而其他API的事件則會經由其他的執行緒來運行，等執行完成再觸發callback。</p>
<p>下列一段程式碼在stack的情形。<br><img src="/img/JavaScript/about/event_2.PNG" alt=""></p>
<hr>
<p>stack 的情形也常在 console 中看到。<br><img src="/img/JavaScript/about/event_3.PNG" alt=""></p>
<p>無窮遞迴的情形。<br><img src="/img/JavaScript/about/event_4.PNG" alt=""></p>
<hr>
<h3 id="Task-Queue"><a href="#Task-Queue" class="headerlink" title="Task Queue"></a>Task Queue</h3><p><code>task queue</code>用來儲存需要執行的程式。</p>
<p>setTimeout 經由 API 在別的執行緒進行。<br><img src="/img/JavaScript/about/event_5.PNG" alt=""></p>
<p>一但 API 執行完，則把 callback 放回<code>task queue</code>等待運行<br><img src="/img/JavaScript/about/event_6.PNG" alt=""></p>
<p>這時stack中的函式可能還在運行或者已完成，但要等到stack中的函式運行完才將<code>task queue</code>的任務放進 stack 運行<br><img src="/img/JavaScript/about/event_7.PNG" alt=""></p>
<hr>
<p>DOM事件的監聽情形。<br><img src="/img/JavaScript/about/event_8.PNG" alt=""></p>
<p>按下按鈕後<br><img src="/img/JavaScript/about/event_9.PNG" alt=""><br>逐步執行<br><img src="/img/JavaScript/about/event_10.PNG" alt=""></p>
<hr>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p><a href="https://www.youtube.com/watch?v=UJPdhx5zTaw" target="_blank" rel="external">Google I/O 2012 - Breaking the JavaScript Speed Limit with V8</a><br><a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ" target="_blank" rel="external">Philip Roberts: What the heck is the event loop anyway? | JSConf EU 2014</a><br><a href="https://vimeo.com/96425312" target="_blank" rel="external">Philip Roberts: Help, I’m stuck in an event-loop</a><br><a href="https://github.com/v8/v8/wiki" target="_blank" rel="external">V8’s public wiki</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近研究了下 V8 和 Event Loop，以下圖片和程式碼皆引用自影片中。&lt;/p&gt;
    
    </summary>
    
      <category term="Programming Language" scheme="http://jeno5980515.github.io/categories/Programming-Language/"/>
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/categories/Programming-Language/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/tags/JavaScript/"/>
    
      <category term="V8" scheme="http://jeno5980515.github.io/tags/V8/"/>
    
      <category term="Event Loop" scheme="http://jeno5980515.github.io/tags/Event-Loop/"/>
    
  </entry>
  
  <entry>
    <title>[Other] Sitemap Parsing Error</title>
    <link href="http://jeno5980515.github.io/2017/04/28/Other/Sitemap%20Parsing%20Error/"/>
    <id>http://jeno5980515.github.io/2017/04/28/Other/Sitemap Parsing Error/</id>
    <published>2017-04-28T08:45:30.000Z</published>
    <updated>2017-04-28T09:01:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近送sitemap到網站管理員總是出現Parsing Error，看了官方文件<a href="https://support.google.com/webmasters/answer/183668?visit_id=1-636289544946475704-2472833756&amp;rd=1" target="_blank" rel="external">Build and submit a sitemap</a>才發現原來是有些特殊字元沒處理到。</p>
<p><code>&lt; &gt; &amp; &#39; &quot;</code></p>
<p>文件上說得處理這五個符號。</p>
<a id="more"></a>
<h2 id="escape"><a href="#escape" class="headerlink" title="escape"></a>escape</h2><p>escape可以妥善的處理特殊符號，但對URL做escape會連<code>:</code>都做處理，因此在URL上不適用。</p>
<h2 id="encodeURI"><a href="#encodeURI" class="headerlink" title="encodeURI"></a>encodeURI</h2><p>encodeURI不會對<code>, / ? : @ &amp; = + $ #</code>這些做處理。</p>
<h2 id="encodeURIComponent"><a href="#encodeURIComponent" class="headerlink" title="encodeURIComponent"></a>encodeURIComponent</h2><p>encodeURIComponent連<code>:</code>和<code>/</code>都做處理了，因此也不適用。</p>
<h2 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h2><p>既然如此就只能自己做處理了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">encodeURI</span>(url).replace(<span class="regexp">/&amp;/</span>,<span class="string">"%26"</span>).replace(<span class="regexp">/&lt;/</span>,<span class="string">"%3C"</span>).replace(<span class="regexp">/&gt;/</span>,<span class="string">"%3E"</span>).replace(<span class="regexp">/'/</span>,<span class="string">"%27"</span>).replace(<span class="regexp">/"/</span>,<span class="string">"%22"</span>);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近送sitemap到網站管理員總是出現Parsing Error，看了官方文件&lt;a href=&quot;https://support.google.com/webmasters/answer/183668?visit_id=1-636289544946475704-2472833756&amp;amp;rd=1&quot;&gt;Build and submit a sitemap&lt;/a&gt;才發現原來是有些特殊字元沒處理到。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt; &amp;gt; &amp;amp; &amp;#39; &amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;文件上說得處理這五個符號。&lt;/p&gt;
    
    </summary>
    
      <category term="Other" scheme="http://jeno5980515.github.io/categories/Other/"/>
    
    
      <category term="Sitemap" scheme="http://jeno5980515.github.io/tags/Sitemap/"/>
    
  </entry>
  
  <entry>
    <title>[Web] Performance</title>
    <link href="http://jeno5980515.github.io/2017/04/28/Web/Overall/Performance/"/>
    <id>http://jeno5980515.github.io/2017/04/28/Web/Overall/Performance/</id>
    <published>2017-04-28T03:43:34.000Z</published>
    <updated>2017-05-01T22:29:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近看了Google的<a href="https://developers.google.com/web/" target="_blank" rel="external">Learn How to Develop the Next Generation of Applications for the Web</a>和Udacity上介紹關於Performance的影片在此紀錄一下，範例及圖片大多取自於其中。</p>
<a id="more"></a>
<h1 id="DOM-amp-CSSOM"><a href="#DOM-amp-CSSOM" class="headerlink" title="DOM &amp; CSSOM"></a>DOM &amp; CSSOM</h1><p>HTML轉換成DOM (Document Object Model) 的流程如下圖<br><img src="/img/Web/Performance/html2dom.PNG" alt=""><br>首先會先將HTML字串<br><img src="/img/Web/Performance/html2dom1.PNG" alt=""><br>轉換成一個一個的token<br><img src="/img/Web/Performance/html2dom2.PNG" alt=""><br>再將這些token轉換成一個一個的node<br><img src="/img/Web/Performance/html2dom3.PNG" alt=""><br>最後就形成了DOM<br><img src="/img/Web/Performance/html2dom4.PNG" alt=""></p>
<p>CSS轉換成CSSOM (CSS Object Model) 的流程如下圖<br><img src="/img/Web/Performance/css2cssom.PNG" alt=""><br>直接看到轉換成node的部分<br><img src="/img/Web/Performance/css2cssom1.PNG" alt=""><br>p是body的子節點，因為所有可見的內容都是body的一部份。</p>
<p>其中子節點會繼承父節點的屬性。</p>
<h1 id="CSS-Selector"><a href="#CSS-Selector" class="headerlink" title="CSS Selector"></a>CSS Selector</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>以下兩種選擇會是哪一種比較快？<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">h1 &#123; ... &#125;</div><div class="line">div p &#123; ... &#125;</div></pre></td></tr></table></figure></p>
<p>第一種會找所有的h1並且設置屬性，第二種則是找到所有的p且往上找是否父節點為div。</p>
<p>因此直接選擇h1會比較快。</p>
<p>CSS是從右到左，因為從右邊讀取效率會比較高，從左到右會浪費許多時間在錯誤的查找上。</p>
<p><a href="http://stackoverflow.com/questions/5797014/why-do-browsers-match-css-selectors-from-right-to-left" target="_blank" rel="external">Why do browsers match CSS selectors from right to left?</a></p>
<h1 id="渲染樹"><a href="#渲染樹" class="headerlink" title="渲染樹"></a>渲染樹</h1><p>建立渲染樹的過程中，會從DOM中找node且在CSSOM找是否有相對應的node然後加到渲染樹上。<br><img src="/img/Web/Performance/render_tree.PNG" alt=""><br>由於渲染樹只會加上可見的元素，因此<code>display:none</code>的span不會加到樹上，但Pseudo Elements則會。</p>
<h1 id="Attribute"><a href="#Attribute" class="headerlink" title="Attribute"></a>Attribute</h1><p><code>viewport</code>可以告知瀏覽器Layout的寬度應該多長，若沒告知則為預設的980px。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width;"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="media"><a href="#media" class="headerlink" title="media"></a>media</h2><p>若是不希望阻塞渲染，可在css來源的tag加上media屬性，如此一來檔案仍會下載但不會阻塞。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"print.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">media</span>=<span class="string">"print"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><p>可在不需要依賴DOM的script上加上async屬性，如此一來就不會阻塞渲染。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app.js"</span> <span class="attr">async</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="Critical-Rendering-Path-Diagrams"><a href="#Critical-Rendering-Path-Diagrams" class="headerlink" title="Critical Rendering Path Diagrams"></a>Critical Rendering Path Diagrams</h1><p><img src="/img/Web/Performance/diagram.png" alt=""><br>發出HTML請求-&gt;發出CSS請求並同時建立DOM-&gt;建立CSSOM-&gt;渲染</p>
<p><img src="/img/Web/Performance/diagram2.png" alt=""><br>發出HTML請求-&gt;發出CSS、JavaScript請求並同時建立DOM(遇到JavaScript處則暫停建立DOM)-&gt;建立CSSOM-&gt;執行JavaScript-&gt;繼續建立DOM-&gt;渲染</p>
<p>瀏覽器會使用<code>preload scanner</code>將所有css和js一起載入。</p>
<h1 id="Pixel-Pipeline"><a href="#Pixel-Pipeline" class="headerlink" title="Pixel Pipeline"></a>Pixel Pipeline</h1><p>利用js修改DOM渲染的流程可以分為以下三種</p>
<ol>
<li><p>JS / CSS &gt; Style &gt; Layout &gt; Paint &gt; Composite<br><img src="/img/Web/Performance/pipeline1.jpg" alt=""><br>像是修改<code>margin-left</code>、<code>width</code>等等。</p>
</li>
<li><p>JS / CSS &gt; Style &gt; Paint &gt; Composite<br><img src="/img/Web/Performance/pipeline2.jpg" alt=""><br>像是修改<code>background-image</code>、<code>color</code>等等。</p>
</li>
<li><p>JS / CSS &gt; Style &gt; Composite<br><img src="/img/Web/Performance/pipeline3.jpg" alt=""><br>像是修改<code>transform</code>等等。</p>
</li>
</ol>
<p>需要的流程越少成本就越小，因此要盡量選擇第三種方法。</p>
<p><a href="https://csstriggers.com/" target="_blank" rel="external">CSS Triggers</a>可以查看每個style所會觸發的流程。</p>
<h1 id="Load-Idle-Animate-Response"><a href="#Load-Idle-Animate-Response" class="headerlink" title="Load, Idle, Animate, Response"></a>Load, Idle, Animate, Response</h1><p>我們必須把真正需要的在Load載入來減少時間，像是基本架構、重要的文字等等。</p>
<p>在Idle的時候則可以載入等一下可能會使用到的東西。</p>
<h1 id="Chrome-DevTools"><a href="#Chrome-DevTools" class="headerlink" title="Chrome DevTools"></a>Chrome DevTools</h1><p>最近Chrome的Timeline和Profiles等等似乎都合併到Performance裡了。</p>
<p>FPS Metor用來查看即時的狀況<br><img src="/img/Web/Performance/devtool1.PNG" alt=""></p>
<p>Paint Flashing用來查看即時Paint的情形<br><img src="/img/Web/Performance/devtool12.PNG" alt=""></p>
<p>經由左上角的錄製鈕來逐Frame檢視<br><img src="/img/Web/Performance/devtool2.PNG" alt=""></p>
<p>Screenshots用來查看每個Frame的當前畫面直接鎖定需要的地方<br><img src="/img/Web/Performance/devtool3.PNG" alt=""></p>
<p>若是大量動畫的狀態要盡量保持在60fps也就是16ms以下(1000/60)才會順暢。<br><img src="/img/Web/Performance/devtool4.PNG" alt=""></p>
<p>Summary圖表顯示了所花的時間<br><img src="/img/Web/Performance/devtool5.PNG" alt=""></p>
<p>Event Log則可以看細部所花的時間，Self Time代表在程式內部的，Total Time則是包含了內部呼叫的其他函式。<br><img src="/img/Web/Performance/devtool6.PNG" alt=""></p>
<p>開啟Memory選項則可以看到內存的使用情形。<br><img src="/img/Web/Performance/devtool9.PNG" alt=""></p>
<h1 id="實機測試-Chrome-DevTools"><a href="#實機測試-Chrome-DevTools" class="headerlink" title="實機測試 + Chrome DevTools"></a>實機測試 + Chrome DevTools</h1><p>若希望使用開發者工具來檢視手機上的結果<br>可開啟<code>設定-&gt;開發者選項-&gt;USB偵錯</code><br><img src="/img/Web/Performance/devtool7.png" alt=""><br>在Chrome上連結設<code>chrome://inspect</code>即可看見手機上的網頁，在需要測試的按<code>inspect</code>即可進入開發者模式。</p>
<p>若想要直接在手機上開啟本機伺服器檔案，則可以Port forwarding設置且按下<code>Enable port forwarding</code>即可。<br><img src="/img/Web/Performance/devtool8.png" alt=""></p>
<h1 id="Micro-Optimizations"><a href="#Micro-Optimizations" class="headerlink" title="Micro Optimizations"></a>Micro Optimizations</h1><p>由於JavaScript不見得是照我們寫的運行，我們無法知道如何引擎是做最佳化，所以不需要花時間在微最佳化上。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Don't waste time between them</span></div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; len ; i ++ ) ...</div><div class="line"></div><div class="line">while ( ++ i &lt; len ) ...</div></pre></td></tr></table></figure>
<h1 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h1><p>雖然60fps換算下來是16ms，但我們實際上必須要在更短的時間內執行完程式，因為會有額外的時間拿來做style計算、layer管理等等。</p>
<p>setTimeout和setInterval不適合拿來處理動畫，因為若我們在像是style計算中突然要執行JavaScript，如此一來整個渲染流程又會重新執行而造成頻率不一致，而requestAnimationFrame可以妥善的安排JavaScript執行的時間。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">time</span>) </span>&#123;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> requestId = requestAnimationFrame(render);</div><div class="line"><span class="comment">//取消動畫</span></div><div class="line">cancelAnimationFrame(requestId);</div></pre></td></tr></table></figure>
<h1 id="Web-Workers"><a href="#Web-Workers" class="headerlink" title="Web Workers"></a>Web Workers</h1><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank" rel="external">Web Workers</a>可以讓js運行在不同的thread而不會造成阻塞。</p>
<h1 id="Memory-Management"><a href="#Memory-Management" class="headerlink" title="Memory Management"></a>Memory Management</h1><ol>
<li>盡量別用delete，因為JavaScript引擎會自動最佳化，若是delete其中的元素則得重新計算。</li>
<li>null不會真的清空物件，只會讓物件指向null</li>
<li>全域變數不會被GC回收</li>
<li>取消綁定事件若不再需要</li>
<li>若使用資料快取要妥善管理</li>
</ol>
<p>考慮以下的情況<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myObj = &#123;</div><div class="line">    <span class="attr">callMeMaybe</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> myRef = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">var</span> val = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Time is running out!'</span>); </div><div class="line">            myRef.callMeMaybe();</div><div class="line">        &#125;, <span class="number">1000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">myObj.callMeMaybe();</div><div class="line">myObj = <span class="literal">null</span>;</div></pre></td></tr></table></figure></p>
<p>即使設為null，setTimeout仍會持續進行，這是因為myRef在closure中指向myObj，因此myObj不會被GC回收。</p>
<p><a href="https://www.smashingmagazine.com/2012/11/writing-fast-memory-efficient-javascript/" target="_blank" rel="external">How To Write Fast, Memory-Efficient JavaScript</a></p>
<h1 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h1><p>當Selector條件越多效能就越受影響，使用<code>.box-three</code>會比<code>:nth-child(3)</code>的選擇好。</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><a href="https://dl.dropboxusercontent.com/u/2272348/codez/udacity/box-recalc-style-slow.html" target="_blank" rel="external">box-recalc-style-slow</a></p>
<p>CSS<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span><span class="selector-class">.toggled</span> <span class="selector-tag">main</span> <span class="selector-class">.box-container</span> <span class="selector-class">.box</span><span class="selector-pseudo">:nth-child(2n)</span> &#123;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#777</span> <span class="meta">!important</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>JavaScript<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">button.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">document</span>.body.classList.toggle(<span class="string">'toggled'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>如此一來每個<code>.box</code>都會看且判斷是否是偶數個，再逐一往上(左)找是否符合</p>
<p>效能<br><img src="/img/Web/Performance/performance2.png" alt=""></p>
<p>改進方法如下</p>
<p>CSS<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span><span class="selector-class">.gray</span> &#123;</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#777</span> <span class="meta">!important</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> JavaScript<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">button.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">document</span>.body.classList.toggle(<span class="string">'toggled'</span>);</div><div class="line">	<span class="keyword">var</span> boxes = container.querySelectorAll(<span class="string">".box"</span>) ;</div><div class="line">	<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; boxes.length ; i += <span class="number">2</span> )&#123;</div><div class="line">		boxes[i].classList.toggle(<span class="string">'gray'</span>,<span class="built_in">document</span>.body.classList.contains(<span class="string">'toggled'</span>));</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p> 如此一來會直接先找到<code>.gray</code>才找<code>.box</code>，省去了一半的數量</p>
<p> 效能<br> <img src="/img/Web/Performance/performance.png" alt=""></p>
<h1 id="Forced-Synchronous-Layouts"><a href="#Forced-Synchronous-Layouts" class="headerlink" title="Forced Synchronous Layouts"></a>Forced Synchronous Layouts</h1><p>若我們每次都要取得Layout再重新計算，這樣會造成<code>Forced Synchronous Layouts</code>。</p>
<h2 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo"></a>Demo</h2><p><a href="http://output.jsbin.com/aqavin/2/quiet" target="_blank" rel="external">Slow stuff</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (goSlow) &#123;</div><div class="line">	<span class="keyword">while</span> (i--) &#123;</div><div class="line">		ps[i].style.width = sizer.offsetWidth + <span class="string">'px'</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">	size = sizer.offsetWidth;</div><div class="line">	<span class="keyword">while</span> (i--) &#123;</div><div class="line">		ps[i].style.width = size + <span class="string">'px'</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到先把Node的寬度快取住會比每次都要重新取得快的許多。</p>
<h2 id="Demo-2"><a href="#Demo-2" class="headerlink" title="Demo"></a>Demo</h2><p><a href="https://github.com/udacity/pizza-perf/blob/master/pizza.html" target="_blank" rel="external">pizza-perf</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changePizzaSizes</span>(<span class="params">size</span>) </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">document</span>.querySelectorAll(<span class="string">".randomPizzaContainer"</span>).length; i++) &#123;</div><div class="line">		<span class="keyword">var</span> dx = determineDx(<span class="built_in">document</span>.querySelectorAll(<span class="string">".randomPizzaContainer"</span>)[i], size);</div><div class="line">		<span class="keyword">var</span> newwidth = (<span class="built_in">document</span>.querySelectorAll(<span class="string">".randomPizzaContainer"</span>)[i].offsetWidth + dx) + <span class="string">'px'</span>;</div><div class="line">		<span class="built_in">document</span>.querySelectorAll(<span class="string">".randomPizzaContainer"</span>)[i].style.width = newwidth;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>改為<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changePizzaSizes</span>(<span class="params">size</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> randomPizzas = <span class="built_in">document</span>.querySelectorAll(<span class="string">".randomPizzaContainer"</span>) ;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; randomPizzas.length; i++) &#123;</div><div class="line">		<span class="keyword">var</span> dx = determineDx(randomPizzas[i], size);</div><div class="line">		<span class="keyword">var</span> newwidth = (randomPizzas[i].offsetWidth + dx) + <span class="string">'px'</span>;</div><div class="line">		randomPizzas[i].style.width = newwidth;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>查看determineDx函式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">determineDx</span> (<span class="params">elem, size</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> oldwidth = elem.offsetWidth;</div><div class="line">	<span class="keyword">var</span> windowwidth = <span class="built_in">document</span>.querySelector(<span class="string">"#randomPizzas"</span>).offsetWidth;</div><div class="line">	<span class="keyword">var</span> oldsize = oldwidth / windowwidth;</div><div class="line"></div><div class="line">	<span class="comment">// Changes the slider value to a percent width</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">sizeSwitcher</span> (<span class="params">size</span>) </span>&#123;</div><div class="line">		<span class="keyword">switch</span>(size) &#123;</div><div class="line">			<span class="keyword">case</span> <span class="string">"1"</span>:</div><div class="line">			<span class="keyword">return</span> <span class="number">0.25</span>;</div><div class="line">			<span class="keyword">case</span> <span class="string">"2"</span>:</div><div class="line">			<span class="keyword">return</span> <span class="number">0.3333</span>;</div><div class="line">			<span class="keyword">case</span> <span class="string">"3"</span>:</div><div class="line">			<span class="keyword">return</span> <span class="number">0.5</span>;</div><div class="line">			<span class="keyword">default</span>:</div><div class="line">			<span class="built_in">console</span>.log(<span class="string">"bug in sizeSwitcher"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> newsize = sizeSwitcher(size);</div><div class="line">	<span class="keyword">var</span> dx = (newsize - oldsize) * windowwidth;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> dx;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>發現原本是計算差值然後加上去，這樣子可以改寫成直接給予新的值即可，因此改寫為<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changePizzaSizes</span>(<span class="params">size</span>) </span>&#123;</div><div class="line">	<span class="keyword">switch</span>(size) &#123;</div><div class="line">		<span class="keyword">case</span> <span class="string">"1"</span>:</div><div class="line">		newWidth = <span class="number">0.25</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">"2"</span>:</div><div class="line">		newWidth = <span class="number">0.3333</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">"3"</span>:</div><div class="line">		newWidth = <span class="number">0.5</span>;</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"bug in sizeSwitcher"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> randomPizzas = <span class="built_in">document</span>.querySelectorAll(<span class="string">".randomPizzaContainer"</span>) ;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; randomPizzas.length; i++) &#123;</div><div class="line">		randomPizzas[i].style.width = newWidth + <span class="string">"%"</span> ;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="CSS-or-JavaScript"><a href="#CSS-or-JavaScript" class="headerlink" title="CSS or JavaScript?"></a>CSS or JavaScript?</h1><p>動畫究竟該用CSS還是JavaScript?</p>
<ol>
<li>當元素是單一的用CSS</li>
<li>當需要信號控制像是stop、slow down、reverse等等則用JavaScript</li>
<li>更改Layout(位置)或需要Paint是相當耗效能的</li>
<li>盡量用transforms或opacity</li>
<li>原則上CSS動畫會在<code>compositor thread</code>上執行，所以當主執行緒有繁重的任務時動畫不會被干擾，JavaScript則會佔用主執行緒</li>
<li>不論CSS或JavaScript動畫只要觸發Layout或Paint都會在主執行緒上執行</li>
</ol>
<p><a href="https://developers.google.com/web/fundamentals/design-and-ui/animations/css-vs-javascript" target="_blank" rel="external">CSS Versus JavaScript Animations</a><br><a href="https://developers.google.com/web/fundamentals/design-and-ui/animations/animations-and-performance" target="_blank" rel="external">Animations and Performance</a></p>
<h1 id="will-change"><a href="#will-change" class="headerlink" title="will-change"></a>will-change</h1><p>利用多個Layer可以讓元素跳過Layout和Paint而直接到Composite，但過多的Layer會造成管理Layer上效能的問題。</p>
<p><code>will-change</code>屬性會告知瀏覽器即將運行的事件，讓瀏覽器建立一個Layer<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.circle</span> &#123;</div><div class="line">	<span class="attribute">will-change </span>: transform;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>也可以在will-change上設置top、left等等，雖然會增加一層Layer但仍得進行Layout和Paint，因此不會有太大的改善。</p>
<p>在舊的瀏覽器上可以使用<code>translateZ</code>達到同樣的效果，一樣會告知瀏覽器建立Layer。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.circle</span>&#123;</div><div class="line">	<span class="attribute">transform</span>: <span class="built_in">translateZ</span>(0) ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以用Chrome的DevTools的Layer標籤查看網頁Layer情形。<br><img src="/img/Web/Performance/devtool10.PNG" alt=""></p>
<p>可在Detail看到形成Layer的原因。<br><img src="/img/Web/Performance/devtool11.PNG" alt=""></p>
<h2 id="Demo-3"><a href="#Demo-3" class="headerlink" title="Demo"></a>Demo</h2><p><a href="https://dl.dropboxusercontent.com/u/2272348/codez/parallax/demo-promo/index.html" target="_blank" rel="external">demo-promo</a></p>
<p>在<code>section#background</code>加上<code>will-change:transform;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">section#background &#123;</div><div class="line">	will-change: transform;</div><div class="line">	background: #1e2124 url(&quot;../../images/parallax-bg.jpg&quot;) center 0 no-repeat;</div><div class="line">	width: 960px;</div><div class="line">	height: 3000px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以在發現原本Paint整個頁面的變成只剩下Paint滾動條。</p>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://developers.google.com/web/" target="_blank" rel="external">Learn How to Develop the Next Generation of Applications for the Web</a><br><a href="https://classroom.udacity.com/courses/ud884" target="_blank" rel="external">Website Performance Optimization</a><br><a href="https://classroom.udacity.com/courses/ud860" target="_blank" rel="external">Browser Rendering Optimization</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近看了Google的&lt;a href=&quot;https://developers.google.com/web/&quot;&gt;Learn How to Develop the Next Generation of Applications for the Web&lt;/a&gt;和Udacity上介紹關於Performance的影片在此紀錄一下，範例及圖片大多取自於其中。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://jeno5980515.github.io/categories/Web/"/>
    
      <category term="Overall" scheme="http://jeno5980515.github.io/categories/Web/Overall/"/>
    
    
      <category term="Web" scheme="http://jeno5980515.github.io/tags/Web/"/>
    
      <category term="Performance" scheme="http://jeno5980515.github.io/tags/Performance/"/>
    
  </entry>
  
</feed>
