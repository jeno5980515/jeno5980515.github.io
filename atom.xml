<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jeno&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jeno5980515.github.io/"/>
  <updated>2017-05-17T13:41:53.000Z</updated>
  <id>http://jeno5980515.github.io/</id>
  
  <author>
    <name>Jeno</name>
    <email>jeno5980515@yahoo.com.tw</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[JavaScript] Curry</title>
    <link href="http://jeno5980515.github.io/2017/05/17/Programming%20Language/JavaScript/Curry/"/>
    <id>http://jeno5980515.github.io/2017/05/17/Programming Language/JavaScript/Curry/</id>
    <published>2017-05-17T13:15:57.000Z</published>
    <updated>2017-05-17T13:41:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>Curry</code>化指的是將接受多個參數的函數轉換成可以依次傳入參數的函式，以下見例子。</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">x , y</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> x + y ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">add(<span class="number">1</span>,<span class="number">2</span>) ; <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p>Curry 化後<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> x + y ;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">add(<span class="number">1</span>)(<span class="number">2</span>); <span class="comment">// 3</span></div></pre></td></tr></table></figure></p>
<p>這樣做有什麼好處？好處在於我們利用不同的參數來創造不同的函式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> addOne = add(<span class="number">1</span>) ;</div><div class="line"><span class="keyword">var</span> addTwo = add(<span class="number">2</span>) ;</div><div class="line">addOne(<span class="number">1</span>) ; <span class="comment">// 2</span></div><div class="line">addTwo(<span class="number">1</span>) ; <span class="comment">// 3</span></div></pre></td></tr></table></figure></p>
<p>許多函式庫有提供<code>Curry</code>化的功能，像是<code>lodash</code>等等的函式庫。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">x , y , z</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> x + y + z ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> curryAdd = _.curry(add) ;</div><div class="line">curryAdd(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// 6 </span></div><div class="line">curryAdd(<span class="number">1</span>,<span class="number">2</span>)(<span class="number">3</span>); <span class="comment">// 6 </span></div><div class="line">curryAdd(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>); <span class="comment">// 6</span></div></pre></td></tr></table></figure></p>
<p>接下來透過實作來了解是如何辦到 Curry 功能的。</p>
<h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>首先無論如何先回傳一個函式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> curry = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再來我們要知道什麼時候是參數已經傳完的情況並且作處理，若參數已經傳完則利用 apply 執行函式。</p>
<p>在這邊先 slice 一份 arguments，而由於 arguments 不是陣列而是物件，因此不可以直接對 arguments 做 slice 。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> curry = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>);</div><div class="line">		<span class="keyword">if</span> ( args.length &gt;= fn.length ) &#123;</div><div class="line">			<span class="keyword">return</span> fn.apply(<span class="literal">null</span>, args);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>若參數還沒傳完，這時候要回傳個函式讓使用者繼續呼叫<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> curry = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>);</div><div class="line">		<span class="keyword">if</span> ( args.length &gt;= fn.length ) &#123;</div><div class="line">			<span class="keyword">return</span> fn.apply(<span class="literal">null</span>, args);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>若再次呼叫這個函式，則直接把帶入的參數連接到之前的參數後面，並再次呼叫原先的 curried 函式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> curry = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">	<span class="comment">// 為了再次呼叫命名為 curried</span></div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">curried</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>);</div><div class="line">		<span class="keyword">if</span> ( args.length &gt;= fn.length ) &#123;</div><div class="line">			<span class="keyword">return</span> fn.apply(<span class="literal">null</span>, args);</div><div class="line">		&#125;	</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="keyword">var</span> args2 = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>);</div><div class="line">				<span class="keyword">return</span> curried.apply(<span class="literal">null</span>, args.concat(args2)); </div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如此一來就完成了</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> curry = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">curried</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>);</div><div class="line">		<span class="keyword">if</span> ( args.length &gt;= fn.length ) &#123;</div><div class="line">			<span class="keyword">return</span> fn.apply(<span class="literal">null</span>, args);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="keyword">var</span> args2 = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>);</div><div class="line">				<span class="keyword">return</span> curried.apply(<span class="literal">null</span>, args.concat(args2)); </div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">x , y ,z</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> x + y + z ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> add = curry(add);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>)(<span class="number">3</span>));	<span class="comment">// 6</span></div><div class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>)(<span class="number">2</span>,<span class="number">3</span>));	<span class="comment">// 6</span></div><div class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>));	<span class="comment">// 6</span></div><div class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));	<span class="comment">// 6</span></div></pre></td></tr></table></figure>
<h3 id="不限參數"><a href="#不限參數" class="headerlink" title="不限參數"></a>不限參數</h3><p>若我們希望這個函式不限定參數數量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">add(<span class="number">1</span>) <span class="comment">//1</span></div><div class="line">add(<span class="number">1</span>)(<span class="number">2</span>) <span class="comment">// 3</span></div><div class="line">add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)<span class="comment">// 6</span></div></pre></td></tr></table></figure></p>
<p>以上的方法是不合理的，因為它不知道現在該繼續回傳函式還是該回傳結果，我們可以提供個函式讓它知道已經執行完要得到結果。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">add(<span class="number">1</span>).value() <span class="comment">//1</span></div><div class="line">add(<span class="number">1</span>)(<span class="number">2</span>).value() <span class="comment">// 3</span></div><div class="line">add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>).value()<span class="comment">// 6</span></div></pre></td></tr></table></figure></p>
<p>首先一樣先回傳一個函式，並且讓這個函式回傳自己以便繼續傳入參數，且另外給這個函式一個 value 函式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> curried = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> curried ;</div><div class="line">	&#125;</div><div class="line">	curried.value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> curried ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在每次帶入參數後將值加總，並在 value 函式回傳結果即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">sum</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> curried = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">		sum += num ;</div><div class="line">		<span class="keyword">return</span> curried ;</div><div class="line">	&#125;</div><div class="line">	curried.value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> sum ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> curried ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如此一來即可不斷對 add 帶入參數<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myAdder = add ;</div><div class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++) &#123;</div><div class="line">	myAdder = myAdder(<span class="number">10</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">myAdder(<span class="number">10</span>); <span class="comment">// 100</span></div></pre></td></tr></table></figure></p>
<p>利用 arguments 來處理一次帶入多個參數<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> sum = <span class="number">0</span> ;</div><div class="line">	<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="built_in">arguments</span>.length ; i ++ )&#123;</div><div class="line">		sum += <span class="built_in">arguments</span>[i] ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">var</span> curried = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="built_in">arguments</span>.length ; i ++ )&#123;</div><div class="line">			sum += <span class="built_in">arguments</span>[i] ;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> curried ;</div><div class="line">	&#125;</div><div class="line">	curried.value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> sum ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> curried ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">add(<span class="number">1</span>).value() <span class="comment">//1</span></div><div class="line">add(<span class="number">1</span>)(<span class="number">2</span>).value() <span class="comment">// 3</span></div><div class="line">add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>).value() <span class="comment">// 6</span></div><div class="line">add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)(<span class="number">4</span>).value() <span class="comment">// 10</span></div><div class="line">add(<span class="number">1</span>)(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>).value() <span class="comment">// 10</span></div></pre></td></tr></table></figure></p>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p><a href="http://blog.carbonfive.com/2015/01/14/gettin-freaky-functional-wcurried-javascript/" target="_blank" rel="external">Gettin’ Freaky Functional w/Curried JavaScript</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Curry&lt;/code&gt;化指的是將接受多個參數的函數轉換成可以依次傳入參數的函式，以下見例子。&lt;/p&gt;
    
    </summary>
    
      <category term="Programming Language" scheme="http://jeno5980515.github.io/categories/Programming-Language/"/>
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/categories/Programming-Language/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/tags/JavaScript/"/>
    
      <category term="Curry" scheme="http://jeno5980515.github.io/tags/Curry/"/>
    
  </entry>
  
  <entry>
    <title>[Other] Untrusted</title>
    <link href="http://jeno5980515.github.io/2017/05/12/Other/Untrusted/"/>
    <id>http://jeno5980515.github.io/2017/05/12/Other/Untrusted/</id>
    <published>2017-05-12T10:44:20.000Z</published>
    <updated>2017-05-12T11:27:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://alexnisnevich.github.io/untrusted/" target="_blank" rel="external">Untrusted</a> 這個小遊戲必須由玩家編寫 JavaScript 來完成任務，遊戲目的只要操作角色到出口即可。</p>
<p>其中必須觀察現有的程式，大部分的程式是不能做修改的，必須在黑色的地方新增或修改程式讓遊戲可以順利進行。</p>
<a id="more"></a>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><h3 id="1-cellBlockA"><a href="#1-cellBlockA" class="headerlink" title="1. cellBlockA"></a>1. cellBlockA</h3><p>直接將黑色部分的程式刪除即可</p>
<h3 id="2-theLongWayOut"><a href="#2-theLongWayOut" class="headerlink" title="2. theLongWayOut"></a>2. theLongWayOut</h3><p>將 maze 重設大小 (非必要)，另外新增一個出口</p>
<h3 id="3-validationEngaged"><a href="#3-validationEngaged" class="headerlink" title="3. validationEngaged"></a>3. validationEngaged</h3><p>在維持一定數量的 block 情況下修改位置</p>
<h3 id="4-multiplicity"><a href="#4-multiplicity" class="headerlink" title="4. multiplicity"></a>4. multiplicity</h3><p>新增一個出口</p>
<h3 id="5-minesweeper"><a href="#5-minesweeper" class="headerlink" title="5. minesweeper"></a>5. minesweeper</h3><p>修改地雷的顏色</p>
<h3 id="6-drones101"><a href="#6-drones101" class="headerlink" title="6. drones101"></a>6. drones101</h3><p>新增一長條的 block 來阻擋 d 的去路</p>
<h3 id="7-colors"><a href="#7-colors" class="headerlink" title="7. colors"></a>7. colors</h3><p>這邊的電話可以讓你按Q或Ctrl+6執行callback，因此在callback裡每次呼叫都改變顏色即可</p>
<h3 id="8-intoTheWoods"><a href="#8-intoTheWoods" class="headerlink" title="8. intoTheWoods"></a>8. intoTheWoods</h3><p>將callback函式改成<code>generateForest</code>，如此一來一邊行動一邊重新產生樹林即可到達終點</p>
<h3 id="9-fordingTheRiver"><a href="#9-fordingTheRiver" class="headerlink" title="9. fordingTheRiver"></a>9. fordingTheRiver</h3><p>重新定義一個raft，然後放一堆到水面上穿過</p>
<h3 id="10-ambush"><a href="#10-ambush" class="headerlink" title="10. ambush"></a>10. ambush</h3><p>全部改成向右移動，並在出口的平行左邊放一個 block 阻擋 d 繼續向右擋到出口</p>
<h3 id="11-robot"><a href="#11-robot" class="headerlink" title="11. robot"></a>11. robot</h3><p>若機器人可以向右則向右，否則向下，接著跟機器人會合拿到鑰匙即可</p>
<h3 id="12-robotNav"><a href="#12-robotNav" class="headerlink" title="12. robotNav"></a>12. robotNav</h3><p>在第一個 # 柱子放四個直的，然後再第二個左邊放置一個4個 block 類似閃電的圖形，接著機器人行動判斷向右-&gt;向下-&gt;向上即可。</p>
<h3 id="13-robotMaze"><a href="#13-robotMaze" class="headerlink" title="13. robotMaze"></a>13. robotMaze</h3><p>這關運氣好，只有讓機器人先向下然後向右，某次產生的地圖可以過關</p>
<h3 id="14-crispsContest"><a href="#14-crispsContest" class="headerlink" title="14. crispsContest"></a>14. crispsContest</h3><p>修改的地方改成藍色鑰匙，行動順序如下</p>
<p>左邊<span style="color:blue;">⊗</span>-&gt;<span style="color:green;">⊗</span>-&gt;<span style="color:blue;">⊗</span>-&gt;右上<span style="color:red;">⊗</span>-&gt;<span style="color:green;">⊗</span>-&gt;<span style="color:red;">⊗</span>-&gt;右下<span style="color:yellow;">⊗</span>-&gt;<span style="color:blue;">⊗</span>-&gt;<span style="color:yellow;">⊗</span></p>
<h3 id="15-exceptionalCrossing"><a href="#15-exceptionalCrossing" class="headerlink" title="15. exceptionalCrossing"></a>15. exceptionalCrossing</h3><p>修改的地方改成一個未宣告的變數，如此一來就可以穿越水面到終點</p>
<h3 id="16-lasers"><a href="#16-lasers" class="headerlink" title="16. lasers"></a>16. lasers</h3><p>在最下面重寫<code>getRandomInt</code>函式，每次回傳到同一個數字例如0，如此一來雷射都會產生在那個點而已。</p>
<h3 id="17-pointers"><a href="#17-pointers" class="headerlink" title="17. pointers"></a>17. pointers</h3><p>這關莫名其妙過了，目前想法是一定要讓傳送點傳到傳送點不可以直接傳到 trap ，然後就會到出口附近的傳送點了。</p>
<h3 id="18-superDrEvalBros"><a href="#18-superDrEvalBros" class="headerlink" title="18. superDrEvalBros"></a>18. superDrEvalBros</h3><p>在callback裡面另外寫一個反重力函式讓角色不斷向上且註冊 timer 即可。</p>
<h3 id="19-documentObjectMadness"><a href="#19-documentObjectMadness" class="headerlink" title="19. documentObjectMadness"></a>19. documentObjectMadness</h3><p>這關不知道在幹麻亂動就過了 ….</p>
<h3 id="20-bossFight"><a href="#20-bossFight" class="headerlink" title="20. bossFight"></a>20. bossFight</h3><p>可以發現只有在最一開始限制了 dynamic 數量，並且非 dynamic 數量還允許你建一個，因此 define 一個 boss2 和 bullet2 ， 讓使用者碰觸到 boss2 的時候會發射向上的 bullet2 來炸光所有 boss 即可得到 Algorithm</p>
<h3 id="21-endOfTheLine"><a href="#21-endOfTheLine" class="headerlink" title="21. endOfTheLine"></a>21. endOfTheLine</h3><p>進入 menu 的 scripts 的 object.js，把 exit 裡的判斷 finalLevel 拿掉即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://alexnisnevich.github.io/untrusted/&quot;&gt;Untrusted&lt;/a&gt; 這個小遊戲必須由玩家編寫 JavaScript 來完成任務，遊戲目的只要操作角色到出口即可。&lt;/p&gt;
&lt;p&gt;其中必須觀察現有的程式，大部分的程式是不能做修改的，必須在黑色的地方新增或修改程式讓遊戲可以順利進行。&lt;/p&gt;
    
    </summary>
    
      <category term="Other" scheme="http://jeno5980515.github.io/categories/Other/"/>
    
    
      <category term="Game" scheme="http://jeno5980515.github.io/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 136 - Single Number</title>
    <link href="http://jeno5980515.github.io/2017/05/12/Online%20Judge/LeetCode/136%20-%20Single%20Number/"/>
    <id>http://jeno5980515.github.io/2017/05/12/Online Judge/LeetCode/136 - Single Number/</id>
    <published>2017-05-12T02:47:30.000Z</published>
    <updated>2017-05-12T02:54:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h1><p>有一個陣列裡面的元素皆出現兩次，只有一個元素為一次，找出獨立的那個元素。</p>
<a id="more"></a>
<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p>利用XOR運算，兩個相同的元素XOR運算結果為0，所以剩下的那一個就是答案。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>^<span class="number">2</span>^<span class="number">3</span>^<span class="number">4</span>^<span class="number">3</span>^<span class="number">2</span>^<span class="number">1</span> = <span class="number">1</span>^<span class="number">1</span>^<span class="number">2</span>^<span class="number">2</span>^<span class="number">3</span>^<span class="number">3</span>^<span class="number">4</span> = <span class="number">4</span></div></pre></td></tr></table></figure></p>
<h1 id="程式"><a href="#程式" class="headerlink" title="程式"></a>程式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;number[]&#125; nums</div><div class="line"> * @return &#123;number&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> singleNumber = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> number = nums[<span class="number">0</span>] ;</div><div class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">1</span> ; i &lt; nums.length ; i ++ )&#123;</div><div class="line">        number ^= nums[i] ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> number ;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h1&gt;&lt;p&gt;有一個陣列裡面的元素皆出現兩次，只有一個元素為一次，找出獨立的那個元素。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://jeno5980515.github.io/categories/Online-Judge/"/>
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/categories/Online-Judge/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/tags/LeetCode/"/>
    
      <category term="136" scheme="http://jeno5980515.github.io/tags/136/"/>
    
      <category term="XOR" scheme="http://jeno5980515.github.io/tags/XOR/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 5 - Longest Palindromic Substring</title>
    <link href="http://jeno5980515.github.io/2017/05/09/Online%20Judge/LeetCode/5%20-%20Longest%20Palindromic%20Substring/"/>
    <id>http://jeno5980515.github.io/2017/05/09/Online Judge/LeetCode/5 - Longest Palindromic Substring/</id>
    <published>2017-05-09T05:51:34.000Z</published>
    <updated>2017-05-09T06:04:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h1><p>求最長回文子字串。</p>
<a id="more"></a>
<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p>假設<code>dp(i,j)</code>代表從i到j的子字串是否為回文，得到下列遞迴式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dp(i,j) = <span class="number">1</span> , <span class="keyword">if</span> ( s[i] == s[j] &amp;&amp; dp(i+<span class="number">1</span>,j<span class="number">-1</span>) == <span class="number">1</span> ) </div><div class="line">	= <span class="number">0</span> , <span class="keyword">else</span></div></pre></td></tr></table></figure></p>
<h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1><p>不得不說JavaScript真的是慢了許多 … </p>
<h1 id="程式"><a href="#程式" class="headerlink" title="程式"></a>程式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;string&#125; s</div><div class="line"> * @return &#123;string&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> longestPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> ( s.length &lt;= <span class="number">1</span> ) <span class="keyword">return</span> s ;</div><div class="line">    <span class="keyword">var</span> nowMax = <span class="number">1</span> , nowString = s[s.length<span class="number">-1</span>] ;</div><div class="line">    <span class="keyword">var</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(s.length+<span class="number">1</span>);</div><div class="line">    <span class="keyword">var</span> copy = <span class="keyword">new</span> <span class="built_in">Array</span>(s.length+<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; s.length+<span class="number">1</span> ; i++) &#123;</div><div class="line">        copy[i] = <span class="literal">true</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; s.length+<span class="number">1</span>; i++)&#123;</div><div class="line">        dp[i] = copy.slice(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> i = s.length - <span class="number">1</span> ; i &gt;= <span class="number">0</span> ; i -- )&#123;</div><div class="line">        <span class="keyword">for</span> ( <span class="keyword">var</span> j = i + <span class="number">1</span> ; j &lt; s.length ; j ++ )&#123;</div><div class="line">            <span class="keyword">if</span> ( s[i] === s[j] &amp;&amp; dp[i+<span class="number">1</span>][j<span class="number">-1</span>] !== <span class="literal">false</span> )&#123;</div><div class="line">                dp[i][j] = <span class="literal">true</span> ;</div><div class="line">                <span class="keyword">if</span> ( j - i + <span class="number">1</span> &gt; nowMax )&#123;</div><div class="line">                    nowMax = j - i + <span class="number">1</span> ;</div><div class="line">                    nowString = s.substring(i,j+<span class="number">1</span>) ;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                dp[i][j] = <span class="literal">false</span> ;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> nowString ;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h1&gt;&lt;p&gt;求最長回文子字串。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://jeno5980515.github.io/categories/Online-Judge/"/>
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/categories/Online-Judge/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jeno5980515.github.io/tags/LeetCode/"/>
    
      <category term="Palindrome" scheme="http://jeno5980515.github.io/tags/Palindrome/"/>
    
      <category term="5" scheme="http://jeno5980515.github.io/tags/5/"/>
    
  </entry>
  
  <entry>
    <title>[JavaScript] V8 和 Event Loop</title>
    <link href="http://jeno5980515.github.io/2017/05/08/Programming%20Language/JavaScript/V8%20%E5%92%8C%20Event%20Loop/"/>
    <id>http://jeno5980515.github.io/2017/05/08/Programming Language/JavaScript/V8 和 Event Loop/</id>
    <published>2017-05-08T08:55:36.000Z</published>
    <updated>2017-05-11T03:29:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近研究了下 V8 和 Event Loop，以下圖片和程式碼皆引用自影片中。</p>
<a id="more"></a>
<h2 id="V8"><a href="#V8" class="headerlink" title="V8"></a>V8</h2><p>以往JavaScript是透過直譯式的方式執行，而 V8 會直接將 JavaScript 轉換成電腦看的懂的<code>Machine Code</code> 再執行，目前在 Chrome 和 Node.js 都是使用這套引擎。</p>
<hr>
<h3 id="Hidden-Class"><a href="#Hidden-Class" class="headerlink" title="Hidden Class"></a>Hidden Class</h3><p>JavaScript是動態語言，這帶來了便利但也造成效能問題，以往類似引擎會採用類似<code>Hash Table</code>的方式來編譯，而V8則會在<code>Runtime</code>的時候建立<code>Hidden Class</code>。</p>
<p>若物件有相同的<code>Hidden Class</code>，則可以使用相同的<code>Machine Code</code>，稱之為<code>Inline Caches</code>。</p>
<p><img src="/img/JavaScript/about/v8_1.PNG" alt=""><br>依照程式的執行順序，我們會依序創建<code>Hidden Class</code>。</p>
<p>p1：<br><code>Point</code>-&gt;<code>Point,x</code>-&gt;<code>Point,x,y</code><br>p2：<br>由於創建過所以可以直接指到<code>Point,x,y</code>，這時候如果我們給p2一個新的值z，則會創建一個<code>Point,x,y,z</code></p>
<h4 id="優化"><a href="#優化" class="headerlink" title="優化"></a>優化</h4><ol>
<li>經由構造函數創建所有的物件</li>
<li>使用同順序創建物件的元素</li>
</ol>
<hr>
<h3 id="數字"><a href="#數字" class="headerlink" title="數字"></a>數字</h3><p><img src="/img/JavaScript/about/v8_2.PNG" alt=""><br>V8會用32 bits的空間<br>用最後一個bit來判別是不是數字，1為物件指標而0則為數字。</p>
<p>萬一這個數字超過31個bits，這時候會將數字放在Box裡並轉換為double，再存到物件中。</p>
<h4 id="優化-1"><a href="#優化-1" class="headerlink" title="優化"></a>優化</h4><ul>
<li>使用31 bits的有符號整數</li>
</ul>
<hr>
<h3 id="陣列"><a href="#陣列" class="headerlink" title="陣列"></a>陣列</h3><h4 id="Fast-Elements"><a href="#Fast-Elements" class="headerlink" title="Fast Elements"></a>Fast Elements</h4><p>緊密的陣列會使用線性的儲存。</p>
<h4 id="Dictionary-Elements"><a href="#Dictionary-Elements" class="headerlink" title="Dictionary Elements"></a>Dictionary Elements</h4><p>寬鬆的陣列會使用<code>Hash Table</code>儲存。 </p>
<h4 id="優化-2"><a href="#優化-2" class="headerlink" title="優化"></a>優化</h4><ol>
<li>使用連續的陣列並且起始為0</li>
<li>不要宣告一個過大的陣列</li>
<li>別刪除陣列的元素  </li>
<li><p>別使用未宣告或者已刪除的元素</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//bad</span></div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> b = <span class="number">0</span> ; b &lt; <span class="number">10</span> ; b ++ )&#123;</div><div class="line">	a[<span class="number">0</span>] |= b ;</div><div class="line">&#125;</div><div class="line"><span class="comment">//good</span></div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">a[<span class="number">0</span>] = <span class="number">0</span> ;</div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> b = <span class="number">0</span> ; b &lt; <span class="number">10</span> ; b ++ )&#123;</div><div class="line">	a[<span class="number">0</span>] |= b ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>若陣列中值的類型都是<code>Double</code>，陣列會將Double unbox且直接存在Double類型的buffer。</p>
</li>
<li>若陣列的元素類型不一致會產生不同的<code>Hidden Class</code>，因此造成效能上的花費。<br><img src="/img/JavaScript/about/v8_4.PNG" alt=""></li>
<li><p>事先宣告可在compile時讓V8優化</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [ <span class="number">77</span> , <span class="number">88</span> , <span class="number">0.5</span> , <span class="literal">true</span> ] ;</div></pre></td></tr></table></figure>
</li>
<li><p>小陣列中事先宣告正確大小</p>
</li>
</ol>
<hr>
<h3 id="Compilers"><a href="#Compilers" class="headerlink" title="Compilers"></a>Compilers</h3><p>V8有兩種Compilers。</p>
<h4 id="Full-Compiler"><a href="#Full-Compiler" class="headerlink" title="Full Compiler"></a>Full Compiler</h4><ol>
<li>盡快產生可以執行的程式</li>
<li>在<code>Compile Time</code>幾乎不做類別分析</li>
<li>使用<code>Inline Caches</code>在<code>Runtime</code>做類別分析且最佳化，同樣的<code>Hidden Class</code>可以使用同樣的最佳化程式。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"> x , y </span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> x + y ;</div><div class="line">&#125;</div><div class="line">add(<span class="number">1</span>,<span class="number">2</span>);	<span class="comment">// Monomorphic</span></div><div class="line">add(<span class="string">"a"</span>,<span class="string">"b"</span>);	<span class="comment">// Polymorphic</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Optimizing-Compiler"><a href="#Optimizing-Compiler" class="headerlink" title="Optimizing Compiler"></a>Optimizing Compiler</h4><ol>
<li>Optimizing Compiler會收集<code>Inline Caches</code>的資訊來對於常使用的函式重新編譯。</li>
<li><code>try/catch</code>區塊無法最佳化 (影片為2012年，不曉得目前是否仍是如此)</li>
<li>若要使用<code>try/catch</code>則使用下列方式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">perf</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">// do work here</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	perf();</div><div class="line">&#125; <span class="keyword">catch</span> (e)&#123;</div><div class="line">	<span class="comment">// handle exceptions here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h3 id="反最佳化"><a href="#反最佳化" class="headerlink" title="反最佳化"></a>反最佳化</h3><p>若 V8 發現最佳化的效果不佳會自動反最佳化，如此一來會造成效能上的損失。</p>
<h4 id="優化-3"><a href="#優化-3" class="headerlink" title="優化"></a>優化</h4><ul>
<li>不要改變最佳化的function造成<code>Hidden Class</code>的改變。</li>
</ul>
<hr>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.isPrimeDivisible = <span class="function"><span class="keyword">function</span>(<span class="params">candidate</span>)</span>&#123;</div><div class="line">	<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">1</span> ; i &lt;= <span class="keyword">this</span>.prime_count ; ++i )&#123;</div><div class="line">		<span class="keyword">if</span> ( candidate % <span class="keyword">this</span>.primes[i] === <span class="number">0</span> ) </div><div class="line">			<span class="keyword">return</span> <span class="literal">true</span> ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>這段程式碼中由於超出邊界，如此一來造成效能上的影響<br><img src="/img/JavaScript/about/v8_9.PNG" alt=""><br>修正邊界後<br><img src="/img/JavaScript/about/v8_10.PNG" alt=""></p>
<p>演算法上的影響也很重要。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.isPrimeDivisible = <span class="function"><span class="keyword">function</span>(<span class="params">candidate</span>)</span>&#123;</div><div class="line">	<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">1</span> ; i &lt;= <span class="keyword">this</span>.prime_count ; ++i )&#123;</div><div class="line">		<span class="keyword">var</span> current_prime = <span class="keyword">this</span>.primes[i] ;</div><div class="line">		<span class="keyword">if</span> ( current_prime * current_prime &gt; candidate )&#123;</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span> ;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> ( candidate % current_prime === <span class="number">0</span> ) </div><div class="line">			<span class="keyword">return</span> <span class="literal">true</span> ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>改進後的效能差異<br><img src="/img/JavaScript/about/v8_13.PNG" alt=""></p>
<hr>
<h2 id="單執行緒"><a href="#單執行緒" class="headerlink" title="單執行緒"></a>單執行緒</h2><p>由於起初做為瀏覽器的語言，JavaScript被設計為單執行緒，如此才不會在多執行緒的情況下造成 DOM 操作上的問題。</p>
<p>HTML5的<code>Web Worker</code>可以另外建立執行緒，但新的執行緒仍不能操作 DOM。</p>
<h2 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h2><p>現在知道了JavaScript是如何編譯運行的，那JavaScript是如何處理異步事件像是DOM、HTTP Request、Timer等等呢？</p>
<p><img src="/img/JavaScript/about/event_1.PNG" alt=""><br>前面提到的V8就負責了<code>heap</code>和<code>stack</code>操作，那些WebAPIs則不包含在V8裡頭。 (瀏覽器端的WebAPIs和Node.js的API不同，但<code>Event Loop</code>原理是差不多的。)</p>
<p>單執行緒代表了只有一個<code>call stack</code>，也代表了一次只能做一件事情。</p>
<p>而其他API的事件則會經由其他的執行緒來運行，等執行完成再觸發callback。</p>
<p>下列一段程式碼在stack的情形。<br><img src="/img/JavaScript/about/event_2.PNG" alt=""></p>
<hr>
<p>stack 的情形也常在 console 中看到。<br><img src="/img/JavaScript/about/event_3.PNG" alt=""></p>
<p>無窮遞迴的情形。<br><img src="/img/JavaScript/about/event_4.PNG" alt=""></p>
<hr>
<h3 id="Task-Queue"><a href="#Task-Queue" class="headerlink" title="Task Queue"></a>Task Queue</h3><p><code>task queue</code>用來儲存需要執行的程式。</p>
<p>setTimeout 經由 API 在別的執行緒進行。<br><img src="/img/JavaScript/about/event_5.PNG" alt=""></p>
<p>一但 API 執行完，則把 callback 放回<code>task queue</code>等待運行<br><img src="/img/JavaScript/about/event_6.PNG" alt=""></p>
<p>這時stack中的函式可能還在運行或者已完成，但要等到stack中的函式運行完才將<code>task queue</code>的任務放進 stack 運行<br><img src="/img/JavaScript/about/event_7.PNG" alt=""></p>
<hr>
<p>DOM事件的監聽情形。<br><img src="/img/JavaScript/about/event_8.PNG" alt=""></p>
<p>按下按鈕後<br><img src="/img/JavaScript/about/event_9.PNG" alt=""><br>逐步執行<br><img src="/img/JavaScript/about/event_10.PNG" alt=""></p>
<hr>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p><a href="https://www.youtube.com/watch?v=UJPdhx5zTaw" target="_blank" rel="external">Google I/O 2012 - Breaking the JavaScript Speed Limit with V8</a><br><a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ" target="_blank" rel="external">Philip Roberts: What the heck is the event loop anyway? | JSConf EU 2014</a><br><a href="https://vimeo.com/96425312" target="_blank" rel="external">Philip Roberts: Help, I’m stuck in an event-loop</a><br><a href="https://github.com/v8/v8/wiki" target="_blank" rel="external">V8’s public wiki</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近研究了下 V8 和 Event Loop，以下圖片和程式碼皆引用自影片中。&lt;/p&gt;
    
    </summary>
    
      <category term="Programming Language" scheme="http://jeno5980515.github.io/categories/Programming-Language/"/>
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/categories/Programming-Language/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/tags/JavaScript/"/>
    
      <category term="V8" scheme="http://jeno5980515.github.io/tags/V8/"/>
    
      <category term="Event Loop" scheme="http://jeno5980515.github.io/tags/Event-Loop/"/>
    
  </entry>
  
  <entry>
    <title>[Other] Sitemap Parsing Error</title>
    <link href="http://jeno5980515.github.io/2017/04/28/Other/Sitemap%20Parsing%20Error/"/>
    <id>http://jeno5980515.github.io/2017/04/28/Other/Sitemap Parsing Error/</id>
    <published>2017-04-28T08:45:30.000Z</published>
    <updated>2017-04-28T09:01:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近送sitemap到網站管理員總是出現Parsing Error，看了官方文件<a href="https://support.google.com/webmasters/answer/183668?visit_id=1-636289544946475704-2472833756&amp;rd=1" target="_blank" rel="external">Build and submit a sitemap</a>才發現原來是有些特殊字元沒處理到。</p>
<p><code>&lt; &gt; &amp; &#39; &quot;</code></p>
<p>文件上說得處理這五個符號。</p>
<a id="more"></a>
<h2 id="escape"><a href="#escape" class="headerlink" title="escape"></a>escape</h2><p>escape可以妥善的處理特殊符號，但對URL做escape會連<code>:</code>都做處理，因此在URL上不適用。</p>
<h2 id="encodeURI"><a href="#encodeURI" class="headerlink" title="encodeURI"></a>encodeURI</h2><p>encodeURI不會對<code>, / ? : @ &amp; = + $ #</code>這些做處理。</p>
<h2 id="encodeURIComponent"><a href="#encodeURIComponent" class="headerlink" title="encodeURIComponent"></a>encodeURIComponent</h2><p>encodeURIComponent連<code>:</code>和<code>/</code>都做處理了，因此也不適用。</p>
<h2 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h2><p>既然如此就只能自己做處理了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">encodeURI</span>(url).replace(<span class="regexp">/&amp;/</span>,<span class="string">"%26"</span>).replace(<span class="regexp">/&lt;/</span>,<span class="string">"%3C"</span>).replace(<span class="regexp">/&gt;/</span>,<span class="string">"%3E"</span>).replace(<span class="regexp">/'/</span>,<span class="string">"%27"</span>).replace(<span class="regexp">/"/</span>,<span class="string">"%22"</span>);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近送sitemap到網站管理員總是出現Parsing Error，看了官方文件&lt;a href=&quot;https://support.google.com/webmasters/answer/183668?visit_id=1-636289544946475704-2472833756&amp;amp;rd=1&quot;&gt;Build and submit a sitemap&lt;/a&gt;才發現原來是有些特殊字元沒處理到。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt; &amp;gt; &amp;amp; &amp;#39; &amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;文件上說得處理這五個符號。&lt;/p&gt;
    
    </summary>
    
      <category term="Other" scheme="http://jeno5980515.github.io/categories/Other/"/>
    
    
      <category term="Sitemap" scheme="http://jeno5980515.github.io/tags/Sitemap/"/>
    
  </entry>
  
  <entry>
    <title>[Web] Performance</title>
    <link href="http://jeno5980515.github.io/2017/04/28/Web/Overall/Performance/"/>
    <id>http://jeno5980515.github.io/2017/04/28/Web/Overall/Performance/</id>
    <published>2017-04-28T03:43:34.000Z</published>
    <updated>2017-05-01T22:29:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近看了Google的<a href="https://developers.google.com/web/" target="_blank" rel="external">Learn How to Develop the Next Generation of Applications for the Web</a>和Udacity上介紹關於Performance的影片在此紀錄一下，範例及圖片大多取自於其中。</p>
<a id="more"></a>
<h1 id="DOM-amp-CSSOM"><a href="#DOM-amp-CSSOM" class="headerlink" title="DOM &amp; CSSOM"></a>DOM &amp; CSSOM</h1><p>HTML轉換成DOM (Document Object Model) 的流程如下圖<br><img src="/img/Web/Performance/html2dom.PNG" alt=""><br>首先會先將HTML字串<br><img src="/img/Web/Performance/html2dom1.PNG" alt=""><br>轉換成一個一個的token<br><img src="/img/Web/Performance/html2dom2.PNG" alt=""><br>再將這些token轉換成一個一個的node<br><img src="/img/Web/Performance/html2dom3.PNG" alt=""><br>最後就形成了DOM<br><img src="/img/Web/Performance/html2dom4.PNG" alt=""></p>
<p>CSS轉換成CSSOM (CSS Object Model) 的流程如下圖<br><img src="/img/Web/Performance/css2cssom.PNG" alt=""><br>直接看到轉換成node的部分<br><img src="/img/Web/Performance/css2cssom1.PNG" alt=""><br>p是body的子節點，因為所有可見的內容都是body的一部份。</p>
<p>其中子節點會繼承父節點的屬性。</p>
<h1 id="CSS-Selector"><a href="#CSS-Selector" class="headerlink" title="CSS Selector"></a>CSS Selector</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>以下兩種選擇會是哪一種比較快？<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">h1 &#123; ... &#125;</div><div class="line">div p &#123; ... &#125;</div></pre></td></tr></table></figure></p>
<p>第一種會找所有的h1並且設置屬性，第二種則是找到所有的p且往上找是否父節點為div。</p>
<p>因此直接選擇h1會比較快。</p>
<p>CSS是從右到左，因為從右邊讀取效率會比較高，從左到右會浪費許多時間在錯誤的查找上。</p>
<p><a href="http://stackoverflow.com/questions/5797014/why-do-browsers-match-css-selectors-from-right-to-left" target="_blank" rel="external">Why do browsers match CSS selectors from right to left?</a></p>
<h1 id="渲染樹"><a href="#渲染樹" class="headerlink" title="渲染樹"></a>渲染樹</h1><p>建立渲染樹的過程中，會從DOM中找node且在CSSOM找是否有相對應的node然後加到渲染樹上。<br><img src="/img/Web/Performance/render_tree.PNG" alt=""><br>由於渲染樹只會加上可見的元素，因此<code>display:none</code>的span不會加到樹上，但Pseudo Elements則會。</p>
<h1 id="Attribute"><a href="#Attribute" class="headerlink" title="Attribute"></a>Attribute</h1><p><code>viewport</code>可以告知瀏覽器Layout的寬度應該多長，若沒告知則為預設的980px。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width;"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="media"><a href="#media" class="headerlink" title="media"></a>media</h2><p>若是不希望阻塞渲染，可在css來源的tag加上media屬性，如此一來檔案仍會下載但不會阻塞。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"print.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">media</span>=<span class="string">"print"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><p>可在不需要依賴DOM的script上加上async屬性，如此一來就不會阻塞渲染。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app.js"</span> <span class="attr">async</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="Critical-Rendering-Path-Diagrams"><a href="#Critical-Rendering-Path-Diagrams" class="headerlink" title="Critical Rendering Path Diagrams"></a>Critical Rendering Path Diagrams</h1><p><img src="/img/Web/Performance/diagram.png" alt=""><br>發出HTML請求-&gt;發出CSS請求並同時建立DOM-&gt;建立CSSOM-&gt;渲染</p>
<p><img src="/img/Web/Performance/diagram2.png" alt=""><br>發出HTML請求-&gt;發出CSS、JavaScript請求並同時建立DOM(遇到JavaScript處則暫停建立DOM)-&gt;建立CSSOM-&gt;執行JavaScript-&gt;繼續建立DOM-&gt;渲染</p>
<p>瀏覽器會使用<code>preload scanner</code>將所有css和js一起載入。</p>
<h1 id="Pixel-Pipeline"><a href="#Pixel-Pipeline" class="headerlink" title="Pixel Pipeline"></a>Pixel Pipeline</h1><p>利用js修改DOM渲染的流程可以分為以下三種</p>
<ol>
<li><p>JS / CSS &gt; Style &gt; Layout &gt; Paint &gt; Composite<br><img src="/img/Web/Performance/pipeline1.jpg" alt=""><br>像是修改<code>margin-left</code>、<code>width</code>等等。</p>
</li>
<li><p>JS / CSS &gt; Style &gt; Paint &gt; Composite<br><img src="/img/Web/Performance/pipeline2.jpg" alt=""><br>像是修改<code>background-image</code>、<code>color</code>等等。</p>
</li>
<li><p>JS / CSS &gt; Style &gt; Composite<br><img src="/img/Web/Performance/pipeline3.jpg" alt=""><br>像是修改<code>transform</code>等等。</p>
</li>
</ol>
<p>需要的流程越少成本就越小，因此要盡量選擇第三種方法。</p>
<p><a href="https://csstriggers.com/" target="_blank" rel="external">CSS Triggers</a>可以查看每個style所會觸發的流程。</p>
<h1 id="Load-Idle-Animate-Response"><a href="#Load-Idle-Animate-Response" class="headerlink" title="Load, Idle, Animate, Response"></a>Load, Idle, Animate, Response</h1><p>我們必須把真正需要的在Load載入來減少時間，像是基本架構、重要的文字等等。</p>
<p>在Idle的時候則可以載入等一下可能會使用到的東西。</p>
<h1 id="Chrome-DevTools"><a href="#Chrome-DevTools" class="headerlink" title="Chrome DevTools"></a>Chrome DevTools</h1><p>最近Chrome的Timeline和Profiles等等似乎都合併到Performance裡了。</p>
<p>FPS Metor用來查看即時的狀況<br><img src="/img/Web/Performance/devtool1.PNG" alt=""></p>
<p>Paint Flashing用來查看即時Paint的情形<br><img src="/img/Web/Performance/devtool12.PNG" alt=""></p>
<p>經由左上角的錄製鈕來逐Frame檢視<br><img src="/img/Web/Performance/devtool2.PNG" alt=""></p>
<p>Screenshots用來查看每個Frame的當前畫面直接鎖定需要的地方<br><img src="/img/Web/Performance/devtool3.PNG" alt=""></p>
<p>若是大量動畫的狀態要盡量保持在60fps也就是16ms以下(1000/60)才會順暢。<br><img src="/img/Web/Performance/devtool4.PNG" alt=""></p>
<p>Summary圖表顯示了所花的時間<br><img src="/img/Web/Performance/devtool5.PNG" alt=""></p>
<p>Event Log則可以看細部所花的時間，Self Time代表在程式內部的，Total Time則是包含了內部呼叫的其他函式。<br><img src="/img/Web/Performance/devtool6.PNG" alt=""></p>
<p>開啟Memory選項則可以看到內存的使用情形。<br><img src="/img/Web/Performance/devtool9.PNG" alt=""></p>
<h1 id="實機測試-Chrome-DevTools"><a href="#實機測試-Chrome-DevTools" class="headerlink" title="實機測試 + Chrome DevTools"></a>實機測試 + Chrome DevTools</h1><p>若希望使用開發者工具來檢視手機上的結果<br>可開啟<code>設定-&gt;開發者選項-&gt;USB偵錯</code><br><img src="/img/Web/Performance/devtool7.png" alt=""><br>在Chrome上連結設<code>chrome://inspect</code>即可看見手機上的網頁，在需要測試的按<code>inspect</code>即可進入開發者模式。</p>
<p>若想要直接在手機上開啟本機伺服器檔案，則可以Port forwarding設置且按下<code>Enable port forwarding</code>即可。<br><img src="/img/Web/Performance/devtool8.png" alt=""></p>
<h1 id="Micro-Optimizations"><a href="#Micro-Optimizations" class="headerlink" title="Micro Optimizations"></a>Micro Optimizations</h1><p>由於JavaScript不見得是照我們寫的運行，我們無法知道如何引擎是做最佳化，所以不需要花時間在微最佳化上。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Don't waste time between them</span></div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; len ; i ++ ) ...</div><div class="line"></div><div class="line">while ( ++ i &lt; len ) ...</div></pre></td></tr></table></figure>
<h1 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h1><p>雖然60fps換算下來是16ms，但我們實際上必須要在更短的時間內執行完程式，因為會有額外的時間拿來做style計算、layer管理等等。</p>
<p>setTimeout和setInterval不適合拿來處理動畫，因為若我們在像是style計算中突然要執行JavaScript，如此一來整個渲染流程又會重新執行而造成頻率不一致，而requestAnimationFrame可以妥善的安排JavaScript執行的時間。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">time</span>) </span>&#123;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> requestId = requestAnimationFrame(render);</div><div class="line"><span class="comment">//取消動畫</span></div><div class="line">cancelAnimationFrame(requestId);</div></pre></td></tr></table></figure>
<h1 id="Web-Workers"><a href="#Web-Workers" class="headerlink" title="Web Workers"></a>Web Workers</h1><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank" rel="external">Web Workers</a>可以讓js運行在不同的thread而不會造成阻塞。</p>
<h1 id="Memory-Management"><a href="#Memory-Management" class="headerlink" title="Memory Management"></a>Memory Management</h1><ol>
<li>盡量別用delete，因為JavaScript引擎會自動最佳化，若是delete其中的元素則得重新計算。</li>
<li>null不會真的清空物件，只會讓物件指向null</li>
<li>全域變數不會被GC回收</li>
<li>取消綁定事件若不再需要</li>
<li>若使用資料快取要妥善管理</li>
</ol>
<p>考慮以下的情況<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myObj = &#123;</div><div class="line">    <span class="attr">callMeMaybe</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> myRef = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">var</span> val = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Time is running out!'</span>); </div><div class="line">            myRef.callMeMaybe();</div><div class="line">        &#125;, <span class="number">1000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">myObj.callMeMaybe();</div><div class="line">myObj = <span class="literal">null</span>;</div></pre></td></tr></table></figure></p>
<p>即使設為null，setTimeout仍會持續進行，這是因為myRef在closure中指向myObj，因此myObj不會被GC回收。</p>
<p><a href="https://www.smashingmagazine.com/2012/11/writing-fast-memory-efficient-javascript/" target="_blank" rel="external">How To Write Fast, Memory-Efficient JavaScript</a></p>
<h1 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h1><p>當Selector條件越多效能就越受影響，使用<code>.box-three</code>會比<code>:nth-child(3)</code>的選擇好。</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><a href="https://dl.dropboxusercontent.com/u/2272348/codez/udacity/box-recalc-style-slow.html" target="_blank" rel="external">box-recalc-style-slow</a></p>
<p>CSS<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span><span class="selector-class">.toggled</span> <span class="selector-tag">main</span> <span class="selector-class">.box-container</span> <span class="selector-class">.box</span><span class="selector-pseudo">:nth-child(2n)</span> &#123;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#777</span> <span class="meta">!important</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>JavaScript<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">button.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">document</span>.body.classList.toggle(<span class="string">'toggled'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>如此一來每個<code>.box</code>都會看且判斷是否是偶數個，再逐一往上(左)找是否符合</p>
<p>效能<br><img src="/img/Web/Performance/performance2.png" alt=""></p>
<p>改進方法如下</p>
<p>CSS<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span><span class="selector-class">.gray</span> &#123;</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#777</span> <span class="meta">!important</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> JavaScript<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">button.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">document</span>.body.classList.toggle(<span class="string">'toggled'</span>);</div><div class="line">	<span class="keyword">var</span> boxes = container.querySelectorAll(<span class="string">".box"</span>) ;</div><div class="line">	<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; boxes.length ; i += <span class="number">2</span> )&#123;</div><div class="line">		boxes[i].classList.toggle(<span class="string">'gray'</span>,<span class="built_in">document</span>.body.classList.contains(<span class="string">'toggled'</span>));</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p> 如此一來會直接先找到<code>.gray</code>才找<code>.box</code>，省去了一半的數量</p>
<p> 效能<br> <img src="/img/Web/Performance/performance.png" alt=""></p>
<h1 id="Forced-Synchronous-Layouts"><a href="#Forced-Synchronous-Layouts" class="headerlink" title="Forced Synchronous Layouts"></a>Forced Synchronous Layouts</h1><p>若我們每次都要取得Layout再重新計算，這樣會造成<code>Forced Synchronous Layouts</code>。</p>
<h2 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo"></a>Demo</h2><p><a href="http://output.jsbin.com/aqavin/2/quiet" target="_blank" rel="external">Slow stuff</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (goSlow) &#123;</div><div class="line">	<span class="keyword">while</span> (i--) &#123;</div><div class="line">		ps[i].style.width = sizer.offsetWidth + <span class="string">'px'</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">	size = sizer.offsetWidth;</div><div class="line">	<span class="keyword">while</span> (i--) &#123;</div><div class="line">		ps[i].style.width = size + <span class="string">'px'</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到先把Node的寬度快取住會比每次都要重新取得快的許多。</p>
<h2 id="Demo-2"><a href="#Demo-2" class="headerlink" title="Demo"></a>Demo</h2><p><a href="https://github.com/udacity/pizza-perf/blob/master/pizza.html" target="_blank" rel="external">pizza-perf</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changePizzaSizes</span>(<span class="params">size</span>) </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">document</span>.querySelectorAll(<span class="string">".randomPizzaContainer"</span>).length; i++) &#123;</div><div class="line">		<span class="keyword">var</span> dx = determineDx(<span class="built_in">document</span>.querySelectorAll(<span class="string">".randomPizzaContainer"</span>)[i], size);</div><div class="line">		<span class="keyword">var</span> newwidth = (<span class="built_in">document</span>.querySelectorAll(<span class="string">".randomPizzaContainer"</span>)[i].offsetWidth + dx) + <span class="string">'px'</span>;</div><div class="line">		<span class="built_in">document</span>.querySelectorAll(<span class="string">".randomPizzaContainer"</span>)[i].style.width = newwidth;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>改為<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changePizzaSizes</span>(<span class="params">size</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> randomPizzas = <span class="built_in">document</span>.querySelectorAll(<span class="string">".randomPizzaContainer"</span>) ;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; randomPizzas.length; i++) &#123;</div><div class="line">		<span class="keyword">var</span> dx = determineDx(randomPizzas[i], size);</div><div class="line">		<span class="keyword">var</span> newwidth = (randomPizzas[i].offsetWidth + dx) + <span class="string">'px'</span>;</div><div class="line">		randomPizzas[i].style.width = newwidth;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>查看determineDx函式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">determineDx</span> (<span class="params">elem, size</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> oldwidth = elem.offsetWidth;</div><div class="line">	<span class="keyword">var</span> windowwidth = <span class="built_in">document</span>.querySelector(<span class="string">"#randomPizzas"</span>).offsetWidth;</div><div class="line">	<span class="keyword">var</span> oldsize = oldwidth / windowwidth;</div><div class="line"></div><div class="line">	<span class="comment">// Changes the slider value to a percent width</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">sizeSwitcher</span> (<span class="params">size</span>) </span>&#123;</div><div class="line">		<span class="keyword">switch</span>(size) &#123;</div><div class="line">			<span class="keyword">case</span> <span class="string">"1"</span>:</div><div class="line">			<span class="keyword">return</span> <span class="number">0.25</span>;</div><div class="line">			<span class="keyword">case</span> <span class="string">"2"</span>:</div><div class="line">			<span class="keyword">return</span> <span class="number">0.3333</span>;</div><div class="line">			<span class="keyword">case</span> <span class="string">"3"</span>:</div><div class="line">			<span class="keyword">return</span> <span class="number">0.5</span>;</div><div class="line">			<span class="keyword">default</span>:</div><div class="line">			<span class="built_in">console</span>.log(<span class="string">"bug in sizeSwitcher"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> newsize = sizeSwitcher(size);</div><div class="line">	<span class="keyword">var</span> dx = (newsize - oldsize) * windowwidth;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> dx;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>發現原本是計算差值然後加上去，這樣子可以改寫成直接給予新的值即可，因此改寫為<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changePizzaSizes</span>(<span class="params">size</span>) </span>&#123;</div><div class="line">	<span class="keyword">switch</span>(size) &#123;</div><div class="line">		<span class="keyword">case</span> <span class="string">"1"</span>:</div><div class="line">		newWidth = <span class="number">0.25</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">"2"</span>:</div><div class="line">		newWidth = <span class="number">0.3333</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">"3"</span>:</div><div class="line">		newWidth = <span class="number">0.5</span>;</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"bug in sizeSwitcher"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> randomPizzas = <span class="built_in">document</span>.querySelectorAll(<span class="string">".randomPizzaContainer"</span>) ;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; randomPizzas.length; i++) &#123;</div><div class="line">		randomPizzas[i].style.width = newWidth + <span class="string">"%"</span> ;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="CSS-or-JavaScript"><a href="#CSS-or-JavaScript" class="headerlink" title="CSS or JavaScript?"></a>CSS or JavaScript?</h1><p>動畫究竟該用CSS還是JavaScript?</p>
<ol>
<li>當元素是單一的用CSS</li>
<li>當需要信號控制像是stop、slow down、reverse等等則用JavaScript</li>
<li>更改Layout(位置)或需要Paint是相當耗效能的</li>
<li>盡量用transforms或opacity</li>
<li>原則上CSS動畫會在<code>compositor thread</code>上執行，所以當主執行緒有繁重的任務時動畫不會被干擾，JavaScript則會佔用主執行緒</li>
<li>不論CSS或JavaScript動畫只要觸發Layout或Paint都會在主執行緒上執行</li>
</ol>
<p><a href="https://developers.google.com/web/fundamentals/design-and-ui/animations/css-vs-javascript" target="_blank" rel="external">CSS Versus JavaScript Animations</a><br><a href="https://developers.google.com/web/fundamentals/design-and-ui/animations/animations-and-performance" target="_blank" rel="external">Animations and Performance</a></p>
<h1 id="will-change"><a href="#will-change" class="headerlink" title="will-change"></a>will-change</h1><p>利用多個Layer可以讓元素跳過Layout和Paint而直接到Composite，但過多的Layer會造成管理Layer上效能的問題。</p>
<p><code>will-change</code>屬性會告知瀏覽器即將運行的事件，讓瀏覽器建立一個Layer<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.circle</span> &#123;</div><div class="line">	<span class="attribute">will-change </span>: transform;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>也可以在will-change上設置top、left等等，雖然會增加一層Layer但仍得進行Layout和Paint，因此不會有太大的改善。</p>
<p>在舊的瀏覽器上可以使用<code>translateZ</code>達到同樣的效果，一樣會告知瀏覽器建立Layer。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.circle</span>&#123;</div><div class="line">	<span class="attribute">transform</span>: <span class="built_in">translateZ</span>(0) ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以用Chrome的DevTools的Layer標籤查看網頁Layer情形。<br><img src="/img/Web/Performance/devtool10.PNG" alt=""></p>
<p>可在Detail看到形成Layer的原因。<br><img src="/img/Web/Performance/devtool11.PNG" alt=""></p>
<h2 id="Demo-3"><a href="#Demo-3" class="headerlink" title="Demo"></a>Demo</h2><p><a href="https://dl.dropboxusercontent.com/u/2272348/codez/parallax/demo-promo/index.html" target="_blank" rel="external">demo-promo</a></p>
<p>在<code>section#background</code>加上<code>will-change:transform;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">section#background &#123;</div><div class="line">	will-change: transform;</div><div class="line">	background: #1e2124 url(&quot;../../images/parallax-bg.jpg&quot;) center 0 no-repeat;</div><div class="line">	width: 960px;</div><div class="line">	height: 3000px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以在發現原本Paint整個頁面的變成只剩下Paint滾動條。</p>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://developers.google.com/web/" target="_blank" rel="external">Learn How to Develop the Next Generation of Applications for the Web</a><br><a href="https://classroom.udacity.com/courses/ud884" target="_blank" rel="external">Website Performance Optimization</a><br><a href="https://classroom.udacity.com/courses/ud860" target="_blank" rel="external">Browser Rendering Optimization</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近看了Google的&lt;a href=&quot;https://developers.google.com/web/&quot;&gt;Learn How to Develop the Next Generation of Applications for the Web&lt;/a&gt;和Udacity上介紹關於Performance的影片在此紀錄一下，範例及圖片大多取自於其中。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://jeno5980515.github.io/categories/Web/"/>
    
      <category term="Overall" scheme="http://jeno5980515.github.io/categories/Web/Overall/"/>
    
    
      <category term="Web" scheme="http://jeno5980515.github.io/tags/Web/"/>
    
      <category term="Performance" scheme="http://jeno5980515.github.io/tags/Performance/"/>
    
  </entry>
  
  <entry>
    <title>[JavaScript] Promise實作原理</title>
    <link href="http://jeno5980515.github.io/2017/04/24/Programming%20Language/JavaScript/Promise%E5%AF%A6%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <id>http://jeno5980515.github.io/2017/04/24/Programming Language/JavaScript/Promise實作原理/</id>
    <published>2017-04-24T05:16:00.000Z</published>
    <updated>2017-05-10T13:25:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近從 <a href="http://www.mattgreer.org/articles/promises-in-wicked-detail/" target="_blank" rel="external">JavaScript Promises … In Wicked Detail</a> 研究Promise的實作原理，在此紀錄一下。</p>
<p>這邊的Promise會盡量符合<code>Promises/A+</code>的規範但離完整的實作仍會有些細節上處理的差距。</p>
<a id="more"></a>
<h1 id="基礎"><a href="#基礎" class="headerlink" title="基礎"></a>基礎</h1><p>假設我們希望將callback改成then的串鏈形式，我們只需要簡單改變結構。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">doSomething(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'Got a value:'</span> + value);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> value = <span class="number">42</span>;</div><div class="line">	callback(value);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>改變成<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">doSomething().then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'Got a value:'</span> + value);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">then</span>: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> value = <span class="number">42</span>;</div><div class="line">			callback(value);</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p>接下來開始實作Promise物件，使他適用到任何函式中。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> callback = <span class="literal">null</span>;</div><div class="line">	<span class="keyword">this</span>.then = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</div><div class="line">		callback = cb;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">		callback(value);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	fn(resolve);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> value = <span class="number">42</span>;</div><div class="line">	resolve(value);</div><div class="line">&#125;) ;</div><div class="line"></div><div class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;  </div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'Got a value:'</span> + value);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>這樣子的結構會有個問題，因為resolve會在then之前執行，所以callback目前的狀態還是null。</p>
<p>在這邊利用setTimeout讓resolve跳出目前的事件流，讓then在resolve前執行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> callback = <span class="literal">null</span>;</div><div class="line">	<span class="keyword">this</span>.then = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</div><div class="line">		callback = cb;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">		setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			callback(value);</div><div class="line">		&#125;,<span class="number">0</span>)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	fn(resolve);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> value = <span class="number">42</span>;</div><div class="line">	resolve(value);</div><div class="line">&#125;) ;</div><div class="line"></div><div class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;  </div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'Got a value:'</span> + value);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>乍看之下好像完成了，但是一旦then是非同步執行，這樣的結構就會出問題。</p>
<p>因為如此一來resolve一樣在then之前執行了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> callback = <span class="literal">null</span>;</div><div class="line">	<span class="keyword">this</span>.then = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</div><div class="line">		callback = cb;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">		setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			callback(value);</div><div class="line">		&#125;,<span class="number">0</span>)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	fn(resolve);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> value = <span class="number">42</span>;</div><div class="line">	resolve(value);</div><div class="line">&#125;) ;</div><div class="line"></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;  </div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'Got a value:'</span> + value);</div><div class="line">	&#125;);</div><div class="line">&#125;,<span class="number">100</span>)</div></pre></td></tr></table></figure>
<h1 id="狀態機"><a href="#狀態機" class="headerlink" title="狀態機"></a>狀態機</h1><p>可以將<code>狀態</code>及<code>結果</code>記錄在Promise中，利用當前狀態判斷執行順序再將結果傳回欲執行的函式。</p>
<p>若then在resolve前執行則先暫時將then的函式存在deferred中，等候resolve完才執行。</p>
<p>反之若resolve在then前執行，則因為狀態已改變為resolved，可直接接著執行then函式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> state = <span class="string">'pending'</span>;</div><div class="line">	<span class="keyword">var</span> value;</div><div class="line">	<span class="keyword">var</span> deferred;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">newValue</span>) </span>&#123;</div><div class="line">		value = newValue;</div><div class="line">		state = <span class="string">'resolved'</span>;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(deferred) &#123;</div><div class="line">			handle(deferred);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">onResolved</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span>(state === <span class="string">'pending'</span>) &#123;</div><div class="line">			deferred = onResolved;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		onResolved(value);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.then = <span class="function"><span class="keyword">function</span>(<span class="params">onResolved</span>) </span>&#123;</div><div class="line">		handle(onResolved);</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	fn(resolve);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</div><div class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> value = <span class="number">42</span>;</div><div class="line">		resolve(value);</div><div class="line">	&#125;,<span class="number">500</span>);</div><div class="line">&#125;) ;</div><div class="line"></div><div class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;  </div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'1. execute then before resolve , value :'</span> + value);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;  </div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'2. execute then before resolve , value :'</span> + value);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;  </div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'3. execute then before resolve , value :'</span> + value);</div><div class="line">	&#125;);	</div><div class="line">&#125;,<span class="number">300</span>);</div><div class="line"></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;  </div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'execute then after resolve , value :'</span> + value);</div><div class="line">	&#125;);	</div><div class="line">&#125;,<span class="number">1000</span>);</div></pre></td></tr></table></figure>
<p>可以發現如果有多個then在resolve前執行會只有最後一個then會執行，這是因為不斷將deferred覆蓋過去了，所以實作上會利用陣列來儲存函式。</p>
<h1 id="串鏈Promises"><a href="#串鏈Promises" class="headerlink" title="串鏈Promises"></a>串鏈Promises</h1><p>若我們希望then之後可以接著then，如此一來我們必須再then中傳回Promise物件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">fn</span>) </span>&#123;  </div><div class="line">	<span class="keyword">var</span> state = <span class="string">'pending'</span>;</div><div class="line">	<span class="keyword">var</span> value;</div><div class="line">	<span class="keyword">var</span> deferred = <span class="literal">null</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">newValue</span>) </span>&#123;</div><div class="line">		value = newValue;</div><div class="line">		state = <span class="string">'resolved'</span>;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(deferred) &#123;</div><div class="line">			handle(deferred);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">handler</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span>(state === <span class="string">'pending'</span>) &#123;</div><div class="line">			deferred = handler;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(!handler.onResolved) &#123;</div><div class="line">			handler.resolve(value);</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">var</span> ret = handler.onResolved(value);</div><div class="line">		handler.resolve(ret);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.then = <span class="function"><span class="keyword">function</span>(<span class="params">onResolved</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</div><div class="line">			handle(&#123;</div><div class="line">				<span class="attr">onResolved</span>: onResolved,</div><div class="line">				<span class="attr">resolve</span>: resolve</div><div class="line">			&#125;);</div><div class="line">		&#125;);</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	fn(resolve);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> value = <span class="number">42</span>;</div><div class="line">	resolve(value);</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123; </div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"First result:"</span> + result); </div><div class="line">	<span class="keyword">return</span> result+<span class="number">1</span>;</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"Second result:"</span> + result); </div><div class="line">	<span class="keyword">return</span> result+<span class="number">1</span>;</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"Third result:"</span> + result); </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>一般建立的Promise和then建立的Promise有些許的不同</p>
<p>在then建立的Promise中我們把原先的value傳進去執行then中的函式，再將執行結果傳給原先Promise的resolve。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ret = handler.onResolved(value);</div><div class="line">handler.resolve(ret);</div></pre></td></tr></table></figure></p>
<p>文中給的then不一定要有callback函式，因此在handle函式做了判斷<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!handler.onResolved) &#123;  </div><div class="line">	handler.resolve(value);</div><div class="line">	<span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不過我暫時想不到什麼情況下需要一個沒有callback的then。</p>
<h1 id="串鏈中回傳Promise"><a href="#串鏈中回傳Promise" class="headerlink" title="串鏈中回傳Promise"></a>串鏈中回傳Promise</h1><p>then中的程式如果是非同步執行，如此一來必須在串鏈中回傳Promise。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</div><div class="line">	    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="built_in">console</span>.log(<span class="string">"First result:"</span> + result); </div><div class="line">			resolve(result+<span class="number">1</span>);  </div><div class="line">	    &#125;,<span class="number">500</span>)</div><div class="line">	&#125;);</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">anotherPromise</span>) </span>&#123;</div><div class="line">	anotherPromise.then(<span class="function"><span class="keyword">function</span>(<span class="params">finalResult</span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"the final result is"</span>, finalResult);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>我們可以將判別是否為Promise的程式寫到resolve中，我們會不斷的遞迴呼叫resolve函式直到不再是Promise為止。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">fn</span>) </span>&#123;  </div><div class="line">	<span class="keyword">var</span> state = <span class="string">'pending'</span>;</div><div class="line">	<span class="keyword">var</span> value;</div><div class="line">	<span class="keyword">var</span> deferred = <span class="literal">null</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">newValue</span>) </span>&#123;  </div><div class="line">		<span class="keyword">if</span>(newValue &amp;&amp; <span class="keyword">typeof</span> newValue.then === <span class="string">'function'</span>) &#123;</div><div class="line">			newValue.then(resolve);</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		state = <span class="string">'resolved'</span>;</div><div class="line">		value = newValue;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(deferred) &#123;</div><div class="line">			handle(deferred);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">handler</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span>(state === <span class="string">'pending'</span>) &#123;</div><div class="line">			deferred = handler;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(!handler.onResolved) &#123;</div><div class="line">			handler.resolve(value);</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">var</span> ret = handler.onResolved(value);</div><div class="line">		handler.resolve(ret);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.then = <span class="function"><span class="keyword">function</span>(<span class="params">onResolved</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</div><div class="line">			handle(&#123;</div><div class="line">				<span class="attr">onResolved</span>: onResolved,</div><div class="line">				<span class="attr">resolve</span>: resolve</div><div class="line">			&#125;);</div><div class="line">		&#125;);</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	fn(resolve);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> value = <span class="number">42</span>;</div><div class="line">	resolve(value);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;     </div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</div><div class="line">	    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="built_in">console</span>.log(<span class="string">"First result:"</span> + result); </div><div class="line">			resolve(result+<span class="number">1</span>);  </div><div class="line">	    &#125;,<span class="number">500</span>)</div><div class="line">	&#125;);</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"Second result:"</span> + result); </div><div class="line">	<span class="keyword">return</span> result+<span class="number">1</span>;</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"Third result:"</span> + result); </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>錯誤處理及一些實作上的細節等到之後補充。</p>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="http://www.mattgreer.org/articles/promises-in-wicked-detail/" target="_blank" rel="external">JavaScript Promises … In Wicked Detail</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近從 &lt;a href=&quot;http://www.mattgreer.org/articles/promises-in-wicked-detail/&quot;&gt;JavaScript Promises … In Wicked Detail&lt;/a&gt; 研究Promise的實作原理，在此紀錄一下。&lt;/p&gt;
&lt;p&gt;這邊的Promise會盡量符合&lt;code&gt;Promises/A+&lt;/code&gt;的規範但離完整的實作仍會有些細節上處理的差距。&lt;/p&gt;
    
    </summary>
    
      <category term="Programming Language" scheme="http://jeno5980515.github.io/categories/Programming-Language/"/>
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/categories/Programming-Language/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/tags/JavaScript/"/>
    
      <category term="Promise" scheme="http://jeno5980515.github.io/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>[Cordova] Cordova插件開發</title>
    <link href="http://jeno5980515.github.io/2017/04/20/Mobile%20Application/Cordova/Cordova%E6%8F%92%E4%BB%B6%E9%96%8B%E7%99%BC/"/>
    <id>http://jeno5980515.github.io/2017/04/20/Mobile Application/Cordova/Cordova插件開發/</id>
    <published>2017-04-20T02:54:24.000Z</published>
    <updated>2017-04-20T03:53:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前一個Cordova的專案需要製作GIF的功能，因為沒有現成插件的所以自己試著寫了一個，目前只做了Android版本。</p>
<p>在這邊只放了部分內容而完整檔案放在GitHub上。</p>
<p><span style="color:red;">此插件為兩年前寫的，所以一些細節可能與現在版本不同！</span></p>
<a id="more"></a>
<h1 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h1><p>由於Cordova像是一層接口，所以必須寫js端的接口以及Java原生內容，而這邊則是直接在Java端製作好GIF再將路徑經由接口回傳。</p>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><p>首先可以先去官方網站上下載範例做修改。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cordova plugin add https://git-wip-us.apache.org/repos/asf/cordova-plugin-device.git</div></pre></td></tr></table></figure></p>
<h1 id="plugin-xml"><a href="#plugin-xml" class="headerlink" title="plugin.xml"></a>plugin.xml</h1><p>在<code>plugin.xml</code>修改插件相關的配置。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">xmlns</span>=<span class="string">"http://apache.org/cordova/ns/plugins/1.0"</span></span></div><div class="line">        <span class="attr">id</span>=<span class="string">"cordova-plugin-gif"</span>       //這邊<span class="attr">id</span>是給外部安裝的名稱</div><div class="line">        <span class="attr">version</span>=<span class="string">"1.0.0"</span>&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>GIF<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">js-module</span> <span class="attr">src</span>=<span class="string">"www/GIF.js"</span> <span class="attr">name</span>=<span class="string">"GIF"</span>&gt;</span> //js接口檔案的位置及名稱</div><div class="line">    <span class="tag">&lt;<span class="name">clobbers</span> <span class="attr">target</span>=<span class="string">"window.plugins.gif"</span> /&gt;</span>  //外部使用的接口名稱</div><div class="line">  <span class="tag">&lt;/<span class="name">js-module</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">platform</span> <span class="attr">name</span>=<span class="string">"android"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">config-file</span> <span class="attr">target</span>=<span class="string">"res/xml/config.xml"</span> <span class="attr">parent</span>=<span class="string">"/*"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">feature</span> <span class="attr">name</span>=<span class="string">"GIF"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"android-package"</span> <span class="attr">value</span>=<span class="string">"jeno5980515.cordova.GIF"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">feature</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">config-file</span>&gt;</span> </div><div class="line">    //平台上需要用到的設置</div><div class="line">    <span class="tag">&lt;<span class="name">config-file</span> <span class="attr">target</span>=<span class="string">"AndroidManifest.xml"</span> <span class="attr">parent</span>=<span class="string">"/*"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">config-file</span>&gt;</span></div><div class="line">    //需要用到的其他檔案</div><div class="line">    <span class="tag">&lt;<span class="name">source-file</span> <span class="attr">src</span>=<span class="string">"src/android/libs/commons-codec-1.10.jar"</span> <span class="attr">target-dir</span>=<span class="string">"libs"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source-file</span> <span class="attr">src</span>=<span class="string">"src/android/AnimatedGifEncoder.java"</span> <span class="attr">target-dir</span>=<span class="string">"src/jeno5980515/cordova/"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source-file</span> <span class="attr">src</span>=<span class="string">"src/android/GIF.java"</span> <span class="attr">target-dir</span>=<span class="string">"src/jeno5980515/cordova/"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">platform</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> PLUGIN_NAME = <span class="string">"GIF"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">GIF</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//呼叫原生的結構 </span></div><div class="line"><span class="comment">//cordova.exec(successCallback, errorCallback, 插件名稱, 插件動作, [參數陣列]);</span></div><div class="line">GIF.prototype.finish = <span class="function"><span class="keyword">function</span>(<span class="params">successCallback,errorCallback,data</span>)</span>&#123;</div><div class="line">	cordova.exec(successCallback, errorCallback, PLUGIN_NAME, <span class="string">"finish"</span>, [] );</div><div class="line">&#125;</div><div class="line"></div><div class="line">GIF.install = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (!<span class="built_in">window</span>.plugins) &#123;</div><div class="line">		<span class="built_in">window</span>.plugins = &#123;&#125;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="built_in">window</span>.plugins.gif = <span class="keyword">new</span> GIF();</div><div class="line"> 	<span class="keyword">return</span> <span class="built_in">window</span>.plugins.gif;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">cordova.addConstructor(GIF.install);</div></pre></td></tr></table></figure>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GIF</span> <span class="keyword">extends</span> <span class="title">CordovaPlugin</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(String action, JSONArray args, CallbackContext callbackContext)</span> <span class="keyword">throws</span> JSONException </span>&#123;</div><div class="line">    	<span class="comment">//判斷進來的動作為何</span></div><div class="line">		<span class="keyword">if</span> ( action.equals(<span class="string">"finish"</span>) )&#123;</div><div class="line">			...</div><div class="line">			String arg1 = args.getString(<span class="number">0</span>);  <span class="comment">//取得剛剛傳進來的參數</span></div><div class="line">			...</div><div class="line"></div><div class="line">			<span class="comment">//將內容傳回callback</span></div><div class="line">			callbackContext.success(<span class="string">"XXX"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span> ;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span> ;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span> ;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h1><p>如此一來經由指令即可安裝至專案中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cordova plugin add 來源</div></pre></td></tr></table></figure></p>
<h1 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h1><p><a href="https://github.com/jeno5980515/cordova-plugin-gif" target="_blank" rel="external">cordova-plugin-gif</a></p>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://github.com/nbadal/android-gif-encoder" target="_blank" rel="external">android-gif-encoder</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前一個Cordova的專案需要製作GIF的功能，因為沒有現成插件的所以自己試著寫了一個，目前只做了Android版本。&lt;/p&gt;
&lt;p&gt;在這邊只放了部分內容而完整檔案放在GitHub上。&lt;/p&gt;
&lt;p&gt;&lt;span style=&#39;color:red;&#39;&gt;此插件為兩年前寫的，所以一些細節可能與現在版本不同！&lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Mobile Application" scheme="http://jeno5980515.github.io/categories/Mobile-Application/"/>
    
      <category term="Cordova" scheme="http://jeno5980515.github.io/categories/Mobile-Application/Cordova/"/>
    
    
      <category term="Android" scheme="http://jeno5980515.github.io/tags/Android/"/>
    
      <category term="Cordova" scheme="http://jeno5980515.github.io/tags/Cordova/"/>
    
  </entry>
  
  <entry>
    <title>[Hexo] 主題設置</title>
    <link href="http://jeno5980515.github.io/2017/04/18/Web/Hexo/%E4%B8%BB%E9%A1%8C%E8%A8%AD%E7%BD%AE/"/>
    <id>http://jeno5980515.github.io/2017/04/18/Web/Hexo/主題設置/</id>
    <published>2017-04-18T02:04:12.000Z</published>
    <updated>2017-04-20T03:55:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近研究了一下Hexo主題的寫法，在這邊紀錄一下。</p>
<a id="more"></a>
<h1 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h1><p>Hexo使用<code>EJS</code>和<code>Stylus</code>。</p>
<p>EJS在<code>layout</code>而Stylus在<code>source</code>裡，靜態產生後的來源都可以放在<code>source</code>資料夾裡。</p>
<h1 id="New-Page"><a href="#New-Page" class="headerlink" title="New Page"></a>New Page</h1><p>想要新增一個頁面可以輸入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page &quot;xxx&quot;</div></pre></td></tr></table></figure></p>
<p>並且在主題內的<code>_config.yml</code>的<code>menu</code>加上頁面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">	home: /</div><div class="line">	archives: archives</div><div class="line">	tags: tags</div><div class="line">	xxx: xxx</div></pre></td></tr></table></figure></p>
<h1 id="EJS"><a href="#EJS" class="headerlink" title="EJS"></a>EJS</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//只執行</div><div class="line">&lt;% %&gt;</div><div class="line">//將執行結果轉成字串</div><div class="line">&lt;%- %&gt;</div><div class="line">//引入其他ejs</div><div class="line">&lt;%- partial(&apos;article&apos;) %&gt;</div></pre></td></tr></table></figure>
<h1 id="Hexo變數及函式"><a href="#Hexo變數及函式" class="headerlink" title="Hexo變數及函式"></a>Hexo變數及函式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//當前是否首頁</span></div><div class="line">is_home()</div><div class="line"><span class="comment">//當前是否在某個頁面</span></div><div class="line">is_current(<span class="string">"xxx"</span>)</div><div class="line"><span class="comment">//路徑前加根路徑</span></div><div class="line">url_for()</div><div class="line"><span class="comment">//當前頁面變數</span></div><div class="line">page</div><div class="line"><span class="comment">//當前頁面路徑</span></div><div class="line">page.path</div><div class="line"><span class="comment">//網站變數</span></div><div class="line">site</div><div class="line"><span class="comment">//網站所有文章</span></div><div class="line">site.posts</div></pre></td></tr></table></figure>
<h1 id="Nav"><a href="#Nav" class="headerlink" title="Nav"></a>Nav</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//當初設在主題_config.yml的menu內容</div><div class="line">&lt;% for (var i in theme.menu)&#123; %&gt;</div><div class="line">	&lt;a href=&quot;&lt;%- url_for(theme.menu[i]) %&gt;&quot; &gt;&lt;%- i  %&gt;&lt;/a&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>
<h1 id="Post"><a href="#Post" class="headerlink" title="Post"></a>Post</h1><p>Hexo的文章似乎沒有不同分頁屬性的結構，只能使用md的屬性或者來源來分辨。</p>
<p>文章有預設的屬性不能自己新增，在這邊使用屬性中的資料夾來源辨別。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;% </div><div class="line">site.posts.forEach(function(post)&#123;</div><div class="line">	var slug = post.slug.split(&quot;/&quot;)[0] ;</div><div class="line">	if ( slug === &quot;xxx&quot; )&#123; %&gt;</div><div class="line">		&lt;img src=&lt;%- post.photos[0] %&gt; /&gt;</div><div class="line">		&lt;div &gt;</div><div class="line">			&lt;%- post.title %&gt;</div><div class="line">		&lt;/div&gt;</div><div class="line">		&lt;div &gt;</div><div class="line">			&lt;%- post.description %&gt;</div><div class="line">		&lt;/div&gt;</div><div class="line">		&lt;div &gt;</div><div class="line">			&lt;%- post.content %&gt;</div><div class="line">		&lt;/div&gt;</div><div class="line">	&lt;% &#125;</div><div class="line">&#125;) %&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近研究了一下Hexo主題的寫法，在這邊紀錄一下。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://jeno5980515.github.io/categories/Web/"/>
    
      <category term="Hexo" scheme="http://jeno5980515.github.io/categories/Web/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://jeno5980515.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>[Web] AMD及效能調校</title>
    <link href="http://jeno5980515.github.io/2017/04/13/Web/Overall/AMD%E5%8F%8A%E6%95%88%E8%83%BD%E8%AA%BF%E6%A0%A1/"/>
    <id>http://jeno5980515.github.io/2017/04/13/Web/Overall/AMD及效能調校/</id>
    <published>2017-04-13T11:50:46.000Z</published>
    <updated>2017-04-14T05:46:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近另一個專案的網站一上線馬上就崩潰了，紀錄一下關於效能上的解決方法。</p>
<a id="more"></a>
<h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>該網站的效能瓶頸在於會載入大量js寫成的動畫效果，因此利用模組化將程式碼拆開且動態載入需要的效果即可。</p>
<p>使用<code>createElement</code>產生<code>script</code>，再綁定<code>load</code>事件來偵測是否載入完畢達到非同步的效果。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> jsFile = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</div><div class="line">jsFile.setAttribute(<span class="string">"type"</span>,<span class="string">"text/javascript"</span>);</div><div class="line">jsFile.setAttribute(<span class="string">"src"</span>, <span class="string">"js/jquery.js"</span>);</div><div class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(jsFile);</div><div class="line"></div><div class="line">jsFile.addEventListener(<span class="string">"load"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log($);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><p>若是像以前在HTML逐步利用tag載入script，這樣子同步載入會照成阻塞以及非必要的載入，而<a href="https://en.wikipedia.org/wiki/Asynchronous_module_definition" target="_blank" rel="external">AMD</a> ( Asynchronous Module Definition ) 就是希望可以達到模組化以及異步載入的效果。</p>
<h3 id="RequireJS"><a href="#RequireJS" class="headerlink" title="RequireJS"></a>RequireJS</h3><p>若不想像這樣一個一個綁事件，則可以利用<a href="http://requirejs.org/" target="_blank" rel="external">RequireJS</a>這個函式庫達到AMD的效果。</p>
<p>在HTML中設置<code>data-main</code>屬性註明主要的js檔(.js可省略)，<code>defer</code>和<code>async=&quot;true&quot;</code>則是註明需要異步載入(非必需)。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/require.js"</span> <span class="attr">defer</span> <span class="attr">async</span>=<span class="string">"true"</span> <span class="attr">data-main</span>=<span class="string">"/js/main"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>使用<code>require</code>函數載入模組，可利用陣列一次載入多個模組。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">'jquery'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">$</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log($);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>若想要將模組導出，則要使用<code>define</code>函數。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// module1.js</span></div><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Jeno"</span> ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">getName</span> : getName</div><div class="line">	&#125;　　　</div><div class="line">&#125;);</div><div class="line"><span class="comment">// main.js</span></div><div class="line"><span class="built_in">require</span>([<span class="string">'module1'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">m1</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(m1.getName);  <span class="comment">// Jeno</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>若這個要導出的模組同時需要依賴其他模組，將<code>define</code>第一個參數如同<code>require</code>使用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// module1.js</span></div><div class="line">define([<span class="string">'jquery'</span>],<span class="function"><span class="keyword">function</span> (<span class="params">$</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Jeno"</span> ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">getName</span> : getName</div><div class="line">	&#125;　　　</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><p>ES6中則是直接新增了<code>import</code>及<code>export</code>來使用模組。</p>
<p>利用<code>export</code>導出模組。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// module1.js</span></div><div class="line"><span class="comment">// default代表預設導出</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> getName()&#123;</div><div class="line">	<span class="keyword">return</span> <span class="string">"Jeno"</span> ;</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getWord</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">"Hello"</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>利用<code>import</code>導入模組。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'./module1.js'</span> ;</div><div class="line">foo(); <span class="comment">//Jeno</span></div></pre></td></tr></table></figure></p>
<p>載入模組特定的元素<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; getName , getWord &#125; <span class="keyword">from</span> <span class="string">'./module1.js'</span> ;</div><div class="line">getName(); <span class="comment">//Jeno</span></div><div class="line">getWord(); <span class="comment">//Hello</span></div></pre></td></tr></table></figure></p>
<p>載入模組所有元素<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Module1 <span class="keyword">from</span> <span class="string">'./module1.js'</span> ;</div><div class="line">Module1.default(); <span class="comment">//Jeno</span></div><div class="line">Module1.getWord(); <span class="comment">//Hello</span></div></pre></td></tr></table></figure></p>
<h2 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h2><p>調校前<br><img src="/img/Web/AMD及效能調校2.png" alt=""><br>調校後<br><img src="/img/Web/AMD及效能調校.png" alt=""><br>原本大概50人左右反應時間就需要20秒左右，改善後則是50人也不超過2秒，沒想到人數一多在效能上會有如此大的差距！</p>
<h2 id="壓力測試"><a href="#壓力測試" class="headerlink" title="壓力測試"></a>壓力測試</h2><p><a href="https://loadimpact.com/" target="_blank" rel="external">Load Impact</a>是個免費壓力測試的服務，超過一定次數或者需要更高的要求則需要付費。</p>
<h2 id="Slow-Query-Log"><a href="#Slow-Query-Log" class="headerlink" title="Slow Query Log"></a>Slow Query Log</h2><p><code>MySQL</code>可以在<code>my.cnf</code>加入設定記錄較慢的query。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">slow_query_log = 1 //開啟設定</div><div class="line">slow_query_log_file = /var/log/mysql-slow.log //log檔位置</div><div class="line">long_query_time = 1 //超出幾秒儲存</div></pre></td></tr></table></figure></p>
<h2 id="Time-Log-Pivot"><a href="#Time-Log-Pivot" class="headerlink" title="Time Log Pivot"></a>Time Log Pivot</h2><p>在程式執行間隔前後紀錄當下時間，利用差值則可找出程式的效能瓶頸。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近另一個專案的網站一上線馬上就崩潰了，紀錄一下關於效能上的解決方法。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://jeno5980515.github.io/categories/Web/"/>
    
      <category term="Overall" scheme="http://jeno5980515.github.io/categories/Web/Overall/"/>
    
    
      <category term="Web" scheme="http://jeno5980515.github.io/tags/Web/"/>
    
      <category term="Performance" scheme="http://jeno5980515.github.io/tags/Performance/"/>
    
  </entry>
  
  <entry>
    <title>[JavaScript] 非同步事件處理</title>
    <link href="http://jeno5980515.github.io/2017/04/07/Programming%20Language/JavaScript/%E9%9D%9E%E5%90%8C%E6%AD%A5%E4%BA%8B%E4%BB%B6%E8%99%95%E7%90%86/"/>
    <id>http://jeno5980515.github.io/2017/04/07/Programming Language/JavaScript/非同步事件處理/</id>
    <published>2017-04-07T15:46:26.000Z</published>
    <updated>2017-04-14T13:22:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>許久沒更新網誌了，開始上班剛好是個好時機重新經營。</p>
<p>最近又遇到非同步事件的問題，雖然寫過但一遇到還是卡住，因此紀錄一下做法。</p>
<a id="more"></a>
<h1 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h1><p>假設我們現在有三個事件要進行並取得結果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tasks = [task1, task2, task3];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">task1</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'task 1 done'</span>);</div><div class="line">    callback(<span class="number">1</span>);</div><div class="line">  &#125;, <span class="number">500</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">task2</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'task 2 done'</span>);</div><div class="line">    callback(<span class="number">2</span>);</div><div class="line">  &#125;, <span class="number">400</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">task3</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'task 3 done'</span>);</div><div class="line">    callback(<span class="number">3</span>);</div><div class="line">  &#125;, <span class="number">300</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;&#125; ;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getResult</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">	obj.result = result ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="依序執行"><a href="#依序執行" class="headerlink" title="依序執行"></a>依序執行</h2><p>利用遞迴以及紀錄次數<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sequential</span>(<span class="params">tasks,callback</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> index = <span class="number">0</span> ;</div><div class="line">	<span class="keyword">var</span> resultList = [] ;</div><div class="line">	(<span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span> ( index &lt; tasks.length )&#123;</div><div class="line">			tasks[index++](<span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</div><div class="line">				resultList.push(el);</div><div class="line">				next(tasks);</div><div class="line">			&#125;);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			callback(resultList);</div><div class="line">		&#125;</div><div class="line">	&#125;)();</div><div class="line">&#125;</div><div class="line"></div><div class="line">sequential(tasks,getResult);</div></pre></td></tr></table></figure></p>
<h2 id="同時進行"><a href="#同時進行" class="headerlink" title="同時進行"></a>同時進行</h2><p>紀錄事件狀態及紀錄完成次數<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">parallel</span>(<span class="params">tasks , callback</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> resultList = [] , resultCount = <span class="number">0</span> ;</div><div class="line">	resultList.length = tasks.length ;</div><div class="line">	<span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; tasks.length ; i ++ )&#123;</div><div class="line">		tasks[i](<span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</div><div class="line">			resultList[i] = el ;</div><div class="line">			resultCount ++ ;</div><div class="line">			<span class="keyword">if</span> ( resultCount &gt;= tasks.length )&#123;</div><div class="line">				callback(resultList) ;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line">parallel(tasks,getResult);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;許久沒更新網誌了，開始上班剛好是個好時機重新經營。&lt;/p&gt;
&lt;p&gt;最近又遇到非同步事件的問題，雖然寫過但一遇到還是卡住，因此紀錄一下做法。&lt;/p&gt;
    
    </summary>
    
      <category term="Programming Language" scheme="http://jeno5980515.github.io/categories/Programming-Language/"/>
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/categories/Programming-Language/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/tags/JavaScript/"/>
    
      <category term="Flow Control" scheme="http://jeno5980515.github.io/tags/Flow-Control/"/>
    
  </entry>
  
  <entry>
    <title>[Security] Buffer Overflow</title>
    <link href="http://jeno5980515.github.io/2015/12/11/Security/Buffer%20Overflow/"/>
    <id>http://jeno5980515.github.io/2015/12/11/Security/Buffer Overflow/</id>
    <published>2015-12-11T08:53:17.000Z</published>
    <updated>2017-04-14T13:30:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Buffer Overflow</code>是最基礎也是最常見的漏洞攻擊，以下是在<code>x86</code>執行的實作範例。</p>
<a id="more"></a>
<h1 id="程式"><a href="#程式" class="headerlink" title="程式"></a>程式</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</div><div class="line">	system(<span class="string">"/bin/sh"</span>) ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">char</span> buf[<span class="number">10</span>] ;</div><div class="line">	<span class="built_in">puts</span>(<span class="string">"What's your name?"</span>) ;</div><div class="line">	gets(buf);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"Hi !! %s\n"</span>,buf) ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	exec();</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>這是一支簡單的讀入輸出的程式碼，但注意到由於<code>buf</code>只有10個byte的空間，所以一旦輸入大於10個byte的字串就有可能造成意外。</p>
<h1 id="Stack-Smashing"><a href="#Stack-Smashing" class="headerlink" title="Stack Smashing"></a>Stack Smashing</h1><p>普遍編譯器都會提供<code>Stack Smashing</code>的保護，但為了簡單示範在編譯時將保護關掉。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gcc -c -fno-stack-protector test.c</div><div class="line">gcc -o test test.o</div></pre></td></tr></table></figure></p>
<h1 id="攻擊"><a href="#攻擊" class="headerlink" title="攻擊"></a>攻擊</h1><p>假設程式碼中剛剛好有你想執行的函式，如此一來我們只要取得函式的位置後利用overflow蓋過去欲執行的位置即可。</p>
<h1 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h1><p>我們可以利用gdb來debugger<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gdb ./test</div></pre></td></tr></table></figure></p>
<p>查看main的stack分佈<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(gdb) disas main</div></pre></td></tr></table></figure></p>
<p>得知在<code>*main+6</code>的位置執行<code>exec</code>函式，因此我們先在這邊設一個<code>Break Point</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(gdb) b *main+6</div></pre></td></tr></table></figure></p>
<p>再來我們查看exec<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(gdb) disas exec</div></pre></td></tr></table></figure></p>
<p>找到在<code>*exec+49</code>的位置return，因此在這邊設一個<code>Break Point</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(gdb) b *exec+49</div></pre></td></tr></table></figure></p>
<p>接著運行程式碼<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(gdb) r</div></pre></td></tr></table></figure></p>
<p>由於呼叫函式會將接下來欲執行的程式位置push進堆疊，所以我們可以看到目前stack最上層就是呼叫完函式後欲執行的位置，也是我們欲覆蓋過去的地方。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(gdb) x/wx $esp</div></pre></td></tr></table></figure></p>
<p>繼續執行程式碼<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(gdb) c</div></pre></td></tr></table></figure></p>
<p>接下來查看要塞幾個byte才能覆蓋到該位置，在這裡我們利用每個字母四個為一組來測試。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxxxxxxxxxAAAABBBBCCCCDDDDEEEEFFFF</div></pre></td></tr></table></figure></p>
<p>在第二個break point查看esp。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(gdb) x/wx $esp</div></pre></td></tr></table></figure></p>
<p>得到位置為<code>0x44444444</code>，也就是<code>DDDD</code>的部分，因此我們需要在DDDD的部分放進想執行的位置，現在來查看欲執行的函式位置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(gdb) disas *exec</div></pre></td></tr></table></figure></p>
<p>得到位置為<code>0x080484ad</code>，因此可以得到我們的攻擊字串，由於是<code>little endian</code>所以記得將位置相反。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo -ne &quot;xxxxxxxxxxAAAABBBBCCCC\xad\x84\x04\x08\n&quot; &gt; s</div></pre></td></tr></table></figure></p>
<p>再將字串丟進程式運行則可以發現執行到覆蓋的部分了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat s - | ./test</div></pre></td></tr></table></figure></p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>這只是展示最簡單的<code>Buffer Overflow</code>運行原理，不過一般情況會有許多的保護機制，也不太可能這麼剛好塞了特別的函式讓你運行，其餘的方法待之後學習紀錄。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Buffer Overflow&lt;/code&gt;是最基礎也是最常見的漏洞攻擊，以下是在&lt;code&gt;x86&lt;/code&gt;執行的實作範例。&lt;/p&gt;
    
    </summary>
    
      <category term="Security" scheme="http://jeno5980515.github.io/categories/Security/"/>
    
    
      <category term="Security" scheme="http://jeno5980515.github.io/tags/Security/"/>
    
      <category term="C" scheme="http://jeno5980515.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>[Web] 一頁式網站</title>
    <link href="http://jeno5980515.github.io/2015/11/19/Web/Overall/%E4%B8%80%E9%A0%81%E5%BC%8F%E7%B6%B2%E7%AB%99/"/>
    <id>http://jeno5980515.github.io/2015/11/19/Web/Overall/一頁式網站/</id>
    <published>2015-11-19T12:51:42.000Z</published>
    <updated>2017-04-14T13:35:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>網站可以利用多個HTML檔切換，也可以利用<code>#</code>來達到一頁式的網站，一頁式的網站載入時間會因為檔案大較久，但載入完畢後切換頁面則不需要再載入，另外若有資料必須在多個頁面使用也不需要傳遞。</p>
<a id="more"></a>
<h1 id="切換"><a href="#切換" class="headerlink" title="切換"></a>切換</h1><p>利用CSS的<code>display:none</code>，使用jQuery則可以使用<code>show()</code>和<code>hide()</code>。</p>
<h1 id=""><a href="#" class="headerlink" title="#"></a>#</h1><p>加上<code>location.href=&quot;#xxx&quot;</code>則可以在網址加上<code>#</code>和值，可以用來標示不同的頁面，而上一頁下一頁也會有作用。</p>
<h1 id="onhashchange"><a href="#onhashchange" class="headerlink" title="onhashchange"></a>onhashchange</h1><p>單純這樣子會使瀏覽器的上一頁和下一頁無作用，僅造成網址的改變，因此要加入事件偵測，再取得當前的頁面做不同的事件即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	alert(<span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)); <span class="comment">//取得tag後的value</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// or jQuery</span></div><div class="line">$(<span class="built_in">window</span>).on(<span class="string">'hashchange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	alert(<span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h1 id="返回首頁"><a href="#返回首頁" class="headerlink" title="返回首頁"></a>返回首頁</h1><p>若不希望可以直接進入子頁面，除了做事件偵測外還要改網址。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ( <span class="built_in">window</span>.location.hash )&#123;</div><div class="line">	<span class="built_in">window</span>.location.href = <span class="string">""</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;網站可以利用多個HTML檔切換，也可以利用&lt;code&gt;#&lt;/code&gt;來達到一頁式的網站，一頁式的網站載入時間會因為檔案大較久，但載入完畢後切換頁面則不需要再載入，另外若有資料必須在多個頁面使用也不需要傳遞。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://jeno5980515.github.io/categories/Web/"/>
    
      <category term="Overall" scheme="http://jeno5980515.github.io/categories/Web/Overall/"/>
    
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>[Front-End] mouseDown手機上運行</title>
    <link href="http://jeno5980515.github.io/2015/11/06/Web/Front-End/mouseDown%E6%89%8B%E6%A9%9F%E4%B8%8A%E9%81%8B%E8%A1%8C/"/>
    <id>http://jeno5980515.github.io/2015/11/06/Web/Front-End/mouseDown手機上運行/</id>
    <published>2015-11-06T09:53:39.000Z</published>
    <updated>2017-04-14T13:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>手機上無法使用<code>mouseDown</code>等等的事件，必須使用<code>touchStart</code>，網路上找到別人寫的替換方法。</p>
<a id="more"></a>
<h1 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mouseEventTypes = &#123;</div><div class="line">	<span class="attr">touchstart</span> : <span class="string">"mousedown"</span>,</div><div class="line">	<span class="attr">touchmove</span> : <span class="string">"mousemove"</span>,</div><div class="line">	<span class="attr">touchend</span> : <span class="string">"mouseup"</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (originalType <span class="keyword">in</span> mouseEventTypes) &#123;</div><div class="line">	<span class="built_in">document</span>.addEventListener(originalType, <span class="function"><span class="keyword">function</span>(<span class="params">originalEvent</span>) </span>&#123;</div><div class="line">		event = <span class="built_in">document</span>.createEvent(<span class="string">"MouseEvents"</span>);</div><div class="line">		touch = originalEvent.changedTouches[<span class="number">0</span>];</div><div class="line">		event.initMouseEvent(mouseEventTypes[originalEvent.type], <span class="literal">true</span>, <span class="literal">true</span>,</div><div class="line">		<span class="built_in">window</span>, <span class="number">0</span>, touch.screenX, touch.screenY, touch.clientX,</div><div class="line">		touch.clientY, touch.ctrlKey, touch.altKey, touch.shiftKey,</div><div class="line">		touch.metaKey, <span class="number">0</span>, <span class="literal">null</span>);</div><div class="line">		originalEvent.target.dispatchEvent(event);</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;手機上無法使用&lt;code&gt;mouseDown&lt;/code&gt;等等的事件，必須使用&lt;code&gt;touchStart&lt;/code&gt;，網路上找到別人寫的替換方法。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://jeno5980515.github.io/categories/Web/"/>
    
      <category term="Front-End" scheme="http://jeno5980515.github.io/categories/Web/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>[CentOS] 使用sftp傳輸檔案</title>
    <link href="http://jeno5980515.github.io/2015/11/06/Server/CentOS/%E4%BD%BF%E7%94%A8sftp%E5%82%B3%E8%BC%B8%E6%AA%94%E6%A1%88/"/>
    <id>http://jeno5980515.github.io/2015/11/06/Server/CentOS/使用sftp傳輸檔案/</id>
    <published>2015-11-06T09:15:27.000Z</published>
    <updated>2017-04-14T13:30:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>想遠端傳輸檔案可以使用<code>sftp</code>，但要產生<code>ssh key</code>。</p>
<a id="more"></a>
<h1 id="過程"><a href="#過程" class="headerlink" title="過程"></a>過程</h1><p>先在本機產生ssh key。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa</div></pre></td></tr></table></figure></p>
<p>開啟檔案<code>xxx.pub</code>後將內容複製，再到伺服器端輸入以下指令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir ~/.ssh</div><div class="line">vim ~/ssh/authorized_keys</div></pre></td></tr></table></figure></p>
<p>再將剛剛複製的內容貼在最後即可，若使用FileZilla則在設定中加入剛剛產生的檔案即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;想遠端傳輸檔案可以使用&lt;code&gt;sftp&lt;/code&gt;，但要產生&lt;code&gt;ssh key&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Server" scheme="http://jeno5980515.github.io/categories/Server/"/>
    
      <category term="CentOS" scheme="http://jeno5980515.github.io/categories/Server/CentOS/"/>
    
    
      <category term="CentOS" scheme="http://jeno5980515.github.io/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>[Joomla] Joomla網站搬家</title>
    <link href="http://jeno5980515.github.io/2015/10/27/Content%20Management%20System/Joomla/Joomla%E7%B6%B2%E7%AB%99%E6%90%AC%E5%AE%B6/"/>
    <id>http://jeno5980515.github.io/2015/10/27/Content Management System/Joomla/Joomla網站搬家/</id>
    <published>2015-10-27T08:22:13.000Z</published>
    <updated>2017-04-14T13:23:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近要將一個用<code>Joomla</code>做的網站搬到新的server上，將一些遇到的問題紀錄一下。</p>
<a id="more"></a>
<h1 id="備份"><a href="#備份" class="headerlink" title="備份"></a>備份</h1><p>將網站內容及資料庫搬到新server上，對<code>configuration.php</code>做修改。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> $user = 資料庫帳號 ;</div><div class="line"><span class="keyword">public</span> $password = 資料庫密碼 ;</div><div class="line"><span class="keyword">public</span> $db = 資料表 ;</div><div class="line"><span class="keyword">public</span> $log_path = 檔案位置 ;</div><div class="line"><span class="keyword">public</span> $tmp_path = 檔案位置 ;</div></pre></td></tr></table></figure>
<h1 id="Search-Engine-Friendly-URLs"><a href="#Search-Engine-Friendly-URLs" class="headerlink" title="Search Engine Friendly URLs"></a>Search Engine Friendly URLs</h1><p>在搬遷的過程中卡了許久在這邊。這功能可以將你的網址縮成較美觀的格式，但首先要確定<code>.htaccess</code>是可以覆寫的，編輯<code>httpd.conf</code>檔案加入下行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Directory &quot;檔案位置&quot;&gt;</div><div class="line">  AllowOverride All</div><div class="line">&lt;/Directory&gt;</div></pre></td></tr></table></figure></p>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://goo.gl/zDlV8S" target="_blank" rel="external">Enabling Search Engine Friendly (SEF) URLs on Apache</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近要將一個用&lt;code&gt;Joomla&lt;/code&gt;做的網站搬到新的server上，將一些遇到的問題紀錄一下。&lt;/p&gt;
    
    </summary>
    
      <category term="Content Management System" scheme="http://jeno5980515.github.io/categories/Content-Management-System/"/>
    
      <category term="Joomla" scheme="http://jeno5980515.github.io/categories/Content-Management-System/Joomla/"/>
    
    
      <category term="Joomla" scheme="http://jeno5980515.github.io/tags/Joomla/"/>
    
  </entry>
  
  <entry>
    <title>[Front-End] 自動調整Contenteditable邊界</title>
    <link href="http://jeno5980515.github.io/2015/09/22/Web/Front-End/%E8%87%AA%E5%8B%95%E8%AA%BF%E6%95%B4Contenteditable%E9%82%8A%E7%95%8C/"/>
    <id>http://jeno5980515.github.io/2015/09/22/Web/Front-End/自動調整Contenteditable邊界/</id>
    <published>2015-09-22T01:30:00.000Z</published>
    <updated>2017-04-14T13:31:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>HTML5有<code>contenteditable</code>屬性，可以達到類似<code>textarea</code>的效果。</p>
<a id="more"></a>
<h1 id="差異"><a href="#差異" class="headerlink" title="差異"></a>差異</h1><p>原理大致上和<code>textarea</code>差不多，但如果換行會產生新的子區塊而不是產生換行字元，因此必須使用<code>keydown</code>將動作替換成插入<code>&lt;br&gt;</code>，但若只插入一個<code>&lt;br&gt;</code>在文字的最後無法換行，等待之後尋求更好的解法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">text.onkeydown = function(e)&#123;</div><div class="line">	if ( e.keyCode === 13) &#123;</div><div class="line">		document.execCommand(&apos;insertHTML&apos;, false, &apos;&lt;br&gt;&lt;br&gt;&apos;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var getTextMaxLength = function(text,font,size)&#123;</div><div class="line">	var s = &quot;&quot; ;</div><div class="line">	var t = (text.innerHTML).replace(&quot;&amp;nbsp;&quot;,&apos; &apos;) ;</div><div class="line">	var max = 0 ;</div><div class="line">	var row = 0 ;</div><div class="line">	for ( var i = 0 ; t.indexOf(&quot;&lt;br&gt;&quot;) !== -1 ; i ++ , row = i )&#123;</div><div class="line">		max = Math.max(max,getTextWidth(t.substring(0,t.indexOf(&quot;&lt;br&gt;&quot;)-1),font,size)) ;</div><div class="line">		t = t.substring(t.indexOf(&quot;&lt;br&gt;&quot;)+4,t.length) ;</div><div class="line">	&#125;</div><div class="line">	if ( t !== &quot;&quot; )&#123;</div><div class="line">		max = Math.max(max,getTextWidth(t,font,size)) ;</div><div class="line">		row ++ ;</div><div class="line">	&#125;</div><div class="line">	return &#123;row:row,length:max&#125; ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h1><p><a href="https://github.com/jeno5980515/contenteditable-autosize" target="_blank" rel="external">GitHub</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;HTML5有&lt;code&gt;contenteditable&lt;/code&gt;屬性，可以達到類似&lt;code&gt;textarea&lt;/code&gt;的效果。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://jeno5980515.github.io/categories/Web/"/>
    
      <category term="Front-End" scheme="http://jeno5980515.github.io/categories/Web/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>[Front-End] removeClass和addClass</title>
    <link href="http://jeno5980515.github.io/2015/09/12/Web/Front-End/removeClass%E5%92%8CaddClass/"/>
    <id>http://jeno5980515.github.io/2015/09/12/Web/Front-End/removeClass和addClass/</id>
    <published>2015-09-12T13:55:01.000Z</published>
    <updated>2017-04-14T13:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在純JavaScript使用addClass和removeClass。</p>
<a id="more"></a>
<h1 id="hasClass"><a href="#hasClass" class="headerlink" title="hasClass"></a>hasClass</h1><p>利用正規表示式判斷是否存在該class。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> hasClass = <span class="function"><span class="keyword">function</span>(<span class="params">ele,cls</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> !!ele.className.match(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(\\s|^)'</span>+cls+<span class="string">'(\\s|$)'</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="addClass"><a href="#addClass" class="headerlink" title="addClass"></a>addClass</h1><p>若沒有就加上去。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> addClass = <span class="function"><span class="keyword">function</span>(<span class="params">ele,cls</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (!hasClass(ele,cls)) </div><div class="line">		ele.className += <span class="string">" "</span>+cls;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="removeClass"><a href="#removeClass" class="headerlink" title="removeClass"></a>removeClass</h1><p>若有就刪除。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> removeClass = <span class="function"><span class="keyword">function</span>(<span class="params">ele,cls</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (hasClass(ele,cls)) &#123;</div><div class="line">		<span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(\\s|^)'</span>+cls+<span class="string">'(\\s|$)'</span>);</div><div class="line">		ele.className=ele.className.replace(reg,<span class="string">' '</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="http://jaketrent.com/post/addremove-classes-raw-javascript/" target="_blank" rel="external">Add/Remove Classes With Raw Javascript</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在純JavaScript使用addClass和removeClass。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://jeno5980515.github.io/categories/Web/"/>
    
      <category term="Front-End" scheme="http://jeno5980515.github.io/categories/Web/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>[Front-End] 利用window.open傳值</title>
    <link href="http://jeno5980515.github.io/2015/09/08/Web/Front-End/%E5%88%A9%E7%94%A8window.open%E5%82%B3%E5%80%BC/"/>
    <id>http://jeno5980515.github.io/2015/09/08/Web/Front-End/利用window.open傳值/</id>
    <published>2015-09-08T12:30:38.000Z</published>
    <updated>2017-04-14T13:31:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前用過網址在網頁間傳值，這次利用<code>window.open()</code>在子母視窗間取值傳值。</p>
<a id="more"></a>
<h1 id="母視窗"><a href="#母視窗" class="headerlink" title="母視窗"></a>母視窗</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">"text"</span>;</div><div class="line"><span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">window</span>.open(<span class="string">"b.html"</span>,<span class="string">"_blank"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="子視窗"><a href="#子視窗" class="headerlink" title="子視窗"></a>子視窗</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(<span class="built_in">window</span>.opener.s);</div></pre></td></tr></table></figure>
<h1 id="備註"><a href="#備註" class="headerlink" title="備註"></a>備註</h1><p><code>window.open()</code>無法自動執行必須透過事件，而如果無法運行要上傳到Server。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前用過網址在網頁間傳值，這次利用&lt;code&gt;window.open()&lt;/code&gt;在子母視窗間取值傳值。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://jeno5980515.github.io/categories/Web/"/>
    
      <category term="Front-End" scheme="http://jeno5980515.github.io/categories/Web/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://jeno5980515.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
